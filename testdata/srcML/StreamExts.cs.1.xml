<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\StreamExts.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">IO</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Text</name></name>;</using>

<namespace pos:line="16" pos:column="1">namespace <name pos:line="16" pos:column="11">OpenRA</name>
<block pos:line="17" pos:column="1">{
	<class><specifier pos:line="18" pos:column="9">public</specifier> <specifier pos:line="18" pos:column="16">static</specifier> class <name pos:line="18" pos:column="29">StreamExts</name>
	<block pos:line="19" pos:column="9">{
		<function><type><specifier pos:line="20" pos:column="17">public</specifier> <specifier pos:line="20" pos:column="24">static</specifier> <name pos:line="20" pos:column="31">byte</name><index pos:line="20" pos:column="35">[]</index></type> <name pos:line="20" pos:column="38">ReadBytes</name><parameter_list pos:line="20" pos:column="47">(<param><decl><type><name pos:line="20" pos:column="48">this</name> <name pos:line="20" pos:column="53">Stream</name></type> <name pos:line="20" pos:column="60">s</name></decl></param>, <param><decl><type><name pos:line="20" pos:column="63">int</name></type> <name pos:line="20" pos:column="67">count</name></decl></param>)</parameter_list>
		<block pos:line="21" pos:column="17">{
			<if pos:line="22" pos:column="25">if <condition pos:line="22" pos:column="28">(<expr><name pos:line="22" pos:column="29">count</name> <op:operator pos:line="22" pos:column="35">&lt;</op:operator> <lit:literal type="number" pos:line="22" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="22" pos:column="39">
				<throw pos:line="23" pos:column="33">throw <expr><op:operator pos:line="23" pos:column="39">new</op:operator> <call><name pos:line="23" pos:column="43">ArgumentOutOfRangeException</name><argument_list pos:line="23" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="71">"count"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="23" pos:column="80">"Non-negative number required."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
			<decl_stmt><decl><type><name pos:line="24" pos:column="25">var</name></type> <name pos:line="24" pos:column="29">buffer</name> <init pos:line="24" pos:column="36">= <expr><op:operator pos:line="24" pos:column="38">new</op:operator> <name><name pos:line="24" pos:column="42">byte</name><index pos:line="24" pos:column="46">[<expr><name pos:line="24" pos:column="47">count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="25" pos:column="25">s</name><op:operator pos:line="25" pos:column="26">.</op:operator><name pos:line="25" pos:column="27">ReadBytes</name></name><argument_list pos:line="25" pos:column="36">(<argument><expr><name pos:line="25" pos:column="37">buffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="25" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="48">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="26" pos:column="25">return <expr><name pos:line="26" pos:column="32">buffer</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="29" pos:column="17">public</specifier> <specifier pos:line="29" pos:column="24">static</specifier> <name pos:line="29" pos:column="31">void</name></type> <name pos:line="29" pos:column="36">ReadBytes</name><parameter_list pos:line="29" pos:column="45">(<param><decl><type><name pos:line="29" pos:column="46">this</name> <name pos:line="29" pos:column="51">Stream</name></type> <name pos:line="29" pos:column="58">s</name></decl></param>, <param><decl><type><name><name pos:line="29" pos:column="61">byte</name><index pos:line="29" pos:column="65">[]</index></name></type> <name pos:line="29" pos:column="68">buffer</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="76">int</name></type> <name pos:line="29" pos:column="80">offset</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="88">int</name></type> <name pos:line="29" pos:column="92">count</name></decl></param>)</parameter_list>
		<block pos:line="30" pos:column="17">{
			<if pos:line="31" pos:column="25">if <condition pos:line="31" pos:column="28">(<expr><name pos:line="31" pos:column="29">count</name> <op:operator pos:line="31" pos:column="35">&lt;</op:operator> <lit:literal type="number" pos:line="31" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="31" pos:column="39">
				<throw pos:line="32" pos:column="33">throw <expr><op:operator pos:line="32" pos:column="39">new</op:operator> <call><name pos:line="32" pos:column="43">ArgumentOutOfRangeException</name><argument_list pos:line="32" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="71">"count"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="32" pos:column="80">"Non-negative number required."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
			<while pos:line="33" pos:column="25">while <condition pos:line="33" pos:column="31">(<expr><name pos:line="33" pos:column="32">count</name> <op:operator pos:line="33" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="33" pos:column="40">0</lit:literal></expr>)</condition>
			<block pos:line="34" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="35" pos:column="33">int</name></type> <name pos:line="35" pos:column="37">bytesRead</name></decl>;</decl_stmt>
				<if pos:line="36" pos:column="33">if <condition pos:line="36" pos:column="36">(<expr><op:operator pos:line="36" pos:column="37">(</op:operator><name pos:line="36" pos:column="38">bytesRead</name> <op:operator pos:line="36" pos:column="48">=</op:operator> <call><name><name pos:line="36" pos:column="50">s</name><op:operator pos:line="36" pos:column="51">.</op:operator><name pos:line="36" pos:column="52">Read</name></name><argument_list pos:line="36" pos:column="56">(<argument><expr><name pos:line="36" pos:column="57">buffer</name></expr></argument>, <argument><expr><name pos:line="36" pos:column="65">offset</name></expr></argument>, <argument><expr><name pos:line="36" pos:column="73">count</name></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="79">)</op:operator> <op:operator pos:line="36" pos:column="81">==</op:operator> <lit:literal type="number" pos:line="36" pos:column="84">0</lit:literal></expr>)</condition><then pos:line="36" pos:column="86">
					<throw pos:line="37" pos:column="41">throw <expr><op:operator pos:line="37" pos:column="47">new</op:operator> <call><name pos:line="37" pos:column="51">EndOfStreamException</name><argument_list pos:line="37" pos:column="71">()</argument_list></call></expr>;</throw></then></if>
				<expr_stmt><expr><name pos:line="38" pos:column="33">offset</name> <op:operator pos:line="38" pos:column="40">+=</op:operator> <name pos:line="38" pos:column="43">bytesRead</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="39" pos:column="33">count</name> <op:operator pos:line="39" pos:column="39">-=</op:operator> <name pos:line="39" pos:column="42">bytesRead</name></expr>;</expr_stmt>
			}</block></while>
		}</block></function>

		<function><type><specifier pos:line="43" pos:column="17">public</specifier> <specifier pos:line="43" pos:column="24">static</specifier> <name pos:line="43" pos:column="31">int</name></type> <name pos:line="43" pos:column="35">Peek</name><parameter_list pos:line="43" pos:column="39">(<param><decl><type><name pos:line="43" pos:column="40">this</name> <name pos:line="43" pos:column="45">Stream</name></type> <name pos:line="43" pos:column="52">s</name></decl></param>)</parameter_list>
		<block pos:line="44" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="45" pos:column="25">var</name></type> <name pos:line="45" pos:column="29">b</name> <init pos:line="45" pos:column="31">= <expr><call><name><name pos:line="45" pos:column="33">s</name><op:operator pos:line="45" pos:column="34">.</op:operator><name pos:line="45" pos:column="35">ReadByte</name></name><argument_list pos:line="45" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name pos:line="46" pos:column="29">b</name> <op:operator pos:line="46" pos:column="31">==</op:operator> <op:operator pos:line="46" pos:column="34">-</op:operator><lit:literal type="number" pos:line="46" pos:column="35">1</lit:literal></expr>)</condition><then pos:line="46" pos:column="37">
				<return pos:line="47" pos:column="33">return <expr><op:operator pos:line="47" pos:column="40">-</op:operator><lit:literal type="number" pos:line="47" pos:column="41">1</lit:literal></expr>;</return></then></if>
			<expr_stmt><expr><call><name><name pos:line="48" pos:column="25">s</name><op:operator pos:line="48" pos:column="26">.</op:operator><name pos:line="48" pos:column="27">Seek</name></name><argument_list pos:line="48" pos:column="31">(<argument><expr><op:operator pos:line="48" pos:column="32">-</op:operator><lit:literal type="number" pos:line="48" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="36">SeekOrigin</name><op:operator pos:line="48" pos:column="46">.</op:operator><name pos:line="48" pos:column="47">Current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="49" pos:column="25">return <expr><op:operator pos:line="49" pos:column="32">(</op:operator><name pos:line="49" pos:column="33">byte</name><op:operator pos:line="49" pos:column="37">)</op:operator><name pos:line="49" pos:column="38">b</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="52" pos:column="17">public</specifier> <specifier pos:line="52" pos:column="24">static</specifier> <name pos:line="52" pos:column="31">byte</name></type> <name pos:line="52" pos:column="36">ReadUInt8</name><parameter_list pos:line="52" pos:column="45">(<param><decl><type><name pos:line="52" pos:column="46">this</name> <name pos:line="52" pos:column="51">Stream</name></type> <name pos:line="52" pos:column="58">s</name></decl></param>)</parameter_list>
		<block pos:line="53" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="54" pos:column="25">var</name></type> <name pos:line="54" pos:column="29">b</name> <init pos:line="54" pos:column="31">= <expr><call><name><name pos:line="54" pos:column="33">s</name><op:operator pos:line="54" pos:column="34">.</op:operator><name pos:line="54" pos:column="35">ReadByte</name></name><argument_list pos:line="54" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="55" pos:column="25">if <condition pos:line="55" pos:column="28">(<expr><name pos:line="55" pos:column="29">b</name> <op:operator pos:line="55" pos:column="31">==</op:operator> <op:operator pos:line="55" pos:column="34">-</op:operator><lit:literal type="number" pos:line="55" pos:column="35">1</lit:literal></expr>)</condition><then pos:line="55" pos:column="37">
				<throw pos:line="56" pos:column="33">throw <expr><op:operator pos:line="56" pos:column="39">new</op:operator> <call><name pos:line="56" pos:column="43">EndOfStreamException</name><argument_list pos:line="56" pos:column="63">()</argument_list></call></expr>;</throw></then></if>
			<return pos:line="57" pos:column="25">return <expr><op:operator pos:line="57" pos:column="32">(</op:operator><name pos:line="57" pos:column="33">byte</name><op:operator pos:line="57" pos:column="37">)</op:operator><name pos:line="57" pos:column="38">b</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="60" pos:column="17">public</specifier> <specifier pos:line="60" pos:column="24">static</specifier> <name pos:line="60" pos:column="31">ushort</name></type> <name pos:line="60" pos:column="38">ReadUInt16</name><parameter_list pos:line="60" pos:column="48">(<param><decl><type><name pos:line="60" pos:column="49">this</name> <name pos:line="60" pos:column="54">Stream</name></type> <name pos:line="60" pos:column="61">s</name></decl></param>)</parameter_list>
		<block pos:line="61" pos:column="17">{
			<return pos:line="62" pos:column="25">return <expr><call><name><name pos:line="62" pos:column="32">BitConverter</name><op:operator pos:line="62" pos:column="44">.</op:operator><name pos:line="62" pos:column="45">ToUInt16</name></name><argument_list pos:line="62" pos:column="53">(<argument><expr><call><name><name pos:line="62" pos:column="54">s</name><op:operator pos:line="62" pos:column="55">.</op:operator><name pos:line="62" pos:column="56">ReadBytes</name></name><argument_list pos:line="62" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="66">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="62" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="65" pos:column="17">public</specifier> <specifier pos:line="65" pos:column="24">static</specifier> <name pos:line="65" pos:column="31">short</name></type> <name pos:line="65" pos:column="37">ReadInt16</name><parameter_list pos:line="65" pos:column="46">(<param><decl><type><name pos:line="65" pos:column="47">this</name> <name pos:line="65" pos:column="52">Stream</name></type> <name pos:line="65" pos:column="59">s</name></decl></param>)</parameter_list>
		<block pos:line="66" pos:column="17">{
			<return pos:line="67" pos:column="25">return <expr><call><name><name pos:line="67" pos:column="32">BitConverter</name><op:operator pos:line="67" pos:column="44">.</op:operator><name pos:line="67" pos:column="45">ToInt16</name></name><argument_list pos:line="67" pos:column="52">(<argument><expr><call><name><name pos:line="67" pos:column="53">s</name><op:operator pos:line="67" pos:column="54">.</op:operator><name pos:line="67" pos:column="55">ReadBytes</name></name><argument_list pos:line="67" pos:column="64">(<argument><expr><lit:literal type="number" pos:line="67" pos:column="65">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="67" pos:column="69">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="70" pos:column="17">public</specifier> <specifier pos:line="70" pos:column="24">static</specifier> <name pos:line="70" pos:column="31">uint</name></type> <name pos:line="70" pos:column="36">ReadUInt32</name><parameter_list pos:line="70" pos:column="46">(<param><decl><type><name pos:line="70" pos:column="47">this</name> <name pos:line="70" pos:column="52">Stream</name></type> <name pos:line="70" pos:column="59">s</name></decl></param>)</parameter_list>
		<block pos:line="71" pos:column="17">{
			<return pos:line="72" pos:column="25">return <expr><call><name><name pos:line="72" pos:column="32">BitConverter</name><op:operator pos:line="72" pos:column="44">.</op:operator><name pos:line="72" pos:column="45">ToUInt32</name></name><argument_list pos:line="72" pos:column="53">(<argument><expr><call><name><name pos:line="72" pos:column="54">s</name><op:operator pos:line="72" pos:column="55">.</op:operator><name pos:line="72" pos:column="56">ReadBytes</name></name><argument_list pos:line="72" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="72" pos:column="66">4</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="72" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="75" pos:column="17">public</specifier> <specifier pos:line="75" pos:column="24">static</specifier> <name pos:line="75" pos:column="31">int</name></type> <name pos:line="75" pos:column="35">ReadInt32</name><parameter_list pos:line="75" pos:column="44">(<param><decl><type><name pos:line="75" pos:column="45">this</name> <name pos:line="75" pos:column="50">Stream</name></type> <name pos:line="75" pos:column="57">s</name></decl></param>)</parameter_list>
		<block pos:line="76" pos:column="17">{
			<return pos:line="77" pos:column="25">return <expr><call><name><name pos:line="77" pos:column="32">BitConverter</name><op:operator pos:line="77" pos:column="44">.</op:operator><name pos:line="77" pos:column="45">ToInt32</name></name><argument_list pos:line="77" pos:column="52">(<argument><expr><call><name><name pos:line="77" pos:column="53">s</name><op:operator pos:line="77" pos:column="54">.</op:operator><name pos:line="77" pos:column="55">ReadBytes</name></name><argument_list pos:line="77" pos:column="64">(<argument><expr><lit:literal type="number" pos:line="77" pos:column="65">4</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="77" pos:column="69">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="80" pos:column="17">public</specifier> <specifier pos:line="80" pos:column="24">static</specifier> <name pos:line="80" pos:column="31">void</name></type> <name pos:line="80" pos:column="36">Write</name><parameter_list pos:line="80" pos:column="41">(<param><decl><type><name pos:line="80" pos:column="42">this</name> <name pos:line="80" pos:column="47">Stream</name></type> <name pos:line="80" pos:column="54">s</name></decl></param>, <param><decl><type><name pos:line="80" pos:column="57">int</name></type> <name pos:line="80" pos:column="61">value</name></decl></param>)</parameter_list>
		<block pos:line="81" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="82" pos:column="25">s</name><op:operator pos:line="82" pos:column="26">.</op:operator><name pos:line="82" pos:column="27">Write</name></name><argument_list pos:line="82" pos:column="32">(<argument><expr><call><name><name pos:line="82" pos:column="33">BitConverter</name><op:operator pos:line="82" pos:column="45">.</op:operator><name pos:line="82" pos:column="46">GetBytes</name></name><argument_list pos:line="82" pos:column="54">(<argument><expr><name pos:line="82" pos:column="55">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="85" pos:column="17">public</specifier> <specifier pos:line="85" pos:column="24">static</specifier> <name pos:line="85" pos:column="31">float</name></type> <name pos:line="85" pos:column="37">ReadFloat</name><parameter_list pos:line="85" pos:column="46">(<param><decl><type><name pos:line="85" pos:column="47">this</name> <name pos:line="85" pos:column="52">Stream</name></type> <name pos:line="85" pos:column="59">s</name></decl></param>)</parameter_list>
		<block pos:line="86" pos:column="17">{
			<return pos:line="87" pos:column="25">return <expr><call><name><name pos:line="87" pos:column="32">BitConverter</name><op:operator pos:line="87" pos:column="44">.</op:operator><name pos:line="87" pos:column="45">ToSingle</name></name><argument_list pos:line="87" pos:column="53">(<argument><expr><call><name><name pos:line="87" pos:column="54">s</name><op:operator pos:line="87" pos:column="55">.</op:operator><name pos:line="87" pos:column="56">ReadBytes</name></name><argument_list pos:line="87" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="87" pos:column="66">4</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="87" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="90" pos:column="17">public</specifier> <specifier pos:line="90" pos:column="24">static</specifier> <name pos:line="90" pos:column="31">double</name></type> <name pos:line="90" pos:column="38">ReadDouble</name><parameter_list pos:line="90" pos:column="48">(<param><decl><type><name pos:line="90" pos:column="49">this</name> <name pos:line="90" pos:column="54">Stream</name></type> <name pos:line="90" pos:column="61">s</name></decl></param>)</parameter_list>
		<block pos:line="91" pos:column="17">{
			<return pos:line="92" pos:column="25">return <expr><call><name><name pos:line="92" pos:column="32">BitConverter</name><op:operator pos:line="92" pos:column="44">.</op:operator><name pos:line="92" pos:column="45">ToDouble</name></name><argument_list pos:line="92" pos:column="53">(<argument><expr><call><name><name pos:line="92" pos:column="54">s</name><op:operator pos:line="92" pos:column="55">.</op:operator><name pos:line="92" pos:column="56">ReadBytes</name></name><argument_list pos:line="92" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="92" pos:column="66">8</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="92" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="95" pos:column="17">public</specifier> <specifier pos:line="95" pos:column="24">static</specifier> <name pos:line="95" pos:column="31">string</name></type> <name pos:line="95" pos:column="38">ReadASCII</name><parameter_list pos:line="95" pos:column="47">(<param><decl><type><name pos:line="95" pos:column="48">this</name> <name pos:line="95" pos:column="53">Stream</name></type> <name pos:line="95" pos:column="60">s</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="63">int</name></type> <name pos:line="95" pos:column="67">length</name></decl></param>)</parameter_list>
		<block pos:line="96" pos:column="17">{
			<return pos:line="97" pos:column="25">return <expr><op:operator pos:line="97" pos:column="32">new</op:operator> <call><name pos:line="97" pos:column="36">string</name><argument_list pos:line="97" pos:column="42">(<argument><expr><call><name><name pos:line="97" pos:column="43">Encoding</name><op:operator pos:line="97" pos:column="51">.</op:operator><name pos:line="97" pos:column="52">ASCII</name><op:operator pos:line="97" pos:column="57">.</op:operator><name pos:line="97" pos:column="58">GetChars</name></name><argument_list pos:line="97" pos:column="66">(<argument><expr><call><name><name pos:line="97" pos:column="67">s</name><op:operator pos:line="97" pos:column="68">.</op:operator><name pos:line="97" pos:column="69">ReadBytes</name></name><argument_list pos:line="97" pos:column="78">(<argument><expr><name pos:line="97" pos:column="79">length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="100" pos:column="17">public</specifier> <specifier pos:line="100" pos:column="24">static</specifier> <name pos:line="100" pos:column="31">string</name></type> <name pos:line="100" pos:column="38">ReadASCIIZ</name><parameter_list pos:line="100" pos:column="48">(<param><decl><type><name pos:line="100" pos:column="49">this</name> <name pos:line="100" pos:column="54">Stream</name></type> <name pos:line="100" pos:column="61">s</name></decl></param>)</parameter_list>
		<block pos:line="101" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="102" pos:column="25">var</name></type> <name pos:line="102" pos:column="29">bytes</name> <init pos:line="102" pos:column="35">= <expr><op:operator pos:line="102" pos:column="37">new</op:operator> <call><name><name pos:line="102" pos:column="41">List</name><argument_list pos:line="102" pos:column="45">&lt;<argument><name pos:line="102" pos:column="46">byte</name></argument>&gt;</argument_list></name><argument_list pos:line="102" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="103" pos:column="25">byte</name></type> <name pos:line="103" pos:column="30">b</name></decl>;</decl_stmt>
			<while pos:line="104" pos:column="25">while <condition pos:line="104" pos:column="31">(<expr><op:operator pos:line="104" pos:column="32">(</op:operator><name pos:line="104" pos:column="33">b</name> <op:operator pos:line="104" pos:column="35">=</op:operator> <call><name><name pos:line="104" pos:column="37">s</name><op:operator pos:line="104" pos:column="38">.</op:operator><name pos:line="104" pos:column="39">ReadUInt8</name></name><argument_list pos:line="104" pos:column="48">()</argument_list></call><op:operator pos:line="104" pos:column="50">)</op:operator> <op:operator pos:line="104" pos:column="52">!=</op:operator> <lit:literal type="number" pos:line="104" pos:column="55">0</lit:literal></expr>)</condition>
				<expr_stmt><expr><call><name><name pos:line="105" pos:column="33">bytes</name><op:operator pos:line="105" pos:column="38">.</op:operator><name pos:line="105" pos:column="39">Add</name></name><argument_list pos:line="105" pos:column="42">(<argument><expr><name pos:line="105" pos:column="43">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
			<return pos:line="106" pos:column="25">return <expr><op:operator pos:line="106" pos:column="32">new</op:operator> <call><name pos:line="106" pos:column="36">string</name><argument_list pos:line="106" pos:column="42">(<argument><expr><call><name><name pos:line="106" pos:column="43">Encoding</name><op:operator pos:line="106" pos:column="51">.</op:operator><name pos:line="106" pos:column="52">ASCII</name><op:operator pos:line="106" pos:column="57">.</op:operator><name pos:line="106" pos:column="58">GetChars</name></name><argument_list pos:line="106" pos:column="66">(<argument><expr><call><name><name pos:line="106" pos:column="67">bytes</name><op:operator pos:line="106" pos:column="72">.</op:operator><name pos:line="106" pos:column="73">ToArray</name></name><argument_list pos:line="106" pos:column="80">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="109" pos:column="17">public</specifier> <specifier pos:line="109" pos:column="24">static</specifier> <name pos:line="109" pos:column="31">string</name></type> <name pos:line="109" pos:column="38">ReadAllText</name><parameter_list pos:line="109" pos:column="49">(<param><decl><type><name pos:line="109" pos:column="50">this</name> <name pos:line="109" pos:column="55">Stream</name></type> <name pos:line="109" pos:column="62">s</name></decl></param>)</parameter_list>
		<block pos:line="110" pos:column="17">{
			<using pos:line="111" pos:column="25">using (<expr><name pos:line="111" pos:column="32">s</name></expr>)
			<using pos:line="112" pos:column="25">using (<decl><type><name pos:line="112" pos:column="32">var</name></type> <name pos:line="112" pos:column="36">sr</name> <init pos:line="112" pos:column="39">= <expr><op:operator pos:line="112" pos:column="41">new</op:operator> <call><name pos:line="112" pos:column="45">StreamReader</name><argument_list pos:line="112" pos:column="57">(<argument><expr><name pos:line="112" pos:column="58">s</name></expr></argument>)</argument_list></call></expr></init></decl>)
				<return pos:line="113" pos:column="33">return <expr><call><name><name pos:line="113" pos:column="40">sr</name><op:operator pos:line="113" pos:column="42">.</op:operator><name pos:line="113" pos:column="43">ReadToEnd</name></name><argument_list pos:line="113" pos:column="52">()</argument_list></call></expr>;</return></using></using>
		}</block></function>

		<function><type><specifier pos:line="116" pos:column="17">public</specifier> <specifier pos:line="116" pos:column="24">static</specifier> <name pos:line="116" pos:column="31">byte</name><index pos:line="116" pos:column="35">[]</index></type> <name pos:line="116" pos:column="38">ReadAllBytes</name><parameter_list pos:line="116" pos:column="50">(<param><decl><type><name pos:line="116" pos:column="51">this</name> <name pos:line="116" pos:column="56">Stream</name></type> <name pos:line="116" pos:column="63">s</name></decl></param>)</parameter_list>
		<block pos:line="117" pos:column="17">{
			<using pos:line="118" pos:column="25">using (<expr><name pos:line="118" pos:column="32">s</name></expr>)
				<return pos:line="119" pos:column="33">return <expr><call><name><name pos:line="119" pos:column="40">s</name><op:operator pos:line="119" pos:column="41">.</op:operator><name pos:line="119" pos:column="42">ReadBytes</name></name><argument_list pos:line="119" pos:column="51">(<argument><expr><call pos:line="119" pos:column="52">(<name pos:line="119" pos:column="53">int</name>)<argument_list pos:line="119" pos:column="57">(<argument><expr><name><name pos:line="119" pos:column="58">s</name><op:operator pos:line="119" pos:column="59">.</op:operator><name pos:line="119" pos:column="60">Length</name></name> <op:operator pos:line="119" pos:column="67">-</op:operator> <name><name pos:line="119" pos:column="69">s</name><op:operator pos:line="119" pos:column="70">.</op:operator><name pos:line="119" pos:column="71">Position</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></using>
		}</block></function>

		<function><type><specifier pos:line="122" pos:column="17">public</specifier> <specifier pos:line="122" pos:column="24">static</specifier> <name pos:line="122" pos:column="31">void</name></type> <name pos:line="122" pos:column="36">Write</name><parameter_list pos:line="122" pos:column="41">(<param><decl><type><name pos:line="122" pos:column="42">this</name> <name pos:line="122" pos:column="47">Stream</name></type> <name pos:line="122" pos:column="54">s</name></decl></param>, <param><decl><type><name><name pos:line="122" pos:column="57">byte</name><index pos:line="122" pos:column="61">[]</index></name></type> <name pos:line="122" pos:column="64">data</name></decl></param>)</parameter_list>
		<block pos:line="123" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="124" pos:column="25">s</name><op:operator pos:line="124" pos:column="26">.</op:operator><name pos:line="124" pos:column="27">Write</name></name><argument_list pos:line="124" pos:column="32">(<argument><expr><name pos:line="124" pos:column="33">data</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="124" pos:column="39">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="42">data</name><op:operator pos:line="124" pos:column="46">.</op:operator><name pos:line="124" pos:column="47">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="127" pos:column="17">public</specifier> <specifier pos:line="127" pos:column="24">static</specifier> <name><name pos:line="127" pos:column="31">IEnumerable</name><argument_list pos:line="127" pos:column="42">&lt;<argument><name pos:line="127" pos:column="43">string</name></argument>&gt;</argument_list></name></type> <name pos:line="127" pos:column="51">ReadAllLines</name><parameter_list pos:line="127" pos:column="63">(<param><decl><type><name pos:line="127" pos:column="64">this</name> <name pos:line="127" pos:column="69">Stream</name></type> <name pos:line="127" pos:column="76">s</name></decl></param>)</parameter_list>
		<block pos:line="128" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="129" pos:column="25">string</name></type> <name pos:line="129" pos:column="32">line</name></decl>;</decl_stmt>
			<using pos:line="130" pos:column="25">using (<decl><type><name pos:line="130" pos:column="32">var</name></type> <name pos:line="130" pos:column="36">sr</name> <init pos:line="130" pos:column="39">= <expr><op:operator pos:line="130" pos:column="41">new</op:operator> <call><name pos:line="130" pos:column="45">StreamReader</name><argument_list pos:line="130" pos:column="57">(<argument><expr><name pos:line="130" pos:column="58">s</name></expr></argument>)</argument_list></call></expr></init></decl>)
				<while pos:line="131" pos:column="33">while <condition pos:line="131" pos:column="39">(<expr><op:operator pos:line="131" pos:column="40">(</op:operator><name pos:line="131" pos:column="41">line</name> <op:operator pos:line="131" pos:column="46">=</op:operator> <call><name><name pos:line="131" pos:column="48">sr</name><op:operator pos:line="131" pos:column="50">.</op:operator><name pos:line="131" pos:column="51">ReadLine</name></name><argument_list pos:line="131" pos:column="59">()</argument_list></call><op:operator pos:line="131" pos:column="61">)</op:operator> <op:operator pos:line="131" pos:column="63">!=</op:operator> <name pos:line="131" pos:column="66">null</name></expr>)</condition>
					<return><specifier pos:line="132" pos:column="41">yield</specifier> return <expr><name pos:line="132" pos:column="54">line</name></expr>;</return></while></using>
		}</block></function>

		<comment type="line" pos:line="135" pos:column="17">// The string is assumed to be length-prefixed, as written by WriteString()</comment>
		<function><type><specifier pos:line="136" pos:column="17">public</specifier> <specifier pos:line="136" pos:column="24">static</specifier> <name pos:line="136" pos:column="31">string</name></type> <name pos:line="136" pos:column="38">ReadString</name><parameter_list pos:line="136" pos:column="48">(<param><decl><type><name pos:line="136" pos:column="49">this</name> <name pos:line="136" pos:column="54">Stream</name></type> <name pos:line="136" pos:column="61">s</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="64">Encoding</name></type> <name pos:line="136" pos:column="73">encoding</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="83">int</name></type> <name pos:line="136" pos:column="87">maxLength</name></decl></param>)</parameter_list>
		<block pos:line="137" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="138" pos:column="25">var</name></type> <name pos:line="138" pos:column="29">length</name> <init pos:line="138" pos:column="36">= <expr><call><name><name pos:line="138" pos:column="38">s</name><op:operator pos:line="138" pos:column="39">.</op:operator><name pos:line="138" pos:column="40">ReadInt32</name></name><argument_list pos:line="138" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="139" pos:column="25">if <condition pos:line="139" pos:column="28">(<expr><name pos:line="139" pos:column="29">length</name> <op:operator pos:line="139" pos:column="36">&gt;</op:operator> <name pos:line="139" pos:column="38">maxLength</name></expr>)</condition><then pos:line="139" pos:column="48">
				<throw pos:line="140" pos:column="33">throw <expr><op:operator pos:line="140" pos:column="39">new</op:operator> <call><name pos:line="140" pos:column="43">InvalidOperationException</name><argument_list pos:line="140" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="69">"The length of the string ({0}) is longer than the maximum allowed ({1})."</lit:literal><op:operator pos:line="140" pos:column="143">.</op:operator><call><name pos:line="140" pos:column="144">F</name><argument_list pos:line="140" pos:column="145">(<argument><expr><name pos:line="140" pos:column="146">length</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="154">maxLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<return pos:line="142" pos:column="25">return <expr><call><name><name pos:line="142" pos:column="32">encoding</name><op:operator pos:line="142" pos:column="40">.</op:operator><name pos:line="142" pos:column="41">GetString</name></name><argument_list pos:line="142" pos:column="50">(<argument><expr><call><name><name pos:line="142" pos:column="51">s</name><op:operator pos:line="142" pos:column="52">.</op:operator><name pos:line="142" pos:column="53">ReadBytes</name></name><argument_list pos:line="142" pos:column="62">(<argument><expr><name pos:line="142" pos:column="63">length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="line" pos:line="145" pos:column="17">// Writes a length-prefixed string using the specified encoding and returns</comment>
		<comment type="line" pos:line="146" pos:column="17">// the number of bytes written.</comment>
		<function><type><specifier pos:line="147" pos:column="17">public</specifier> <specifier pos:line="147" pos:column="24">static</specifier> <name pos:line="147" pos:column="31">int</name></type> <name pos:line="147" pos:column="35">WriteString</name><parameter_list pos:line="147" pos:column="46">(<param><decl><type><name pos:line="147" pos:column="47">this</name> <name pos:line="147" pos:column="52">Stream</name></type> <name pos:line="147" pos:column="59">s</name></decl></param>, <param><decl><type><name pos:line="147" pos:column="62">Encoding</name></type> <name pos:line="147" pos:column="71">encoding</name></decl></param>, <param><decl><type><name pos:line="147" pos:column="81">string</name></type> <name pos:line="147" pos:column="88">text</name></decl></param>)</parameter_list>
		<block pos:line="148" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="149" pos:column="25">byte</name><index pos:line="149" pos:column="29">[]</index></type> <name pos:line="149" pos:column="32">bytes</name></decl>;</decl_stmt>

			<if pos:line="151" pos:column="25">if <condition pos:line="151" pos:column="28">(<expr><op:operator pos:line="151" pos:column="29">!</op:operator><call><name><name pos:line="151" pos:column="30">string</name><op:operator pos:line="151" pos:column="36">.</op:operator><name pos:line="151" pos:column="37">IsNullOrEmpty</name></name><argument_list pos:line="151" pos:column="50">(<argument><expr><name pos:line="151" pos:column="51">text</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="151" pos:column="57">
				<expr_stmt><expr><name pos:line="152" pos:column="33">bytes</name> <op:operator pos:line="152" pos:column="39">=</op:operator> <call><name><name pos:line="152" pos:column="41">encoding</name><op:operator pos:line="152" pos:column="49">.</op:operator><name pos:line="152" pos:column="50">GetBytes</name></name><argument_list pos:line="152" pos:column="58">(<argument><expr><name pos:line="152" pos:column="59">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="153" pos:column="25">else
				<expr_stmt><expr><name pos:line="154" pos:column="33">bytes</name> <op:operator pos:line="154" pos:column="39">=</op:operator> <op:operator pos:line="154" pos:column="41">new</op:operator> <name><name pos:line="154" pos:column="45">byte</name><index pos:line="154" pos:column="49">[<expr><lit:literal type="number" pos:line="154" pos:column="50">0</lit:literal></expr>]</index></name></expr>;</expr_stmt></else></if>

			<expr_stmt><expr><call><name><name pos:line="156" pos:column="25">s</name><op:operator pos:line="156" pos:column="26">.</op:operator><name pos:line="156" pos:column="27">Write</name></name><argument_list pos:line="156" pos:column="32">(<argument><expr><name><name pos:line="156" pos:column="33">bytes</name><op:operator pos:line="156" pos:column="38">.</op:operator><name pos:line="156" pos:column="39">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="157" pos:column="25">s</name><op:operator pos:line="157" pos:column="26">.</op:operator><name pos:line="157" pos:column="27">Write</name></name><argument_list pos:line="157" pos:column="32">(<argument><expr><name pos:line="157" pos:column="33">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:line="159" pos:column="25">return <expr><lit:literal type="number" pos:line="159" pos:column="32">4</lit:literal> <op:operator pos:line="159" pos:column="34">+</op:operator> <name><name pos:line="159" pos:column="36">bytes</name><op:operator pos:line="159" pos:column="41">.</op:operator><name pos:line="159" pos:column="42">Length</name></name></expr>;</return>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
