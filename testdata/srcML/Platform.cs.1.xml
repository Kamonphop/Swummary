<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\Platform.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">IO</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Reflection</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name pos:line="17" pos:column="11">OpenRA</name>
<block pos:line="18" pos:column="1">{
	<enum><specifier pos:line="19" pos:column="9">public</specifier> enum <macro><name pos:line="19" pos:column="21">PlatformType</name></macro> <block pos:line="19" pos:column="34">{ <decl><name pos:line="19" pos:column="36">Unknown</name></decl><op:operator pos:line="19" pos:column="43">,</op:operator> <decl><name pos:line="19" pos:column="45">Windows</name></decl><op:operator pos:line="19" pos:column="52">,</op:operator> <decl><name pos:line="19" pos:column="54">OSX</name></decl><op:operator pos:line="19" pos:column="57">,</op:operator> <decl><name pos:line="19" pos:column="59">Linux</name></decl> }</block>

	<decl pos:line="21" pos:column="9">public static <name pos:line="21" pos:column="23">class</name> <name pos:line="21" pos:column="29">Platform</name>
	<block pos:line="22" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="23" pos:column="17">public</specifier> <specifier pos:line="23" pos:column="24">static</specifier> <name pos:line="23" pos:column="31">PlatformType</name></type> <name pos:line="23" pos:column="44">CurrentPlatform</name> <block pos:line="23" pos:column="60">{ <function><name pos:line="23" pos:column="62">get</name> <block pos:line="23" pos:column="66">{ <return pos:line="23" pos:column="68">return <expr><name><name pos:line="23" pos:column="75">currentPlatform</name><op:operator pos:line="23" pos:column="90">.</op:operator><name pos:line="23" pos:column="91">Value</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">static</specifier> <name><name pos:line="25" pos:column="24">Lazy</name><argument_list pos:line="25" pos:column="28">&lt;<argument><name pos:line="25" pos:column="29">PlatformType</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="43">currentPlatform</name> <init pos:line="25" pos:column="59">= <expr><call><name><name pos:line="25" pos:column="61">Exts</name><op:operator pos:line="25" pos:column="65">.</op:operator><name pos:line="25" pos:column="66">Lazy</name></name><argument_list pos:line="25" pos:column="70">(<argument><expr><name pos:line="25" pos:column="71">GetCurrentPlatform</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="27" pos:column="17">static</specifier> <name pos:line="27" pos:column="24">PlatformType</name></type> <name pos:line="27" pos:column="37">GetCurrentPlatform</name><parameter_list pos:line="27" pos:column="55">()</parameter_list>
		<block pos:line="28" pos:column="17">{
			<if pos:line="29" pos:column="25">if <condition pos:line="29" pos:column="28">(<expr><name><name pos:line="29" pos:column="29">Environment</name><op:operator pos:line="29" pos:column="40">.</op:operator><name pos:line="29" pos:column="41">OSVersion</name><op:operator pos:line="29" pos:column="50">.</op:operator><name pos:line="29" pos:column="51">Platform</name></name> <op:operator pos:line="29" pos:column="60">==</op:operator> <name><name pos:line="29" pos:column="63">PlatformID</name><op:operator pos:line="29" pos:column="73">.</op:operator><name pos:line="29" pos:column="74">Win32NT</name></name></expr>)</condition><then pos:line="29" pos:column="82">
				<return pos:line="30" pos:column="33">return <expr><name><name pos:line="30" pos:column="40">PlatformType</name><op:operator pos:line="30" pos:column="52">.</op:operator><name pos:line="30" pos:column="53">Windows</name></name></expr>;</return></then></if>

			<try pos:line="32" pos:column="25">try
			<block pos:line="33" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="34" pos:column="33">var</name></type> <name pos:line="34" pos:column="37">psi</name> <init pos:line="34" pos:column="41">= <expr><op:operator pos:line="34" pos:column="43">new</op:operator> <call><name pos:line="34" pos:column="47">ProcessStartInfo</name><argument_list pos:line="34" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="64">"uname"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="34" pos:column="73">"-s"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="35" pos:column="33">psi</name><op:operator pos:line="35" pos:column="36">.</op:operator><name pos:line="35" pos:column="37">UseShellExecute</name></name> <op:operator pos:line="35" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="35" pos:column="55">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="36" pos:column="33">psi</name><op:operator pos:line="36" pos:column="36">.</op:operator><name pos:line="36" pos:column="37">RedirectStandardOutput</name></name> <op:operator pos:line="36" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="36" pos:column="62">true</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="37" pos:column="33">var</name></type> <name pos:line="37" pos:column="37">p</name> <init pos:line="37" pos:column="39">= <expr><call><name><name pos:line="37" pos:column="41">Process</name><op:operator pos:line="37" pos:column="48">.</op:operator><name pos:line="37" pos:column="49">Start</name></name><argument_list pos:line="37" pos:column="54">(<argument><expr><name pos:line="37" pos:column="55">psi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="38" pos:column="33">var</name></type> <name pos:line="38" pos:column="37">kernelName</name> <init pos:line="38" pos:column="48">= <expr><call><name><name pos:line="38" pos:column="50">p</name><op:operator pos:line="38" pos:column="51">.</op:operator><name pos:line="38" pos:column="52">StandardOutput</name><op:operator pos:line="38" pos:column="66">.</op:operator><name pos:line="38" pos:column="67">ReadToEnd</name></name><argument_list pos:line="38" pos:column="76">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="39" pos:column="33">if <condition pos:line="39" pos:column="36">(<expr><call><name><name pos:line="39" pos:column="37">kernelName</name><op:operator pos:line="39" pos:column="47">.</op:operator><name pos:line="39" pos:column="48">Contains</name></name><argument_list pos:line="39" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="57">"Darwin"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="39" pos:column="67">
					<return pos:line="40" pos:column="41">return <expr><name><name pos:line="40" pos:column="48">PlatformType</name><op:operator pos:line="40" pos:column="60">.</op:operator><name pos:line="40" pos:column="61">OSX</name></name></expr>;</return></then>
				<else pos:line="41" pos:column="33">else
					<return pos:line="42" pos:column="41">return <expr><name><name pos:line="42" pos:column="48">PlatformType</name><op:operator pos:line="42" pos:column="60">.</op:operator><name pos:line="42" pos:column="61">Linux</name></name></expr>;</return></else></if>
			}</block>
			<catch pos:line="44" pos:column="25">catch <block pos:line="44" pos:column="31">{ }</block></catch></try>

			<return pos:line="46" pos:column="25">return <expr><name><name pos:line="46" pos:column="32">PlatformType</name><op:operator pos:line="46" pos:column="44">.</op:operator><name pos:line="46" pos:column="45">Unknown</name></name></expr>;</return>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="49" pos:column="17">public</specifier> <specifier pos:line="49" pos:column="24">static</specifier> <name pos:line="49" pos:column="31">string</name></type> <name pos:line="49" pos:column="38">RuntimeVersion</name>
		<block pos:line="50" pos:column="17">{
			<function><name pos:line="51" pos:column="25">get</name>
			<block pos:line="52" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="53" pos:column="33">var</name></type> <name pos:line="53" pos:column="37">mono</name> <init pos:line="53" pos:column="42">= <expr><call><name><name pos:line="53" pos:column="44">Type</name><op:operator pos:line="53" pos:column="48">.</op:operator><name pos:line="53" pos:column="49">GetType</name></name><argument_list pos:line="53" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="57">"Mono.Runtime"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="54" pos:column="33">if <condition pos:line="54" pos:column="36">(<expr><name pos:line="54" pos:column="37">mono</name> <op:operator pos:line="54" pos:column="42">==</op:operator> <name pos:line="54" pos:column="45">null</name></expr>)</condition><then pos:line="54" pos:column="50">
					<return pos:line="55" pos:column="41">return <expr><lit:literal type="string" pos:line="55" pos:column="48">".NET CLR {0}"</lit:literal><op:operator pos:line="55" pos:column="62">.</op:operator><call><name pos:line="55" pos:column="63">F</name><argument_list pos:line="55" pos:column="64">(<argument><expr><name><name pos:line="55" pos:column="65">Environment</name><op:operator pos:line="55" pos:column="76">.</op:operator><name pos:line="55" pos:column="77">Version</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

				<decl_stmt><decl><type><name pos:line="57" pos:column="33">var</name></type> <name pos:line="57" pos:column="37">version</name> <init pos:line="57" pos:column="45">= <expr><call><name><name pos:line="57" pos:column="47">mono</name><op:operator pos:line="57" pos:column="51">.</op:operator><name pos:line="57" pos:column="52">GetMethod</name></name><argument_list pos:line="57" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="62">"GetDisplayName"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="80">BindingFlags</name><op:operator pos:line="57" pos:column="92">.</op:operator><name pos:line="57" pos:column="93">NonPublic</name></name> <op:operator pos:line="57" pos:column="103">|</op:operator> <name><name pos:line="57" pos:column="105">BindingFlags</name><op:operator pos:line="57" pos:column="117">.</op:operator><name pos:line="57" pos:column="118">Static</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="58" pos:column="33">if <condition pos:line="58" pos:column="36">(<expr><name pos:line="58" pos:column="37">version</name> <op:operator pos:line="58" pos:column="45">==</op:operator> <name pos:line="58" pos:column="48">null</name></expr>)</condition><then pos:line="58" pos:column="53">
					<return pos:line="59" pos:column="41">return <expr><lit:literal type="string" pos:line="59" pos:column="48">"Mono (unknown version) CLR {0}"</lit:literal><op:operator pos:line="59" pos:column="80">.</op:operator><call><name pos:line="59" pos:column="81">F</name><argument_list pos:line="59" pos:column="82">(<argument><expr><name><name pos:line="59" pos:column="83">Environment</name><op:operator pos:line="59" pos:column="94">.</op:operator><name pos:line="59" pos:column="95">Version</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

				<return pos:line="61" pos:column="33">return <expr><lit:literal type="string" pos:line="61" pos:column="40">"Mono {0} CLR {1}"</lit:literal><op:operator pos:line="61" pos:column="58">.</op:operator><call><name pos:line="61" pos:column="59">F</name><argument_list pos:line="61" pos:column="60">(<argument><expr><call><name><name pos:line="61" pos:column="61">version</name><op:operator pos:line="61" pos:column="68">.</op:operator><name pos:line="61" pos:column="69">Invoke</name></name><argument_list pos:line="61" pos:column="75">(<argument><expr><name pos:line="61" pos:column="76">null</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="82">null</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="89">Environment</name><op:operator pos:line="61" pos:column="100">.</op:operator><name pos:line="61" pos:column="101">Version</name></name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>
		}</block></decl></decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="65" pos:column="17">public</specifier> <specifier pos:line="65" pos:column="24">static</specifier> <name pos:line="65" pos:column="31">string</name></type> <name pos:line="65" pos:column="38">SupportDir</name> <block pos:line="65" pos:column="49">{ <function><name pos:line="65" pos:column="51">get</name> <block pos:line="65" pos:column="55">{ <return pos:line="65" pos:column="57">return <expr><name><name pos:line="65" pos:column="64">supportDir</name><op:operator pos:line="65" pos:column="74">.</op:operator><name pos:line="65" pos:column="75">Value</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="66" pos:column="17">static</specifier> <name><name pos:line="66" pos:column="24">Lazy</name><argument_list pos:line="66" pos:column="28">&lt;<argument><name pos:line="66" pos:column="29">string</name></argument>&gt;</argument_list></name></type> <name pos:line="66" pos:column="37">supportDir</name> <init pos:line="66" pos:column="48">= <expr><call><name><name pos:line="66" pos:column="50">Exts</name><op:operator pos:line="66" pos:column="54">.</op:operator><name pos:line="66" pos:column="55">Lazy</name></name><argument_list pos:line="66" pos:column="59">(<argument><expr><name pos:line="66" pos:column="60">GetSupportDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="68" pos:column="17">static</specifier> <name pos:line="68" pos:column="24">string</name></type> <name pos:line="68" pos:column="31">GetSupportDir</name><parameter_list pos:line="68" pos:column="44">()</parameter_list>
		<block pos:line="69" pos:column="17">{
			<comment type="line" pos:line="70" pos:column="25">// Use a local directory in the game root if it exists</comment>
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><call><name><name pos:line="71" pos:column="29">Directory</name><op:operator pos:line="71" pos:column="38">.</op:operator><name pos:line="71" pos:column="39">Exists</name></name><argument_list pos:line="71" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="46">"Support"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="71" pos:column="57">
				<return pos:line="72" pos:column="33">return <expr><lit:literal type="string" pos:line="72" pos:column="40">"Support"</lit:literal> <op:operator pos:line="72" pos:column="50">+</op:operator> <name><name pos:line="72" pos:column="52">Path</name><op:operator pos:line="72" pos:column="56">.</op:operator><name pos:line="72" pos:column="57">DirectorySeparatorChar</name></name></expr>;</return></then></if>

			<decl_stmt><decl><type><name pos:line="74" pos:column="25">var</name></type> <name pos:line="74" pos:column="29">dir</name> <init pos:line="74" pos:column="33">= <expr><call><name><name pos:line="74" pos:column="35">Environment</name><op:operator pos:line="74" pos:column="46">.</op:operator><name pos:line="74" pos:column="47">GetFolderPath</name></name><argument_list pos:line="74" pos:column="60">(<argument><expr><name><name pos:line="74" pos:column="61">Environment</name><op:operator pos:line="74" pos:column="72">.</op:operator><name pos:line="74" pos:column="73">SpecialFolder</name><op:operator pos:line="74" pos:column="86">.</op:operator><name pos:line="74" pos:column="87">Personal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<switch pos:line="76" pos:column="25">switch <condition pos:line="76" pos:column="32">(<expr><name pos:line="76" pos:column="33">CurrentPlatform</name></expr>)</condition>
			<block pos:line="77" pos:column="25">{
				<case pos:line="78" pos:column="33">case <expr><name><name pos:line="78" pos:column="38">PlatformType</name><op:operator pos:line="78" pos:column="50">.</op:operator><name pos:line="78" pos:column="51">Windows</name></name></expr>:
					<expr_stmt><expr><name pos:line="79" pos:column="41">dir</name> <op:operator pos:line="79" pos:column="45">+=</op:operator> <name><name pos:line="79" pos:column="48">Path</name><op:operator pos:line="79" pos:column="52">.</op:operator><name pos:line="79" pos:column="53">DirectorySeparatorChar</name></name> <op:operator pos:line="79" pos:column="76">+</op:operator> <lit:literal type="string" pos:line="79" pos:column="78">"OpenRA"</lit:literal></expr>;</expr_stmt>
					<break pos:line="80" pos:column="41">break;</break>
				</case><case pos:line="81" pos:column="33">case <expr><name><name pos:line="81" pos:column="38">PlatformType</name><op:operator pos:line="81" pos:column="50">.</op:operator><name pos:line="81" pos:column="51">OSX</name></name></expr>:
					<expr_stmt><expr><name pos:line="82" pos:column="41">dir</name> <op:operator pos:line="82" pos:column="45">+=</op:operator> <lit:literal type="string" pos:line="82" pos:column="48">"/Library/Application Support/OpenRA"</lit:literal></expr>;</expr_stmt>
					<break pos:line="83" pos:column="41">break;</break>
				</case><case pos:line="84" pos:column="33">case <expr><name><name pos:line="84" pos:column="38">PlatformType</name><op:operator pos:line="84" pos:column="50">.</op:operator><name pos:line="84" pos:column="51">Linux</name></name></expr>:
				</case><default pos:line="85" pos:column="33">default:
					<expr_stmt><expr><name pos:line="86" pos:column="41">dir</name> <op:operator pos:line="86" pos:column="45">+=</op:operator> <lit:literal type="string" pos:line="86" pos:column="48">"/.openra"</lit:literal></expr>;</expr_stmt>
					<break pos:line="87" pos:column="41">break;</break>
			</default>}</block></switch>

			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><op:operator pos:line="90" pos:column="29">!</op:operator><call><name><name pos:line="90" pos:column="30">Directory</name><op:operator pos:line="90" pos:column="39">.</op:operator><name pos:line="90" pos:column="40">Exists</name></name><argument_list pos:line="90" pos:column="46">(<argument><expr><name pos:line="90" pos:column="47">dir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="90" pos:column="52">
				<expr_stmt><expr><call><name><name pos:line="91" pos:column="33">Directory</name><op:operator pos:line="91" pos:column="42">.</op:operator><name pos:line="91" pos:column="43">CreateDirectory</name></name><argument_list pos:line="91" pos:column="58">(<argument><expr><name pos:line="91" pos:column="59">dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<return pos:line="93" pos:column="25">return <expr><name pos:line="93" pos:column="32">dir</name> <op:operator pos:line="93" pos:column="36">+</op:operator> <name><name pos:line="93" pos:column="38">Path</name><op:operator pos:line="93" pos:column="42">.</op:operator><name pos:line="93" pos:column="43">DirectorySeparatorChar</name></name></expr>;</return>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="96" pos:column="17">public</specifier> <specifier pos:line="96" pos:column="24">static</specifier> <name pos:line="96" pos:column="31">string</name></type> <name pos:line="96" pos:column="38">GameDir</name> <block pos:line="96" pos:column="46">{ <function><name pos:line="96" pos:column="48">get</name> <block pos:line="96" pos:column="52">{ <return pos:line="96" pos:column="54">return <expr><name><name pos:line="96" pos:column="61">AppDomain</name><op:operator pos:line="96" pos:column="70">.</op:operator><name pos:line="96" pos:column="71">CurrentDomain</name><op:operator pos:line="96" pos:column="84">.</op:operator><name pos:line="96" pos:column="85">BaseDirectory</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

		<comment type="line" pos:line="98" pos:column="17">/// &lt;summary&gt;Replace special character prefixes with full paths&lt;/summary&gt;</comment>
		<function><type><specifier pos:line="99" pos:column="17">public</specifier> <specifier pos:line="99" pos:column="24">static</specifier> <name pos:line="99" pos:column="31">string</name></type> <name pos:line="99" pos:column="38">ResolvePath</name><parameter_list pos:line="99" pos:column="49">(<param><decl><type><name pos:line="99" pos:column="50">string</name></type> <name pos:line="99" pos:column="57">path</name></decl></param>)</parameter_list>
		<block pos:line="100" pos:column="17">{
			<expr_stmt><expr><name pos:line="101" pos:column="25">path</name> <op:operator pos:line="101" pos:column="30">=</op:operator> <call><name><name pos:line="101" pos:column="32">path</name><op:operator pos:line="101" pos:column="36">.</op:operator><name pos:line="101" pos:column="37">TrimEnd</name></name><argument_list pos:line="101" pos:column="44">(<argument><expr><op:operator pos:line="101" pos:column="45">new</op:operator> <name><name pos:line="101" pos:column="49">char</name><index pos:line="101" pos:column="53">[]</index></name> <block pos:line="101" pos:column="56">{ <expr><lit:literal type="char" pos:line="101" pos:column="58">' '</lit:literal></expr><op:operator pos:line="101" pos:column="61">,</op:operator> <expr><lit:literal type="char" pos:line="101" pos:column="63">'\t'</lit:literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="103" pos:column="25">// paths starting with ^ are relative to the support dir</comment>
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><call><name><name pos:line="104" pos:column="29">path</name><op:operator pos:line="104" pos:column="33">.</op:operator><name pos:line="104" pos:column="34">StartsWith</name></name><argument_list pos:line="104" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="45">"^"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="104" pos:column="50">
				<expr_stmt><expr><name pos:line="105" pos:column="33">path</name> <op:operator pos:line="105" pos:column="38">=</op:operator> <name pos:line="105" pos:column="40">SupportDir</name> <op:operator pos:line="105" pos:column="51">+</op:operator> <call><name><name pos:line="105" pos:column="53">path</name><op:operator pos:line="105" pos:column="57">.</op:operator><name pos:line="105" pos:column="58">Substring</name></name><argument_list pos:line="105" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="105" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<comment type="line" pos:line="107" pos:column="25">// paths starting with . are relative to the game dir</comment>
			<if pos:line="108" pos:column="25">if <condition pos:line="108" pos:column="28">(<expr><call><name><name pos:line="108" pos:column="29">path</name><op:operator pos:line="108" pos:column="33">.</op:operator><name pos:line="108" pos:column="34">StartsWith</name></name><argument_list pos:line="108" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="45">"./"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="108" pos:column="51">||</op:operator> <call><name><name pos:line="108" pos:column="54">path</name><op:operator pos:line="108" pos:column="58">.</op:operator><name pos:line="108" pos:column="59">StartsWith</name></name><argument_list pos:line="108" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="70">".\\"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="108" pos:column="77">
				<expr_stmt><expr><name pos:line="109" pos:column="33">path</name> <op:operator pos:line="109" pos:column="38">=</op:operator> <name pos:line="109" pos:column="40">GameDir</name> <op:operator pos:line="109" pos:column="48">+</op:operator> <call><name><name pos:line="109" pos:column="50">path</name><op:operator pos:line="109" pos:column="54">.</op:operator><name pos:line="109" pos:column="55">Substring</name></name><argument_list pos:line="109" pos:column="64">(<argument><expr><lit:literal type="number" pos:line="109" pos:column="65">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<return pos:line="111" pos:column="25">return <expr><name pos:line="111" pos:column="32">path</name></expr>;</return>
		}</block></function>

		<comment type="line" pos:line="114" pos:column="17">/// &lt;summary&gt;Replace special character prefixes with full paths&lt;/summary&gt;</comment>
		<function><type><specifier pos:line="115" pos:column="17">public</specifier> <specifier pos:line="115" pos:column="24">static</specifier> <name pos:line="115" pos:column="31">string</name></type> <name pos:line="115" pos:column="38">ResolvePath</name><parameter_list pos:line="115" pos:column="49">(<param><decl><type><specifier pos:line="115" pos:column="50">params</specifier> <name><name pos:line="115" pos:column="57">string</name><index pos:line="115" pos:column="63">[]</index></name></type> <name pos:line="115" pos:column="66">path</name></decl></param>)</parameter_list>
		<block pos:line="116" pos:column="17">{
			<return pos:line="117" pos:column="25">return <expr><call><name pos:line="117" pos:column="32">ResolvePath</name><argument_list pos:line="117" pos:column="43">(<argument><expr><call><name><name pos:line="117" pos:column="44">path</name><op:operator pos:line="117" pos:column="48">.</op:operator><name pos:line="117" pos:column="49">Aggregate</name></name><argument_list pos:line="117" pos:column="58">(<argument><expr><name><name pos:line="117" pos:column="59">Path</name><op:operator pos:line="117" pos:column="63">.</op:operator><name pos:line="117" pos:column="64">Combine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="line" pos:line="120" pos:column="17">/// &lt;summary&gt;Replace the full path prefix with the special notation characters ^ or .&lt;/summary&gt;</comment>
		<function><type><specifier pos:line="121" pos:column="17">public</specifier> <specifier pos:line="121" pos:column="24">static</specifier> <name pos:line="121" pos:column="31">string</name></type> <name pos:line="121" pos:column="38">UnresolvePath</name><parameter_list pos:line="121" pos:column="51">(<param><decl><type><name pos:line="121" pos:column="52">string</name></type> <name pos:line="121" pos:column="59">path</name></decl></param>)</parameter_list>
		<block pos:line="122" pos:column="17">{
			<if pos:line="123" pos:column="25">if <condition pos:line="123" pos:column="28">(<expr><call><name><name pos:line="123" pos:column="29">path</name><op:operator pos:line="123" pos:column="33">.</op:operator><name pos:line="123" pos:column="34">StartsWith</name></name><argument_list pos:line="123" pos:column="44">(<argument><expr><name pos:line="123" pos:column="45">SupportDir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="123" pos:column="57">
				<expr_stmt><expr><name pos:line="124" pos:column="33">path</name> <op:operator pos:line="124" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="124" pos:column="40">"^"</lit:literal> <op:operator pos:line="124" pos:column="44">+</op:operator> <call><name><name pos:line="124" pos:column="46">path</name><op:operator pos:line="124" pos:column="50">.</op:operator><name pos:line="124" pos:column="51">Substring</name></name><argument_list pos:line="124" pos:column="60">(<argument><expr><name><name pos:line="124" pos:column="61">SupportDir</name><op:operator pos:line="124" pos:column="71">.</op:operator><name pos:line="124" pos:column="72">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><call><name><name pos:line="126" pos:column="29">path</name><op:operator pos:line="126" pos:column="33">.</op:operator><name pos:line="126" pos:column="34">StartsWith</name></name><argument_list pos:line="126" pos:column="44">(<argument><expr><name pos:line="126" pos:column="45">GameDir</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="126" pos:column="54">
				<expr_stmt><expr><name pos:line="127" pos:column="33">path</name> <op:operator pos:line="127" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="127" pos:column="40">"./"</lit:literal> <op:operator pos:line="127" pos:column="45">+</op:operator> <call><name><name pos:line="127" pos:column="47">path</name><op:operator pos:line="127" pos:column="51">.</op:operator><name pos:line="127" pos:column="52">Substring</name></name><argument_list pos:line="127" pos:column="61">(<argument><expr><name><name pos:line="127" pos:column="62">GameDir</name><op:operator pos:line="127" pos:column="69">.</op:operator><name pos:line="127" pos:column="70">Length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<return pos:line="129" pos:column="25">return <expr><name pos:line="129" pos:column="32">path</name></expr>;</return>
		}</block></function>
	}</block></decl>
<decl/></enum>}</block></namespace>
</unit>
