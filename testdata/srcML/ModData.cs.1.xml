<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\ModData.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">IO</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">OpenRA</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">FileSystem</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">OpenRA</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Graphics</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">OpenRA</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Widgets</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name pos:line="19" pos:column="11">OpenRA</name>
<block pos:line="20" pos:column="1">{
	<class><specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">sealed</specifier> class <name pos:line="21" pos:column="29">ModData</name> <super pos:line="21" pos:column="37">: <name pos:line="21" pos:column="39">IDisposable</name></super>
	<block pos:line="22" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="23" pos:column="17">public</specifier> <specifier pos:line="23" pos:column="24">readonly</specifier> <name pos:line="23" pos:column="33">Manifest</name></type> <name pos:line="23" pos:column="42">Manifest</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="24" pos:column="17">public</specifier> <specifier pos:line="24" pos:column="24">readonly</specifier> <name pos:line="24" pos:column="33">ObjectCreator</name></type> <name pos:line="24" pos:column="47">ObjectCreator</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">public</specifier> <specifier pos:line="25" pos:column="24">readonly</specifier> <name pos:line="25" pos:column="33">WidgetLoader</name></type> <name pos:line="25" pos:column="46">WidgetLoader</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">public</specifier> <specifier pos:line="26" pos:column="24">readonly</specifier> <name pos:line="26" pos:column="33">MapCache</name></type> <name pos:line="26" pos:column="42">MapCache</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="27" pos:column="17">public</specifier> <specifier pos:line="27" pos:column="24">readonly</specifier> <name pos:line="27" pos:column="33">ISpriteLoader</name><index pos:line="27" pos:column="46">[]</index></type> <name pos:line="27" pos:column="49">SpriteLoaders</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="28" pos:column="17">public</specifier> <specifier pos:line="28" pos:column="24">readonly</specifier> <name pos:line="28" pos:column="33">ISpriteSequenceLoader</name></type> <name pos:line="28" pos:column="55">SpriteSequenceLoader</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">public</specifier> <specifier pos:line="29" pos:column="24">readonly</specifier> <name pos:line="29" pos:column="33">RulesetCache</name></type> <name pos:line="29" pos:column="46">RulesetCache</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="30" pos:column="17">public</specifier> <name pos:line="30" pos:column="24">ILoadScreen</name></type> <name pos:line="30" pos:column="36">LoadScreen</name> <block pos:line="30" pos:column="47">{ <function_decl><name pos:line="30" pos:column="49">get</name>;</function_decl> <function_decl><specifier pos:line="30" pos:column="54">private</specifier> <name pos:line="30" pos:column="62">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="31" pos:column="17">public</specifier> <name pos:line="31" pos:column="24">VoxelLoader</name></type> <name pos:line="31" pos:column="36">VoxelLoader</name> <block pos:line="31" pos:column="48">{ <function_decl><name pos:line="31" pos:column="50">get</name>;</function_decl> <function_decl><specifier pos:line="31" pos:column="55">private</specifier> <name pos:line="31" pos:column="63">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="32" pos:column="17">public</specifier> <name pos:line="32" pos:column="24">CursorProvider</name></type> <name pos:line="32" pos:column="39">CursorProvider</name> <block pos:line="32" pos:column="54">{ <function_decl><name pos:line="32" pos:column="56">get</name>;</function_decl> <function_decl><specifier pos:line="32" pos:column="61">private</specifier> <name pos:line="32" pos:column="69">set</name>;</function_decl> }</block></decl></decl_stmt>

		<decl_stmt><decl><type><name><name pos:line="34" pos:column="17">Lazy</name><argument_list pos:line="34" pos:column="21">&lt;<argument><name pos:line="34" pos:column="22">Ruleset</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="31">defaultRules</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="35" pos:column="17">public</specifier> <name pos:line="35" pos:column="24">Ruleset</name></type> <name pos:line="35" pos:column="32">DefaultRules</name> <block pos:line="35" pos:column="45">{ <function><name pos:line="35" pos:column="47">get</name> <block pos:line="35" pos:column="51">{ <return pos:line="35" pos:column="53">return <expr><name><name pos:line="35" pos:column="60">defaultRules</name><op:operator pos:line="35" pos:column="72">.</op:operator><name pos:line="35" pos:column="73">Value</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

		<constructor><specifier pos:line="37" pos:column="17">public</specifier> <name pos:line="37" pos:column="24">ModData</name><parameter_list pos:line="37" pos:column="31">(<param><decl><type><name pos:line="37" pos:column="32">string</name></type> <name pos:line="37" pos:column="39">mod</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="44">bool</name></type> <name pos:line="37" pos:column="49">useLoadScreen</name> <init pos:line="37" pos:column="63">= <expr><lit:literal type="boolean" pos:line="37" pos:column="65">false</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="38" pos:column="17">{
			<expr_stmt><expr><name pos:line="39" pos:column="25">Languages</name> <op:operator pos:line="39" pos:column="35">=</op:operator> <op:operator pos:line="39" pos:column="37">new</op:operator> <name><name pos:line="39" pos:column="41">string</name><index pos:line="39" pos:column="47">[<expr><lit:literal type="number" pos:line="39" pos:column="48">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="40" pos:column="25">Manifest</name> <op:operator pos:line="40" pos:column="34">=</op:operator> <op:operator pos:line="40" pos:column="36">new</op:operator> <call><name pos:line="40" pos:column="40">Manifest</name><argument_list pos:line="40" pos:column="48">(<argument><expr><name pos:line="40" pos:column="49">mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="41" pos:column="25">ObjectCreator</name> <op:operator pos:line="41" pos:column="39">=</op:operator> <op:operator pos:line="41" pos:column="41">new</op:operator> <call><name pos:line="41" pos:column="45">ObjectCreator</name><argument_list pos:line="41" pos:column="58">(<argument><expr><name pos:line="41" pos:column="59">Manifest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="42" pos:column="25">Manifest</name><op:operator pos:line="42" pos:column="33">.</op:operator><name pos:line="42" pos:column="34">LoadCustomData</name></name><argument_list pos:line="42" pos:column="48">(<argument><expr><name pos:line="42" pos:column="49">ObjectCreator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="44" pos:column="25">if <condition pos:line="44" pos:column="28">(<expr><name pos:line="44" pos:column="29">useLoadScreen</name></expr>)</condition><then pos:line="44" pos:column="43">
			<block pos:line="45" pos:column="25">{
				<expr_stmt><expr><name pos:line="46" pos:column="33">LoadScreen</name> <op:operator pos:line="46" pos:column="44">=</op:operator> <call><name><name pos:line="46" pos:column="46">ObjectCreator</name><op:operator pos:line="46" pos:column="59">.</op:operator><name><name pos:line="46" pos:column="60">CreateObject</name><argument_list pos:line="46" pos:column="72">&lt;<argument><name pos:line="46" pos:column="73">ILoadScreen</name></argument>&gt;</argument_list></name></name><argument_list pos:line="46" pos:column="85">(<argument><expr><name><name pos:line="46" pos:column="86">Manifest</name><op:operator pos:line="46" pos:column="94">.</op:operator><name pos:line="46" pos:column="95">LoadScreen</name><op:operator pos:line="46" pos:column="105">.</op:operator><name pos:line="46" pos:column="106">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="47" pos:column="33">LoadScreen</name><op:operator pos:line="47" pos:column="43">.</op:operator><name pos:line="47" pos:column="44">Init</name></name><argument_list pos:line="47" pos:column="48">(<argument><expr><name pos:line="47" pos:column="49">Manifest</name></expr></argument>, <argument><expr><call><name><name pos:line="47" pos:column="59">Manifest</name><op:operator pos:line="47" pos:column="67">.</op:operator><name pos:line="47" pos:column="68">LoadScreen</name><op:operator pos:line="47" pos:column="78">.</op:operator><name pos:line="47" pos:column="79">ToDictionary</name></name><argument_list pos:line="47" pos:column="91">(<argument><expr><lambda><name pos:line="47" pos:column="92">my</name> <op:operator pos:line="47" pos:column="95">=&gt;</op:operator> <name><name pos:line="47" pos:column="98">my</name><op:operator pos:line="47" pos:column="100">.</op:operator><name pos:line="47" pos:column="101">Value</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="48" pos:column="33">LoadScreen</name><op:operator pos:line="48" pos:column="43">.</op:operator><name pos:line="48" pos:column="44">Display</name></name><argument_list pos:line="48" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><name pos:line="51" pos:column="25">WidgetLoader</name> <op:operator pos:line="51" pos:column="38">=</op:operator> <op:operator pos:line="51" pos:column="40">new</op:operator> <call><name pos:line="51" pos:column="44">WidgetLoader</name><argument_list pos:line="51" pos:column="56">(<argument><expr><name pos:line="51" pos:column="57">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="52" pos:column="25">RulesetCache</name> <op:operator pos:line="52" pos:column="38">=</op:operator> <op:operator pos:line="52" pos:column="40">new</op:operator> <call><name pos:line="52" pos:column="44">RulesetCache</name><argument_list pos:line="52" pos:column="56">(<argument><expr><name pos:line="52" pos:column="57">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="53" pos:column="25">RulesetCache</name><op:operator pos:line="53" pos:column="37">.</op:operator><name pos:line="53" pos:column="38">LoadingProgress</name></name> <op:operator pos:line="53" pos:column="54">+=</op:operator> <name pos:line="53" pos:column="57">HandleLoadingProgress</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="54" pos:column="25">MapCache</name> <op:operator pos:line="54" pos:column="34">=</op:operator> <op:operator pos:line="54" pos:column="36">new</op:operator> <call><name pos:line="54" pos:column="40">MapCache</name><argument_list pos:line="54" pos:column="48">(<argument><expr><name pos:line="54" pos:column="49">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="56" pos:column="25">var</name></type> <name pos:line="56" pos:column="29">spriteLoaders</name> <init pos:line="56" pos:column="43">= <expr><op:operator pos:line="56" pos:column="45">new</op:operator> <call><name><name pos:line="56" pos:column="49">List</name><argument_list pos:line="56" pos:column="53">&lt;<argument><name pos:line="56" pos:column="54">ISpriteLoader</name></argument>&gt;</argument_list></name><argument_list pos:line="56" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="57" pos:column="25">foreach (<init><decl><type><name pos:line="57" pos:column="34">var</name></type> <name pos:line="57" pos:column="38">format</name> <range pos:line="57" pos:column="45">in <expr><name><name pos:line="57" pos:column="48">Manifest</name><op:operator pos:line="57" pos:column="56">.</op:operator><name pos:line="57" pos:column="57">SpriteFormats</name></name></expr></range></decl></init>)
			<block pos:line="58" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="59" pos:column="33">var</name></type> <name pos:line="59" pos:column="37">loader</name> <init pos:line="59" pos:column="44">= <expr><call><name><name pos:line="59" pos:column="46">ObjectCreator</name><op:operator pos:line="59" pos:column="59">.</op:operator><name pos:line="59" pos:column="60">FindType</name></name><argument_list pos:line="59" pos:column="68">(<argument><expr><name pos:line="59" pos:column="69">format</name> <op:operator pos:line="59" pos:column="76">+</op:operator> <lit:literal type="string" pos:line="59" pos:column="78">"Loader"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="60" pos:column="33">if <condition pos:line="60" pos:column="36">(<expr><name pos:line="60" pos:column="37">loader</name> <op:operator pos:line="60" pos:column="44">==</op:operator> <name pos:line="60" pos:column="47">null</name> <op:operator pos:line="60" pos:column="52">||</op:operator> <op:operator pos:line="60" pos:column="55">!</op:operator><call><name><name pos:line="60" pos:column="56">loader</name><op:operator pos:line="60" pos:column="62">.</op:operator><name pos:line="60" pos:column="63">GetInterfaces</name></name><argument_list pos:line="60" pos:column="76">()</argument_list></call><op:operator pos:line="60" pos:column="78">.</op:operator><call><name pos:line="60" pos:column="79">Contains</name><argument_list pos:line="60" pos:column="87">(<argument><expr><call><name pos:line="60" pos:column="88">typeof</name><argument_list pos:line="60" pos:column="94">(<argument><expr><name pos:line="60" pos:column="95">ISpriteLoader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="60" pos:column="111">
					<throw pos:line="61" pos:column="41">throw <expr><op:operator pos:line="61" pos:column="47">new</op:operator> <call><name pos:line="61" pos:column="51">InvalidOperationException</name><argument_list pos:line="61" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="77">"Unable to find a sprite loader for type '{0}'."</lit:literal><op:operator pos:line="61" pos:column="125">.</op:operator><call><name pos:line="61" pos:column="126">F</name><argument_list pos:line="61" pos:column="127">(<argument><expr><name pos:line="61" pos:column="128">format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

				<expr_stmt><expr><call><name><name pos:line="63" pos:column="33">spriteLoaders</name><op:operator pos:line="63" pos:column="46">.</op:operator><name pos:line="63" pos:column="47">Add</name></name><argument_list pos:line="63" pos:column="50">(<argument><expr><op:operator pos:line="63" pos:column="51">(</op:operator><name pos:line="63" pos:column="52">ISpriteLoader</name><op:operator pos:line="63" pos:column="65">)</op:operator><call><name><name pos:line="63" pos:column="66">ObjectCreator</name><op:operator pos:line="63" pos:column="79">.</op:operator><name pos:line="63" pos:column="80">CreateBasic</name></name><argument_list pos:line="63" pos:column="91">(<argument><expr><name pos:line="63" pos:column="92">loader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>

			<expr_stmt><expr><name pos:line="66" pos:column="25">SpriteLoaders</name> <op:operator pos:line="66" pos:column="39">=</op:operator> <call><name><name pos:line="66" pos:column="41">spriteLoaders</name><op:operator pos:line="66" pos:column="54">.</op:operator><name pos:line="66" pos:column="55">ToArray</name></name><argument_list pos:line="66" pos:column="62">()</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="68" pos:column="25">var</name></type> <name pos:line="68" pos:column="29">sequenceFormat</name> <init pos:line="68" pos:column="44">= <expr><call><name><name pos:line="68" pos:column="46">Manifest</name><op:operator pos:line="68" pos:column="54">.</op:operator><name><name pos:line="68" pos:column="55">Get</name><argument_list pos:line="68" pos:column="58">&lt;<argument><name pos:line="68" pos:column="59">SpriteSequenceFormat</name></argument>&gt;</argument_list></name></name><argument_list pos:line="68" pos:column="80">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="69" pos:column="25">var</name></type> <name pos:line="69" pos:column="29">sequenceLoader</name> <init pos:line="69" pos:column="44">= <expr><call><name><name pos:line="69" pos:column="46">ObjectCreator</name><op:operator pos:line="69" pos:column="59">.</op:operator><name pos:line="69" pos:column="60">FindType</name></name><argument_list pos:line="69" pos:column="68">(<argument><expr><name><name pos:line="69" pos:column="69">sequenceFormat</name><op:operator pos:line="69" pos:column="83">.</op:operator><name pos:line="69" pos:column="84">Type</name></name> <op:operator pos:line="69" pos:column="89">+</op:operator> <lit:literal type="string" pos:line="69" pos:column="91">"Loader"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="70" pos:column="25">var</name></type> <name pos:line="70" pos:column="29">ctor</name> <init pos:line="70" pos:column="34">= <expr><name pos:line="70" pos:column="36">sequenceLoader</name> <op:operator pos:line="70" pos:column="51">!=</op:operator> <name pos:line="70" pos:column="54">null</name> <op:operator pos:line="70" pos:column="59">?</op:operator> <call><name><name pos:line="70" pos:column="61">sequenceLoader</name><op:operator pos:line="70" pos:column="75">.</op:operator><name pos:line="70" pos:column="76">GetConstructor</name></name><argument_list pos:line="70" pos:column="90">(<argument><expr><op:operator pos:line="70" pos:column="91">new</op:operator><index pos:line="70" pos:column="94">[]</index> <block pos:line="70" pos:column="97">{ <expr><call><name pos:line="70" pos:column="99">typeof</name><argument_list pos:line="70" pos:column="105">(<argument><expr><name pos:line="70" pos:column="106">ModData</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call> <op:operator pos:line="70" pos:column="118">:</op:operator> <name pos:line="70" pos:column="120">null</name></expr></init></decl>;</decl_stmt>
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><name pos:line="71" pos:column="29">sequenceLoader</name> <op:operator pos:line="71" pos:column="44">==</op:operator> <name pos:line="71" pos:column="47">null</name> <op:operator pos:line="71" pos:column="52">||</op:operator> <op:operator pos:line="71" pos:column="55">!</op:operator><call><name><name pos:line="71" pos:column="56">sequenceLoader</name><op:operator pos:line="71" pos:column="70">.</op:operator><name pos:line="71" pos:column="71">GetInterfaces</name></name><argument_list pos:line="71" pos:column="84">()</argument_list></call><op:operator pos:line="71" pos:column="86">.</op:operator><call><name pos:line="71" pos:column="87">Contains</name><argument_list pos:line="71" pos:column="95">(<argument><expr><call><name pos:line="71" pos:column="96">typeof</name><argument_list pos:line="71" pos:column="102">(<argument><expr><name pos:line="71" pos:column="103">ISpriteSequenceLoader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="71" pos:column="127">||</op:operator> <name pos:line="71" pos:column="130">ctor</name> <op:operator pos:line="71" pos:column="135">==</op:operator> <name pos:line="71" pos:column="138">null</name></expr>)</condition><then pos:line="71" pos:column="143">
				<throw pos:line="72" pos:column="33">throw <expr><op:operator pos:line="72" pos:column="39">new</op:operator> <call><name pos:line="72" pos:column="43">InvalidOperationException</name><argument_list pos:line="72" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="72" pos:column="69">"Unable to find a sequence loader for type '{0}'."</lit:literal><op:operator pos:line="72" pos:column="119">.</op:operator><call><name pos:line="72" pos:column="120">F</name><argument_list pos:line="72" pos:column="121">(<argument><expr><name><name pos:line="72" pos:column="122">sequenceFormat</name><op:operator pos:line="72" pos:column="136">.</op:operator><name pos:line="72" pos:column="137">Type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<expr_stmt><expr><name pos:line="74" pos:column="25">SpriteSequenceLoader</name> <op:operator pos:line="74" pos:column="46">=</op:operator> <op:operator pos:line="74" pos:column="48">(</op:operator><name pos:line="74" pos:column="49">ISpriteSequenceLoader</name><op:operator pos:line="74" pos:column="70">)</op:operator><call><name><name pos:line="74" pos:column="71">ctor</name><op:operator pos:line="74" pos:column="75">.</op:operator><name pos:line="74" pos:column="76">Invoke</name></name><argument_list pos:line="74" pos:column="82">(<argument><expr><op:operator pos:line="74" pos:column="83">new</op:operator><index pos:line="74" pos:column="86">[]</index> <block pos:line="74" pos:column="89">{ <expr><name pos:line="74" pos:column="91">this</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="75" pos:column="25">SpriteSequenceLoader</name><op:operator pos:line="75" pos:column="45">.</op:operator><name pos:line="75" pos:column="46">OnMissingSpriteError</name></name> <op:operator pos:line="75" pos:column="67">=</op:operator> <lambda><name pos:line="75" pos:column="69">s</name> <op:operator pos:line="75" pos:column="71">=&gt;</op:operator> <call><name><name pos:line="75" pos:column="74">Log</name><op:operator pos:line="75" pos:column="77">.</op:operator><name pos:line="75" pos:column="78">Write</name></name><argument_list pos:line="75" pos:column="83">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="84">"debug"</lit:literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="93">s</name></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt>

			<comment type="line" pos:line="77" pos:column="25">// HACK: Mount only local folders so we have a half-working environment for the asset installer</comment>
			<expr_stmt><expr><call><name><name pos:line="78" pos:column="25">GlobalFileSystem</name><op:operator pos:line="78" pos:column="41">.</op:operator><name pos:line="78" pos:column="42">UnmountAll</name></name><argument_list pos:line="78" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="79" pos:column="25">foreach (<init><decl><type><name pos:line="79" pos:column="34">var</name></type> <name pos:line="79" pos:column="38">dir</name> <range pos:line="79" pos:column="42">in <expr><name><name pos:line="79" pos:column="45">Manifest</name><op:operator pos:line="79" pos:column="53">.</op:operator><name pos:line="79" pos:column="54">Folders</name></name></expr></range></decl></init>)
				<expr_stmt><expr><call><name><name pos:line="80" pos:column="33">GlobalFileSystem</name><op:operator pos:line="80" pos:column="49">.</op:operator><name pos:line="80" pos:column="50">Mount</name></name><argument_list pos:line="80" pos:column="55">(<argument><expr><name pos:line="80" pos:column="56">dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>

			<expr_stmt><expr><name pos:line="82" pos:column="25">defaultRules</name> <op:operator pos:line="82" pos:column="38">=</op:operator> <call><name><name pos:line="82" pos:column="40">Exts</name><op:operator pos:line="82" pos:column="44">.</op:operator><name pos:line="82" pos:column="45">Lazy</name></name><argument_list pos:line="82" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="82" pos:column="50">()</parameter_list> <op:operator pos:line="82" pos:column="53">=&gt;</op:operator> <call><name><name pos:line="82" pos:column="56">RulesetCache</name><op:operator pos:line="82" pos:column="68">.</op:operator><name pos:line="82" pos:column="69">Load</name></name><argument_list pos:line="82" pos:column="73">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="84" pos:column="25">initialThreadId</name> <op:operator pos:line="84" pos:column="41">=</op:operator> <name><name pos:line="84" pos:column="43">System</name><op:operator pos:line="84" pos:column="49">.</op:operator><name pos:line="84" pos:column="50">Threading</name><op:operator pos:line="84" pos:column="59">.</op:operator><name pos:line="84" pos:column="60">Thread</name><op:operator pos:line="84" pos:column="66">.</op:operator><name pos:line="84" pos:column="67">CurrentThread</name><op:operator pos:line="84" pos:column="80">.</op:operator><name pos:line="84" pos:column="81">ManagedThreadId</name></name></expr>;</expr_stmt>
		}</block></constructor>

		<comment type="line" pos:line="87" pos:column="17">// HACK: Only update the loading screen if we're in the main thread.</comment>
		<decl_stmt><decl><type><name pos:line="88" pos:column="17">int</name></type> <name pos:line="88" pos:column="21">initialThreadId</name></decl>;</decl_stmt>
		<function><type><name pos:line="89" pos:column="17">void</name></type> <name pos:line="89" pos:column="22">HandleLoadingProgress</name><parameter_list pos:line="89" pos:column="43">(<param><decl><type><name pos:line="89" pos:column="44">object</name></type> <name pos:line="89" pos:column="51">sender</name></decl></param>, <param><decl><type><name pos:line="89" pos:column="59">EventArgs</name></type> <name pos:line="89" pos:column="69">e</name></decl></param>)</parameter_list>
		<block pos:line="90" pos:column="17">{
			<if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><name pos:line="91" pos:column="29">LoadScreen</name> <op:operator pos:line="91" pos:column="40">!=</op:operator> <name pos:line="91" pos:column="43">null</name> <op:operator pos:line="91" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="91" pos:column="51">System</name><op:operator pos:line="91" pos:column="57">.</op:operator><name pos:line="91" pos:column="58">Threading</name><op:operator pos:line="91" pos:column="67">.</op:operator><name pos:line="91" pos:column="68">Thread</name><op:operator pos:line="91" pos:column="74">.</op:operator><name pos:line="91" pos:column="75">CurrentThread</name><op:operator pos:line="91" pos:column="88">.</op:operator><name pos:line="91" pos:column="89">ManagedThreadId</name></name> <op:operator pos:line="91" pos:column="105">==</op:operator> <name pos:line="91" pos:column="108">initialThreadId</name></expr>)</condition><then pos:line="91" pos:column="124">
				<expr_stmt><expr><call><name><name pos:line="92" pos:column="33">LoadScreen</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">Display</name></name><argument_list pos:line="92" pos:column="51">()</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></function>

		<function><type><specifier pos:line="95" pos:column="17">public</specifier> <name pos:line="95" pos:column="24">void</name></type> <name pos:line="95" pos:column="29">InitializeLoaders</name><parameter_list pos:line="95" pos:column="46">()</parameter_list>
		<block pos:line="96" pos:column="17">{
			<comment type="line" pos:line="97" pos:column="25">// all this manipulation of static crap here is nasty and breaks</comment>
			<comment type="line" pos:line="98" pos:column="25">// horribly when you use ModData in unexpected ways.</comment>
			<expr_stmt><expr><call><name><name pos:line="99" pos:column="25">ChromeMetrics</name><op:operator pos:line="99" pos:column="38">.</op:operator><name pos:line="99" pos:column="39">Initialize</name></name><argument_list pos:line="99" pos:column="49">(<argument><expr><name><name pos:line="99" pos:column="50">Manifest</name><op:operator pos:line="99" pos:column="58">.</op:operator><name pos:line="99" pos:column="59">ChromeMetrics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="100" pos:column="25">ChromeProvider</name><op:operator pos:line="100" pos:column="39">.</op:operator><name pos:line="100" pos:column="40">Initialize</name></name><argument_list pos:line="100" pos:column="50">(<argument><expr><name><name pos:line="100" pos:column="51">Manifest</name><op:operator pos:line="100" pos:column="59">.</op:operator><name pos:line="100" pos:column="60">Chrome</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><name pos:line="102" pos:column="29">VoxelLoader</name> <op:operator pos:line="102" pos:column="41">!=</op:operator> <name pos:line="102" pos:column="44">null</name></expr>)</condition><then pos:line="102" pos:column="49">
				<expr_stmt><expr><call><name><name pos:line="103" pos:column="33">VoxelLoader</name><op:operator pos:line="103" pos:column="44">.</op:operator><name pos:line="103" pos:column="45">Dispose</name></name><argument_list pos:line="103" pos:column="52">()</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="104" pos:column="25">VoxelLoader</name> <op:operator pos:line="104" pos:column="37">=</op:operator> <op:operator pos:line="104" pos:column="39">new</op:operator> <call><name pos:line="104" pos:column="43">VoxelLoader</name><argument_list pos:line="104" pos:column="54">()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="106" pos:column="25">CursorProvider</name> <op:operator pos:line="106" pos:column="40">=</op:operator> <op:operator pos:line="106" pos:column="42">new</op:operator> <call><name pos:line="106" pos:column="46">CursorProvider</name><argument_list pos:line="106" pos:column="60">(<argument><expr><name pos:line="106" pos:column="61">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="109" pos:column="17">public</specifier> <name><name pos:line="109" pos:column="24">IEnumerable</name><argument_list pos:line="109" pos:column="35">&lt;<argument><name pos:line="109" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="109" pos:column="44">Languages</name> <block pos:line="109" pos:column="54">{ <function_decl><name pos:line="109" pos:column="56">get</name>;</function_decl> <function_decl><specifier pos:line="109" pos:column="61">private</specifier> <name pos:line="109" pos:column="69">set</name>;</function_decl> }</block></decl></decl_stmt>

		<function><type><name pos:line="111" pos:column="17">void</name></type> <name pos:line="111" pos:column="22">LoadTranslations</name><parameter_list pos:line="111" pos:column="38">(<param><decl><type><name pos:line="111" pos:column="39">Map</name></type> <name pos:line="111" pos:column="43">map</name></decl></param>)</parameter_list>
		<block pos:line="112" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="113" pos:column="25">var</name></type> <name pos:line="113" pos:column="29">selectedTranslations</name> <init pos:line="113" pos:column="50">= <expr><op:operator pos:line="113" pos:column="52">new</op:operator> <call><name><name pos:line="113" pos:column="56">Dictionary</name><argument_list pos:line="113" pos:column="66">&lt;<argument><name pos:line="113" pos:column="67">string</name></argument>, <argument><name pos:line="113" pos:column="75">string</name></argument>&gt;</argument_list></name><argument_list pos:line="113" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="114" pos:column="25">var</name></type> <name pos:line="114" pos:column="29">defaultTranslations</name> <init pos:line="114" pos:column="49">= <expr><op:operator pos:line="114" pos:column="51">new</op:operator> <call><name><name pos:line="114" pos:column="55">Dictionary</name><argument_list pos:line="114" pos:column="65">&lt;<argument><name pos:line="114" pos:column="66">string</name></argument>, <argument><name pos:line="114" pos:column="74">string</name></argument>&gt;</argument_list></name><argument_list pos:line="114" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="116" pos:column="25">if <condition pos:line="116" pos:column="28">(<expr><op:operator pos:line="116" pos:column="29">!</op:operator><call><name><name pos:line="116" pos:column="30">Manifest</name><op:operator pos:line="116" pos:column="38">.</op:operator><name pos:line="116" pos:column="39">Translations</name><op:operator pos:line="116" pos:column="51">.</op:operator><name pos:line="116" pos:column="52">Any</name></name><argument_list pos:line="116" pos:column="55">()</argument_list></call></expr>)</condition><then pos:line="116" pos:column="58">
			<block pos:line="117" pos:column="25">{
				<expr_stmt><expr><name pos:line="118" pos:column="33">Languages</name> <op:operator pos:line="118" pos:column="43">=</op:operator> <op:operator pos:line="118" pos:column="45">new</op:operator> <name><name pos:line="118" pos:column="49">string</name><index pos:line="118" pos:column="55">[<expr><lit:literal type="number" pos:line="118" pos:column="56">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
				<return pos:line="119" pos:column="33">return;</return>
			}</block></then></if>

			<decl_stmt><decl><type><name pos:line="122" pos:column="25">var</name></type> <name pos:line="122" pos:column="29">yaml</name> <init pos:line="122" pos:column="34">= <expr><call><name><name pos:line="122" pos:column="36">Manifest</name><op:operator pos:line="122" pos:column="44">.</op:operator><name pos:line="122" pos:column="45">Translations</name><op:operator pos:line="122" pos:column="57">.</op:operator><name pos:line="122" pos:column="58">Select</name></name><argument_list pos:line="122" pos:column="64">(<argument><expr><name><name pos:line="122" pos:column="65">MiniYaml</name><op:operator pos:line="122" pos:column="73">.</op:operator><name pos:line="122" pos:column="74">FromFile</name></name></expr></argument>)</argument_list></call><op:operator pos:line="122" pos:column="83">.</op:operator><call><name pos:line="122" pos:column="84">Aggregate</name><argument_list pos:line="122" pos:column="93">(<argument><expr><name><name pos:line="122" pos:column="94">MiniYaml</name><op:operator pos:line="122" pos:column="102">.</op:operator><name pos:line="122" pos:column="103">MergeLiberal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="123" pos:column="25">Languages</name> <op:operator pos:line="123" pos:column="35">=</op:operator> <call><name><name pos:line="123" pos:column="37">yaml</name><op:operator pos:line="123" pos:column="41">.</op:operator><name pos:line="123" pos:column="42">Select</name></name><argument_list pos:line="123" pos:column="48">(<argument><expr><lambda><name pos:line="123" pos:column="49">t</name> <op:operator pos:line="123" pos:column="51">=&gt;</op:operator> <name><name pos:line="123" pos:column="54">t</name><op:operator pos:line="123" pos:column="55">.</op:operator><name pos:line="123" pos:column="56">Key</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="123" pos:column="60">.</op:operator><call><name pos:line="123" pos:column="61">ToArray</name><argument_list pos:line="123" pos:column="68">()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="125" pos:column="25">yaml</name> <op:operator pos:line="125" pos:column="30">=</op:operator> <call><name><name pos:line="125" pos:column="32">MiniYaml</name><op:operator pos:line="125" pos:column="40">.</op:operator><name pos:line="125" pos:column="41">MergeLiberal</name></name><argument_list pos:line="125" pos:column="53">(<argument><expr><name><name pos:line="125" pos:column="54">map</name><op:operator pos:line="125" pos:column="57">.</op:operator><name pos:line="125" pos:column="58">TranslationDefinitions</name></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="82">yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<foreach pos:line="127" pos:column="25">foreach (<init><decl><type><name pos:line="127" pos:column="34">var</name></type> <name pos:line="127" pos:column="38">y</name> <range pos:line="127" pos:column="40">in <expr><name pos:line="127" pos:column="43">yaml</name></expr></range></decl></init>)
			<block pos:line="128" pos:column="25">{
				<if pos:line="129" pos:column="33">if <condition pos:line="129" pos:column="36">(<expr><name><name pos:line="129" pos:column="37">y</name><op:operator pos:line="129" pos:column="38">.</op:operator><name pos:line="129" pos:column="39">Key</name></name> <op:operator pos:line="129" pos:column="43">==</op:operator> <name><name pos:line="129" pos:column="46">Game</name><op:operator pos:line="129" pos:column="50">.</op:operator><name pos:line="129" pos:column="51">Settings</name><op:operator pos:line="129" pos:column="59">.</op:operator><name pos:line="129" pos:column="60">Graphics</name><op:operator pos:line="129" pos:column="68">.</op:operator><name pos:line="129" pos:column="69">Language</name></name></expr>)</condition><then pos:line="129" pos:column="78">
					<expr_stmt><expr><name pos:line="130" pos:column="41">selectedTranslations</name> <op:operator pos:line="130" pos:column="62">=</op:operator> <call><name><name pos:line="130" pos:column="64">y</name><op:operator pos:line="130" pos:column="65">.</op:operator><name pos:line="130" pos:column="66">Value</name><op:operator pos:line="130" pos:column="71">.</op:operator><name pos:line="130" pos:column="72">ToDictionary</name></name><argument_list pos:line="130" pos:column="84">(<argument><expr><lambda><name pos:line="130" pos:column="85">my</name> <op:operator pos:line="130" pos:column="88">=&gt;</op:operator> <name><name pos:line="130" pos:column="91">my</name><op:operator pos:line="130" pos:column="93">.</op:operator><name pos:line="130" pos:column="94">Value</name></name> <op:operator pos:line="130" pos:column="100">??</op:operator> <lit:literal type="string" pos:line="130" pos:column="103">""</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="131" pos:column="33">else <if pos:line="131" pos:column="38">if <condition pos:line="131" pos:column="41">(<expr><name><name pos:line="131" pos:column="42">y</name><op:operator pos:line="131" pos:column="43">.</op:operator><name pos:line="131" pos:column="44">Key</name></name> <op:operator pos:line="131" pos:column="48">==</op:operator> <name><name pos:line="131" pos:column="51">Game</name><op:operator pos:line="131" pos:column="55">.</op:operator><name pos:line="131" pos:column="56">Settings</name><op:operator pos:line="131" pos:column="64">.</op:operator><name pos:line="131" pos:column="65">Graphics</name><op:operator pos:line="131" pos:column="73">.</op:operator><name pos:line="131" pos:column="74">DefaultLanguage</name></name></expr>)</condition><then pos:line="131" pos:column="90">
					<expr_stmt><expr><name pos:line="132" pos:column="41">defaultTranslations</name> <op:operator pos:line="132" pos:column="61">=</op:operator> <call><name><name pos:line="132" pos:column="63">y</name><op:operator pos:line="132" pos:column="64">.</op:operator><name pos:line="132" pos:column="65">Value</name><op:operator pos:line="132" pos:column="70">.</op:operator><name pos:line="132" pos:column="71">ToDictionary</name></name><argument_list pos:line="132" pos:column="83">(<argument><expr><lambda><name pos:line="132" pos:column="84">my</name> <op:operator pos:line="132" pos:column="87">=&gt;</op:operator> <name><name pos:line="132" pos:column="90">my</name><op:operator pos:line="132" pos:column="92">.</op:operator><name pos:line="132" pos:column="93">Value</name></name> <op:operator pos:line="132" pos:column="99">??</op:operator> <lit:literal type="string" pos:line="132" pos:column="102">""</lit:literal></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
			}</block></foreach>

			<decl_stmt><decl><type><name pos:line="135" pos:column="25">var</name></type> <name pos:line="135" pos:column="29">translations</name> <init pos:line="135" pos:column="42">= <expr><op:operator pos:line="135" pos:column="44">new</op:operator> <call><name><name pos:line="135" pos:column="48">Dictionary</name><argument_list pos:line="135" pos:column="58">&lt;<argument><name pos:line="135" pos:column="59">string</name></argument>, <argument><name pos:line="135" pos:column="67">string</name></argument>&gt;</argument_list></name><argument_list pos:line="135" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="136" pos:column="25">foreach (<init><decl><type><name pos:line="136" pos:column="34">var</name></type> <name pos:line="136" pos:column="38">tkv</name> <range pos:line="136" pos:column="42">in <expr><call><name><name pos:line="136" pos:column="45">defaultTranslations</name><op:operator pos:line="136" pos:column="64">.</op:operator><name pos:line="136" pos:column="65">Concat</name></name><argument_list pos:line="136" pos:column="71">(<argument><expr><name pos:line="136" pos:column="72">selectedTranslations</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
			<block pos:line="137" pos:column="25">{
				<if pos:line="138" pos:column="33">if <condition pos:line="138" pos:column="36">(<expr><call><name><name pos:line="138" pos:column="37">translations</name><op:operator pos:line="138" pos:column="49">.</op:operator><name pos:line="138" pos:column="50">ContainsKey</name></name><argument_list pos:line="138" pos:column="61">(<argument><expr><name><name pos:line="138" pos:column="62">tkv</name><op:operator pos:line="138" pos:column="65">.</op:operator><name pos:line="138" pos:column="66">Key</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="138" pos:column="71">
					<continue pos:line="139" pos:column="41">continue;</continue></then></if>
				<if pos:line="140" pos:column="33">if <condition pos:line="140" pos:column="36">(<expr><call><name><name pos:line="140" pos:column="37">selectedTranslations</name><op:operator pos:line="140" pos:column="57">.</op:operator><name pos:line="140" pos:column="58">ContainsKey</name></name><argument_list pos:line="140" pos:column="69">(<argument><expr><name><name pos:line="140" pos:column="70">tkv</name><op:operator pos:line="140" pos:column="73">.</op:operator><name pos:line="140" pos:column="74">Key</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="140" pos:column="79">
					<expr_stmt><expr><call><name><name pos:line="141" pos:column="41">translations</name><op:operator pos:line="141" pos:column="53">.</op:operator><name pos:line="141" pos:column="54">Add</name></name><argument_list pos:line="141" pos:column="57">(<argument><expr><name><name pos:line="141" pos:column="58">tkv</name><op:operator pos:line="141" pos:column="61">.</op:operator><name pos:line="141" pos:column="62">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="141" pos:column="67">selectedTranslations</name><index pos:line="141" pos:column="87">[<expr><name><name pos:line="141" pos:column="88">tkv</name><op:operator pos:line="141" pos:column="91">.</op:operator><name pos:line="141" pos:column="92">Key</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="142" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="143" pos:column="41">translations</name><op:operator pos:line="143" pos:column="53">.</op:operator><name pos:line="143" pos:column="54">Add</name></name><argument_list pos:line="143" pos:column="57">(<argument><expr><name><name pos:line="143" pos:column="58">tkv</name><op:operator pos:line="143" pos:column="61">.</op:operator><name pos:line="143" pos:column="62">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="67">tkv</name><op:operator pos:line="143" pos:column="70">.</op:operator><name pos:line="143" pos:column="71">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></foreach>

			<expr_stmt><expr><call><name><name pos:line="146" pos:column="25">FieldLoader</name><op:operator pos:line="146" pos:column="36">.</op:operator><name pos:line="146" pos:column="37">SetTranslations</name></name><argument_list pos:line="146" pos:column="52">(<argument><expr><name pos:line="146" pos:column="53">translations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="149" pos:column="17">public</specifier> <name pos:line="149" pos:column="24">Map</name></type> <name pos:line="149" pos:column="28">PrepareMap</name><parameter_list pos:line="149" pos:column="38">(<param><decl><type><name pos:line="149" pos:column="39">string</name></type> <name pos:line="149" pos:column="46">uid</name></decl></param>)</parameter_list>
		<block pos:line="150" pos:column="17">{
			<if pos:line="151" pos:column="25">if <condition pos:line="151" pos:column="28">(<expr><name pos:line="151" pos:column="29">LoadScreen</name> <op:operator pos:line="151" pos:column="40">!=</op:operator> <name pos:line="151" pos:column="43">null</name></expr>)</condition><then pos:line="151" pos:column="48">
				<expr_stmt><expr><call><name><name pos:line="152" pos:column="33">LoadScreen</name><op:operator pos:line="152" pos:column="43">.</op:operator><name pos:line="152" pos:column="44">Display</name></name><argument_list pos:line="152" pos:column="51">()</argument_list></call></expr>;</expr_stmt></then></if>

			<if pos:line="154" pos:column="25">if <condition pos:line="154" pos:column="28">(<expr><name><name pos:line="154" pos:column="29">MapCache</name><index pos:line="154" pos:column="37">[<expr><name pos:line="154" pos:column="38">uid</name></expr>]</index></name><op:operator pos:line="154" pos:column="42">.</op:operator><name pos:line="154" pos:column="43">Status</name> <op:operator pos:line="154" pos:column="50">!=</op:operator> <name><name pos:line="154" pos:column="53">MapStatus</name><op:operator pos:line="154" pos:column="62">.</op:operator><name pos:line="154" pos:column="63">Available</name></name></expr>)</condition><then pos:line="154" pos:column="73">
				<throw pos:line="155" pos:column="33">throw <expr><op:operator pos:line="155" pos:column="39">new</op:operator> <call><name pos:line="155" pos:column="43">InvalidDataException</name><argument_list pos:line="155" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="64">"Invalid map uid: {0}"</lit:literal><op:operator pos:line="155" pos:column="86">.</op:operator><call><name pos:line="155" pos:column="87">F</name><argument_list pos:line="155" pos:column="88">(<argument><expr><name pos:line="155" pos:column="89">uid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<comment type="line" pos:line="157" pos:column="25">// Operate on a copy of the map to avoid gameplay state leaking into the cache</comment>
			<decl_stmt><decl><type><name pos:line="158" pos:column="25">var</name></type> <name pos:line="158" pos:column="29">map</name> <init pos:line="158" pos:column="33">= <expr><op:operator pos:line="158" pos:column="35">new</op:operator> <call><name pos:line="158" pos:column="39">Map</name><argument_list pos:line="158" pos:column="42">(<argument><expr><name><name pos:line="158" pos:column="43">MapCache</name><index pos:line="158" pos:column="51">[<expr><name pos:line="158" pos:column="52">uid</name></expr>]</index></name><op:operator pos:line="158" pos:column="56">.</op:operator><name><name pos:line="158" pos:column="57">Map</name><op:operator pos:line="158" pos:column="60">.</op:operator><name pos:line="158" pos:column="61">Path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name pos:line="160" pos:column="25">LoadTranslations</name><argument_list pos:line="160" pos:column="41">(<argument><expr><name pos:line="160" pos:column="42">map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="162" pos:column="25">// Reinit all our assets</comment>
			<expr_stmt><expr><call><name pos:line="163" pos:column="25">InitializeLoaders</name><argument_list pos:line="163" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="164" pos:column="25">GlobalFileSystem</name><op:operator pos:line="164" pos:column="41">.</op:operator><name pos:line="164" pos:column="42">LoadFromManifest</name></name><argument_list pos:line="164" pos:column="58">(<argument><expr><name pos:line="164" pos:column="59">Manifest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="166" pos:column="25">// Mount map package so custom assets can be used. TODO: check priority.</comment>
			<expr_stmt><expr><call><name><name pos:line="167" pos:column="25">GlobalFileSystem</name><op:operator pos:line="167" pos:column="41">.</op:operator><name pos:line="167" pos:column="42">Mount</name></name><argument_list pos:line="167" pos:column="47">(<argument><expr><call><name><name pos:line="167" pos:column="48">GlobalFileSystem</name><op:operator pos:line="167" pos:column="64">.</op:operator><name pos:line="167" pos:column="65">OpenPackage</name></name><argument_list pos:line="167" pos:column="76">(<argument><expr><name><name pos:line="167" pos:column="77">map</name><op:operator pos:line="167" pos:column="80">.</op:operator><name pos:line="167" pos:column="81">Path</name></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="87">null</name></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="93">int</name><op:operator pos:line="167" pos:column="96">.</op:operator><name pos:line="167" pos:column="97">MaxValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<using pos:line="169" pos:column="25">using (<expr><op:operator pos:line="169" pos:column="32">new</op:operator> <call><name><name pos:line="169" pos:column="36">Support</name><op:operator pos:line="169" pos:column="43">.</op:operator><name pos:line="169" pos:column="44">PerfTimer</name></name><argument_list pos:line="169" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="169" pos:column="54">"Map.PreloadRules"</lit:literal></expr></argument>)</argument_list></call></expr>)
				<expr_stmt><expr><call><name><name pos:line="170" pos:column="33">map</name><op:operator pos:line="170" pos:column="36">.</op:operator><name pos:line="170" pos:column="37">PreloadRules</name></name><argument_list pos:line="170" pos:column="49">()</argument_list></call></expr>;</expr_stmt></using>
			<using pos:line="171" pos:column="25">using (<expr><op:operator pos:line="171" pos:column="32">new</op:operator> <call><name><name pos:line="171" pos:column="36">Support</name><op:operator pos:line="171" pos:column="43">.</op:operator><name pos:line="171" pos:column="44">PerfTimer</name></name><argument_list pos:line="171" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="54">"Map.SequenceProvider.Preload"</lit:literal></expr></argument>)</argument_list></call></expr>)
				<expr_stmt><expr><call><name><name pos:line="172" pos:column="33">map</name><op:operator pos:line="172" pos:column="36">.</op:operator><name pos:line="172" pos:column="37">SequenceProvider</name><op:operator pos:line="172" pos:column="53">.</op:operator><name pos:line="172" pos:column="54">Preload</name></name><argument_list pos:line="172" pos:column="61">()</argument_list></call></expr>;</expr_stmt></using>

			<expr_stmt><expr><call><name><name pos:line="174" pos:column="25">VoxelProvider</name><op:operator pos:line="174" pos:column="38">.</op:operator><name pos:line="174" pos:column="39">Initialize</name></name><argument_list pos:line="174" pos:column="49">(<argument><expr><name><name pos:line="174" pos:column="50">Manifest</name><op:operator pos:line="174" pos:column="58">.</op:operator><name pos:line="174" pos:column="59">VoxelSequences</name></name></expr></argument>, <argument><expr><name><name pos:line="174" pos:column="75">map</name><op:operator pos:line="174" pos:column="78">.</op:operator><name pos:line="174" pos:column="79">VoxelSequenceDefinitions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="175" pos:column="25">VoxelLoader</name><op:operator pos:line="175" pos:column="36">.</op:operator><name pos:line="175" pos:column="37">Finish</name></name><argument_list pos:line="175" pos:column="43">()</argument_list></call></expr>;</expr_stmt>

			<return pos:line="177" pos:column="25">return <expr><name pos:line="177" pos:column="32">map</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="180" pos:column="17">public</specifier> <name pos:line="180" pos:column="24">void</name></type> <name pos:line="180" pos:column="29">Dispose</name><parameter_list pos:line="180" pos:column="36">()</parameter_list>
		<block pos:line="181" pos:column="17">{
			<if pos:line="182" pos:column="25">if <condition pos:line="182" pos:column="28">(<expr><name pos:line="182" pos:column="29">LoadScreen</name> <op:operator pos:line="182" pos:column="40">!=</op:operator> <name pos:line="182" pos:column="43">null</name></expr>)</condition><then pos:line="182" pos:column="48">
				<expr_stmt><expr><call><name><name pos:line="183" pos:column="33">LoadScreen</name><op:operator pos:line="183" pos:column="43">.</op:operator><name pos:line="183" pos:column="44">Dispose</name></name><argument_list pos:line="183" pos:column="51">()</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name><name pos:line="184" pos:column="25">RulesetCache</name><op:operator pos:line="184" pos:column="37">.</op:operator><name pos:line="184" pos:column="38">Dispose</name></name><argument_list pos:line="184" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="185" pos:column="25">MapCache</name><op:operator pos:line="185" pos:column="33">.</op:operator><name pos:line="185" pos:column="34">Dispose</name></name><argument_list pos:line="185" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="186" pos:column="25">if <condition pos:line="186" pos:column="28">(<expr><name pos:line="186" pos:column="29">VoxelLoader</name> <op:operator pos:line="186" pos:column="41">!=</op:operator> <name pos:line="186" pos:column="44">null</name></expr>)</condition><then pos:line="186" pos:column="49">
				<expr_stmt><expr><call><name><name pos:line="187" pos:column="33">VoxelLoader</name><op:operator pos:line="187" pos:column="44">.</op:operator><name pos:line="187" pos:column="45">Dispose</name></name><argument_list pos:line="187" pos:column="52">()</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></function>
	}</block></class>

	<class type="interface"><specifier pos:line="191" pos:column="9">public</specifier> interface <name pos:line="191" pos:column="26">ILoadScreen</name> <super pos:line="191" pos:column="38">: <name pos:line="191" pos:column="40">IDisposable</name></super>
	<block pos:line="192" pos:column="9">{
		<function_decl><type><name pos:line="193" pos:column="17">void</name></type> <name pos:line="193" pos:column="22">Init</name><parameter_list pos:line="193" pos:column="26">(<param><decl><type><name pos:line="193" pos:column="27">Manifest</name></type> <name pos:line="193" pos:column="36">m</name></decl></param>, <param><decl><type><name><name pos:line="193" pos:column="39">Dictionary</name><argument_list pos:line="193" pos:column="49">&lt;<argument><name pos:line="193" pos:column="50">string</name></argument>, <argument><name pos:line="193" pos:column="58">string</name></argument>&gt;</argument_list></name></type> <name pos:line="193" pos:column="66">info</name></decl></param>)</parameter_list>;</function_decl>
		<function_decl><type><name pos:line="194" pos:column="17">void</name></type> <name pos:line="194" pos:column="22">Display</name><parameter_list pos:line="194" pos:column="29">()</parameter_list>;</function_decl>
		<function_decl><type><name pos:line="195" pos:column="17">void</name></type> <name pos:line="195" pos:column="22">StartGame</name><parameter_list pos:line="195" pos:column="31">(<param><decl><type><name pos:line="195" pos:column="32">Arguments</name></type> <name pos:line="195" pos:column="42">args</name></decl></param>)</parameter_list>;</function_decl>
	}</block></class>
}</block></namespace>
</unit>
