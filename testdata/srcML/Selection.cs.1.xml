<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\Selection.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Collections</name><op:operator pos:line="11" pos:column="25">.</op:operator><name pos:line="11" pos:column="26">Generic</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Linq</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">OpenRA</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Graphics</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">OpenRA</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Primitives</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">OpenRA</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Traits</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name pos:line="17" pos:column="11">OpenRA</name>
<block pos:line="18" pos:column="1">{
	<class><specifier pos:line="19" pos:column="9">public</specifier> class <name pos:line="19" pos:column="22">Selection</name>
	<block pos:line="20" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="21" pos:column="17">readonly</specifier> <name><name pos:line="21" pos:column="26">HashSet</name><argument_list pos:line="21" pos:column="33">&lt;<argument><name pos:line="21" pos:column="34">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="41">actors</name> <init pos:line="21" pos:column="48">= <expr><op:operator pos:line="21" pos:column="50">new</op:operator> <call><name><name pos:line="21" pos:column="54">HashSet</name><argument_list pos:line="21" pos:column="61">&lt;<argument><name pos:line="21" pos:column="62">Actor</name></argument>&gt;</argument_list></name><argument_list pos:line="21" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<function><type><specifier pos:line="22" pos:column="17">public</specifier> <name pos:line="22" pos:column="24">void</name></type> <name pos:line="22" pos:column="29">Add</name><parameter_list pos:line="22" pos:column="32">(<param><decl><type><name pos:line="22" pos:column="33">World</name></type> <name pos:line="22" pos:column="39">w</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="42">Actor</name></type> <name pos:line="22" pos:column="48">a</name></decl></param>)</parameter_list>
		<block pos:line="23" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="24" pos:column="25">actors</name><op:operator pos:line="24" pos:column="31">.</op:operator><name pos:line="24" pos:column="32">Add</name></name><argument_list pos:line="24" pos:column="35">(<argument><expr><name pos:line="24" pos:column="36">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="25" pos:column="25">foreach (<init><decl><type><name pos:line="25" pos:column="34">var</name></type> <name pos:line="25" pos:column="38">sel</name> <range pos:line="25" pos:column="42">in <expr><call><name><name pos:line="25" pos:column="45">a</name><op:operator pos:line="25" pos:column="46">.</op:operator><name><name pos:line="25" pos:column="47">TraitsImplementing</name><argument_list pos:line="25" pos:column="65">&lt;<argument><name pos:line="25" pos:column="66">INotifySelected</name></argument>&gt;</argument_list></name></name><argument_list pos:line="25" pos:column="82">()</argument_list></call></expr></range></decl></init>)
				<expr_stmt><expr><call><name><name pos:line="26" pos:column="33">sel</name><op:operator pos:line="26" pos:column="36">.</op:operator><name pos:line="26" pos:column="37">Selected</name></name><argument_list pos:line="26" pos:column="45">(<argument><expr><name pos:line="26" pos:column="46">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
			<foreach pos:line="27" pos:column="25">foreach (<init><decl><type><name pos:line="27" pos:column="34">var</name></type> <name pos:line="27" pos:column="38">ns</name> <range pos:line="27" pos:column="41">in <expr><call><name><name pos:line="27" pos:column="44">w</name><op:operator pos:line="27" pos:column="45">.</op:operator><name pos:line="27" pos:column="46">WorldActor</name><op:operator pos:line="27" pos:column="56">.</op:operator><name><name pos:line="27" pos:column="57">TraitsImplementing</name><argument_list pos:line="27" pos:column="75">&lt;<argument><name pos:line="27" pos:column="76">INotifySelection</name></argument>&gt;</argument_list></name></name><argument_list pos:line="27" pos:column="93">()</argument_list></call></expr></range></decl></init>)
				<expr_stmt><expr><call><name><name pos:line="28" pos:column="33">ns</name><op:operator pos:line="28" pos:column="35">.</op:operator><name pos:line="28" pos:column="36">SelectionChanged</name></name><argument_list pos:line="28" pos:column="52">()</argument_list></call></expr>;</expr_stmt></foreach>
		}</block></function>

		<function><type><specifier pos:line="31" pos:column="17">public</specifier> <name pos:line="31" pos:column="24">bool</name></type> <name pos:line="31" pos:column="29">Contains</name><parameter_list pos:line="31" pos:column="37">(<param><decl><type><name pos:line="31" pos:column="38">Actor</name></type> <name pos:line="31" pos:column="44">a</name></decl></param>)</parameter_list>
		<block pos:line="32" pos:column="17">{
			<return pos:line="33" pos:column="25">return <expr><call><name><name pos:line="33" pos:column="32">actors</name><op:operator pos:line="33" pos:column="38">.</op:operator><name pos:line="33" pos:column="39">Contains</name></name><argument_list pos:line="33" pos:column="47">(<argument><expr><name pos:line="33" pos:column="48">a</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="36" pos:column="17">public</specifier> <name pos:line="36" pos:column="24">void</name></type> <name pos:line="36" pos:column="29">Combine</name><parameter_list pos:line="36" pos:column="36">(<param><decl><type><name pos:line="36" pos:column="37">World</name></type> <name pos:line="36" pos:column="43">world</name></decl></param>, <param><decl><type><name><name pos:line="36" pos:column="50">IEnumerable</name><argument_list pos:line="36" pos:column="61">&lt;<argument><name pos:line="36" pos:column="62">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="69">newSelection</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="83">bool</name></type> <name pos:line="36" pos:column="88">isCombine</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="99">bool</name></type> <name pos:line="36" pos:column="104">isClick</name></decl></param>)</parameter_list>
		<block pos:line="37" pos:column="17">{
			<if pos:line="38" pos:column="25">if <condition pos:line="38" pos:column="28">(<expr><name pos:line="38" pos:column="29">isClick</name></expr>)</condition><then pos:line="38" pos:column="37">
			<block pos:line="39" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="40" pos:column="33">var</name></type> <name pos:line="40" pos:column="37">adjNewSelection</name> <init pos:line="40" pos:column="53">= <expr><call><name><name pos:line="40" pos:column="55">newSelection</name><op:operator pos:line="40" pos:column="67">.</op:operator><name pos:line="40" pos:column="68">Take</name></name><argument_list pos:line="40" pos:column="72">(<argument><expr><lit:literal type="number" pos:line="40" pos:column="73">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block" pos:line="40" pos:column="81">/* TODO: select BEST, not FIRST */</comment>
				<if pos:line="41" pos:column="33">if <condition pos:line="41" pos:column="36">(<expr><name pos:line="41" pos:column="37">isCombine</name></expr>)</condition><then pos:line="41" pos:column="47">
					<expr_stmt><expr><call><name><name pos:line="42" pos:column="41">actors</name><op:operator pos:line="42" pos:column="47">.</op:operator><name pos:line="42" pos:column="48">SymmetricExceptWith</name></name><argument_list pos:line="42" pos:column="67">(<argument><expr><name pos:line="42" pos:column="68">adjNewSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="43" pos:column="33">else
				<block pos:line="44" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="45" pos:column="41">actors</name><op:operator pos:line="45" pos:column="47">.</op:operator><name pos:line="45" pos:column="48">Clear</name></name><argument_list pos:line="45" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="46" pos:column="41">actors</name><op:operator pos:line="46" pos:column="47">.</op:operator><name pos:line="46" pos:column="48">UnionWith</name></name><argument_list pos:line="46" pos:column="57">(<argument><expr><name pos:line="46" pos:column="58">adjNewSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then>
			<else pos:line="49" pos:column="25">else
			<block pos:line="50" pos:column="25">{
				<if pos:line="51" pos:column="33">if <condition pos:line="51" pos:column="36">(<expr><name pos:line="51" pos:column="37">isCombine</name></expr>)</condition><then pos:line="51" pos:column="47">
					<expr_stmt><expr><call><name><name pos:line="52" pos:column="41">actors</name><op:operator pos:line="52" pos:column="47">.</op:operator><name pos:line="52" pos:column="48">UnionWith</name></name><argument_list pos:line="52" pos:column="57">(<argument><expr><name pos:line="52" pos:column="58">newSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="53" pos:column="33">else
				<block pos:line="54" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="55" pos:column="41">actors</name><op:operator pos:line="55" pos:column="47">.</op:operator><name pos:line="55" pos:column="48">Clear</name></name><argument_list pos:line="55" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="56" pos:column="41">actors</name><op:operator pos:line="56" pos:column="47">.</op:operator><name pos:line="56" pos:column="48">UnionWith</name></name><argument_list pos:line="56" pos:column="57">(<argument><expr><name pos:line="56" pos:column="58">newSelection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></else></if>

			<foreach pos:line="60" pos:column="25">foreach (<init><decl><type><name pos:line="60" pos:column="34">var</name></type> <name pos:line="60" pos:column="38">a</name> <range pos:line="60" pos:column="40">in <expr><name pos:line="60" pos:column="43">newSelection</name></expr></range></decl></init>)
				<foreach pos:line="61" pos:column="33">foreach (<init><decl><type><name pos:line="61" pos:column="42">var</name></type> <name pos:line="61" pos:column="46">sel</name> <range pos:line="61" pos:column="50">in <expr><call><name><name pos:line="61" pos:column="53">a</name><op:operator pos:line="61" pos:column="54">.</op:operator><name><name pos:line="61" pos:column="55">TraitsImplementing</name><argument_list pos:line="61" pos:column="73">&lt;<argument><name pos:line="61" pos:column="74">INotifySelected</name></argument>&gt;</argument_list></name></name><argument_list pos:line="61" pos:column="90">()</argument_list></call></expr></range></decl></init>)
					<expr_stmt><expr><call><name><name pos:line="62" pos:column="41">sel</name><op:operator pos:line="62" pos:column="44">.</op:operator><name pos:line="62" pos:column="45">Selected</name></name><argument_list pos:line="62" pos:column="53">(<argument><expr><name pos:line="62" pos:column="54">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach></foreach>

			<foreach pos:line="64" pos:column="25">foreach (<init><decl><type><name pos:line="64" pos:column="34">var</name></type> <name pos:line="64" pos:column="38">ns</name> <range pos:line="64" pos:column="41">in <expr><call><name><name pos:line="64" pos:column="44">world</name><op:operator pos:line="64" pos:column="49">.</op:operator><name pos:line="64" pos:column="50">WorldActor</name><op:operator pos:line="64" pos:column="60">.</op:operator><name><name pos:line="64" pos:column="61">TraitsImplementing</name><argument_list pos:line="64" pos:column="79">&lt;<argument><name pos:line="64" pos:column="80">INotifySelection</name></argument>&gt;</argument_list></name></name><argument_list pos:line="64" pos:column="97">()</argument_list></call></expr></range></decl></init>)
				<expr_stmt><expr><call><name><name pos:line="65" pos:column="33">ns</name><op:operator pos:line="65" pos:column="35">.</op:operator><name pos:line="65" pos:column="36">SelectionChanged</name></name><argument_list pos:line="65" pos:column="52">()</argument_list></call></expr>;</expr_stmt></foreach>

			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><name><name pos:line="67" pos:column="29">world</name><op:operator pos:line="67" pos:column="34">.</op:operator><name pos:line="67" pos:column="35">IsGameOver</name></name></expr>)</condition><then pos:line="67" pos:column="46">
				<return pos:line="68" pos:column="33">return;</return></then></if>

			<comment type="line" pos:line="70" pos:column="25">// Play the selection voice from one of the selected actors</comment>
			<comment type="line" pos:line="71" pos:column="25">// TODO: This probably should only be considering the newly selected actors</comment>
			<comment type="line" pos:line="72" pos:column="25">// TODO: Ship this into an INotifySelection trait to remove the engine dependency on Selectable</comment>
			<foreach pos:line="73" pos:column="25">foreach (<init><decl><type><name pos:line="73" pos:column="34">var</name></type> <name pos:line="73" pos:column="38">actor</name> <range pos:line="73" pos:column="44">in <expr><name pos:line="73" pos:column="47">actors</name></expr></range></decl></init>)
			<block pos:line="74" pos:column="25">{
				<if pos:line="75" pos:column="33">if <condition pos:line="75" pos:column="36">(<expr><name><name pos:line="75" pos:column="37">actor</name><op:operator pos:line="75" pos:column="42">.</op:operator><name pos:line="75" pos:column="43">Owner</name></name> <op:operator pos:line="75" pos:column="49">!=</op:operator> <name><name pos:line="75" pos:column="52">world</name><op:operator pos:line="75" pos:column="57">.</op:operator><name pos:line="75" pos:column="58">LocalPlayer</name></name> <op:operator pos:line="75" pos:column="70">||</op:operator> <op:operator pos:line="75" pos:column="73">!</op:operator><name><name pos:line="75" pos:column="74">actor</name><op:operator pos:line="75" pos:column="79">.</op:operator><name pos:line="75" pos:column="80">IsInWorld</name></name></expr>)</condition><then pos:line="75" pos:column="90">
					<continue pos:line="76" pos:column="41">continue;</continue></then></if>

				<decl_stmt><decl><type><name pos:line="78" pos:column="33">var</name></type> <name pos:line="78" pos:column="37">selectable</name> <init pos:line="78" pos:column="48">= <expr><call><name><name pos:line="78" pos:column="50">actor</name><op:operator pos:line="78" pos:column="55">.</op:operator><name pos:line="78" pos:column="56">Info</name><op:operator pos:line="78" pos:column="60">.</op:operator><name pos:line="78" pos:column="61">Traits</name><op:operator pos:line="78" pos:column="67">.</op:operator><name><name pos:line="78" pos:column="68">GetOrDefault</name><argument_list pos:line="78" pos:column="80">&lt;<argument><name pos:line="78" pos:column="81">SelectableInfo</name></argument>&gt;</argument_list></name></name><argument_list pos:line="78" pos:column="96">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="79" pos:column="33">if <condition pos:line="79" pos:column="36">(<expr><name pos:line="79" pos:column="37">selectable</name> <op:operator pos:line="79" pos:column="48">==</op:operator> <name pos:line="79" pos:column="51">null</name> <op:operator pos:line="79" pos:column="56">||</op:operator> <op:operator pos:line="79" pos:column="59">!</op:operator><call><name><name pos:line="79" pos:column="60">actor</name><op:operator pos:line="79" pos:column="65">.</op:operator><name pos:line="79" pos:column="66">HasVoice</name></name><argument_list pos:line="79" pos:column="74">(<argument><expr><name><name pos:line="79" pos:column="75">selectable</name><op:operator pos:line="79" pos:column="85">.</op:operator><name pos:line="79" pos:column="86">Voice</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="79" pos:column="93">
					<continue pos:line="80" pos:column="41">continue;</continue></then></if>

				<expr_stmt><expr><call><name><name pos:line="82" pos:column="33">actor</name><op:operator pos:line="82" pos:column="38">.</op:operator><name pos:line="82" pos:column="39">PlayVoice</name></name><argument_list pos:line="82" pos:column="48">(<argument><expr><name><name pos:line="82" pos:column="49">selectable</name><op:operator pos:line="82" pos:column="59">.</op:operator><name pos:line="82" pos:column="60">Voice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="83" pos:column="33">break;</break>
			}</block></foreach>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="87" pos:column="17">public</specifier> <name><name pos:line="87" pos:column="24">IEnumerable</name><argument_list pos:line="87" pos:column="35">&lt;<argument><name pos:line="87" pos:column="36">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="87" pos:column="43">Actors</name> <block pos:line="87" pos:column="50">{ <function><name pos:line="87" pos:column="52">get</name> <block pos:line="87" pos:column="56">{ <return pos:line="87" pos:column="58">return <expr><name pos:line="87" pos:column="65">actors</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
		<function><type><specifier pos:line="88" pos:column="17">public</specifier> <name pos:line="88" pos:column="24">void</name></type> <name pos:line="88" pos:column="29">Clear</name><parameter_list pos:line="88" pos:column="34">()</parameter_list> <block pos:line="88" pos:column="37">{ <expr_stmt><expr><call><name><name pos:line="88" pos:column="39">actors</name><op:operator pos:line="88" pos:column="45">.</op:operator><name pos:line="88" pos:column="46">Clear</name></name><argument_list pos:line="88" pos:column="51">()</argument_list></call></expr>;</expr_stmt> }</block></function>

		<function><type><specifier pos:line="90" pos:column="17">public</specifier> <name pos:line="90" pos:column="24">void</name></type> <name pos:line="90" pos:column="29">Tick</name><parameter_list pos:line="90" pos:column="33">(<param><decl><type><name pos:line="90" pos:column="34">World</name></type> <name pos:line="90" pos:column="40">world</name></decl></param>)</parameter_list>
		<block pos:line="91" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="92" pos:column="25">actors</name><op:operator pos:line="92" pos:column="31">.</op:operator><name pos:line="92" pos:column="32">RemoveWhere</name></name><argument_list pos:line="92" pos:column="43">(<argument><expr><lambda><name pos:line="92" pos:column="44">a</name> <op:operator pos:line="92" pos:column="46">=&gt;</op:operator> <op:operator pos:line="92" pos:column="49">!</op:operator><name><name pos:line="92" pos:column="50">a</name><op:operator pos:line="92" pos:column="51">.</op:operator><name pos:line="92" pos:column="52">IsInWorld</name></name> <op:operator pos:line="92" pos:column="62">||</op:operator> <op:operator pos:line="92" pos:column="65">(</op:operator><op:operator pos:line="92" pos:column="66">!</op:operator><call><name><name pos:line="92" pos:column="67">a</name><op:operator pos:line="92" pos:column="68">.</op:operator><name pos:line="92" pos:column="69">Owner</name><op:operator pos:line="92" pos:column="74">.</op:operator><name pos:line="92" pos:column="75">IsAlliedWith</name></name><argument_list pos:line="92" pos:column="87">(<argument><expr><name><name pos:line="92" pos:column="88">world</name><op:operator pos:line="92" pos:column="93">.</op:operator><name pos:line="92" pos:column="94">RenderPlayer</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="92" pos:column="108">&amp;&amp;</op:operator> <call><name><name pos:line="92" pos:column="111">world</name><op:operator pos:line="92" pos:column="116">.</op:operator><name pos:line="92" pos:column="117">FogObscures</name></name><argument_list pos:line="92" pos:column="128">(<argument><expr><name pos:line="92" pos:column="129">a</name></expr></argument>)</argument_list></call><op:operator pos:line="92" pos:column="131">)</op:operator></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<foreach pos:line="94" pos:column="25">foreach (<init><decl><type><name pos:line="94" pos:column="34">var</name></type> <name pos:line="94" pos:column="38">cg</name> <range pos:line="94" pos:column="41">in <expr><name><name pos:line="94" pos:column="44">controlGroups</name><op:operator pos:line="94" pos:column="57">.</op:operator><name pos:line="94" pos:column="58">Values</name></name></expr></range></decl></init>)
			<block pos:line="95" pos:column="25">{
				<comment type="line" pos:line="96" pos:column="33">// note: NOT `!a.IsInWorld`, since that would remove things that are in transports.</comment>
				<expr_stmt><expr><call><name><name pos:line="97" pos:column="33">cg</name><op:operator pos:line="97" pos:column="35">.</op:operator><name pos:line="97" pos:column="36">RemoveAll</name></name><argument_list pos:line="97" pos:column="45">(<argument><expr><lambda><name pos:line="97" pos:column="46">a</name> <op:operator pos:line="97" pos:column="48">=&gt;</op:operator> <name><name pos:line="97" pos:column="51">a</name><op:operator pos:line="97" pos:column="52">.</op:operator><name pos:line="97" pos:column="53">Disposed</name></name> <op:operator pos:line="97" pos:column="62">||</op:operator> <name><name pos:line="97" pos:column="65">a</name><op:operator pos:line="97" pos:column="66">.</op:operator><name pos:line="97" pos:column="67">Owner</name></name> <op:operator pos:line="97" pos:column="73">!=</op:operator> <name><name pos:line="97" pos:column="76">world</name><op:operator pos:line="97" pos:column="81">.</op:operator><name pos:line="97" pos:column="82">LocalPlayer</name></name></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>
		}</block></function>

		<decl_stmt><decl><type><name><name pos:line="101" pos:column="17">Cache</name><argument_list pos:line="101" pos:column="22">&lt;<argument><name pos:line="101" pos:column="23">int</name></argument>, <argument><name><name pos:line="101" pos:column="28">List</name><argument_list pos:line="101" pos:column="32">&lt;<argument><name pos:line="101" pos:column="33">Actor</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="41">controlGroups</name> <init pos:line="101" pos:column="55">= <expr><op:operator pos:line="101" pos:column="57">new</op:operator> <call><name><name pos:line="101" pos:column="61">Cache</name><argument_list pos:line="101" pos:column="66">&lt;<argument><name pos:line="101" pos:column="67">int</name></argument>, <argument><name><name pos:line="101" pos:column="72">List</name><argument_list pos:line="101" pos:column="76">&lt;<argument><name pos:line="101" pos:column="77">Actor</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="101" pos:column="84">(<argument><expr><lambda><name pos:line="101" pos:column="85">_</name> <op:operator pos:line="101" pos:column="87">=&gt;</op:operator> <op:operator pos:line="101" pos:column="90">new</op:operator> <call><name><name pos:line="101" pos:column="94">List</name><argument_list pos:line="101" pos:column="98">&lt;<argument><name pos:line="101" pos:column="99">Actor</name></argument>&gt;</argument_list></name><argument_list pos:line="101" pos:column="105">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="103" pos:column="17">public</specifier> <name pos:line="103" pos:column="24">void</name></type> <name pos:line="103" pos:column="29">DoControlGroup</name><parameter_list pos:line="103" pos:column="43">(<param><decl><type><name pos:line="103" pos:column="44">World</name></type> <name pos:line="103" pos:column="50">world</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="57">WorldRenderer</name></type> <name pos:line="103" pos:column="71">worldRenderer</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="86">int</name></type> <name pos:line="103" pos:column="90">group</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="97">Modifiers</name></type> <name pos:line="103" pos:column="107">mods</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="113">int</name></type> <name pos:line="103" pos:column="117">multiTapCount</name></decl></param>)</parameter_list>
		<block pos:line="104" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="105" pos:column="25">var</name></type> <name pos:line="105" pos:column="29">addModifier</name> <init pos:line="105" pos:column="41">= <expr><name><name pos:line="105" pos:column="43">Platform</name><op:operator pos:line="105" pos:column="51">.</op:operator><name pos:line="105" pos:column="52">CurrentPlatform</name></name> <op:operator pos:line="105" pos:column="68">==</op:operator> <name><name pos:line="105" pos:column="71">PlatformType</name><op:operator pos:line="105" pos:column="83">.</op:operator><name pos:line="105" pos:column="84">OSX</name> <type:modifier pos:line="105" pos:column="88">?</type:modifier></name> <name><name pos:line="105" pos:column="90">Modifiers</name><op:operator pos:line="105" pos:column="99">.</op:operator><name pos:line="105" pos:column="100">Meta</name></name> <op:operator pos:line="105" pos:column="105">:</op:operator> <name><name pos:line="105" pos:column="107">Modifiers</name><op:operator pos:line="105" pos:column="116">.</op:operator><name pos:line="105" pos:column="117">Ctrl</name></name></expr></init></decl>;</decl_stmt>
			<if pos:line="106" pos:column="25">if <condition pos:line="106" pos:column="28">(<expr><call><name><name pos:line="106" pos:column="29">mods</name><op:operator pos:line="106" pos:column="33">.</op:operator><name pos:line="106" pos:column="34">HasModifier</name></name><argument_list pos:line="106" pos:column="45">(<argument><expr><name pos:line="106" pos:column="46">addModifier</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="59">
			<block pos:line="107" pos:column="25">{
				<if pos:line="108" pos:column="33">if <condition pos:line="108" pos:column="36">(<expr><name><name pos:line="108" pos:column="37">actors</name><op:operator pos:line="108" pos:column="43">.</op:operator><name pos:line="108" pos:column="44">Count</name></name> <op:operator pos:line="108" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="108" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="108" pos:column="55">
					<return pos:line="109" pos:column="41">return;</return></then></if>

				<if pos:line="111" pos:column="33">if <condition pos:line="111" pos:column="36">(<expr><op:operator pos:line="111" pos:column="37">!</op:operator><call><name><name pos:line="111" pos:column="38">mods</name><op:operator pos:line="111" pos:column="42">.</op:operator><name pos:line="111" pos:column="43">HasModifier</name></name><argument_list pos:line="111" pos:column="54">(<argument><expr><name><name pos:line="111" pos:column="55">Modifiers</name><op:operator pos:line="111" pos:column="64">.</op:operator><name pos:line="111" pos:column="65">Shift</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="111" pos:column="72">
					<expr_stmt><expr><name><name pos:line="112" pos:column="41">controlGroups</name><index pos:line="112" pos:column="54">[<expr><linq><group pos:line="112" pos:column="55">group</group></linq></expr>]</index></name><op:operator pos:line="112" pos:column="61">.</op:operator><call><name pos:line="112" pos:column="62">Clear</name><argument_list pos:line="112" pos:column="67">()</argument_list></call></expr>;</expr_stmt></then></if>

				<for pos:line="114" pos:column="33">for (<init><decl><type><name pos:line="114" pos:column="38">var</name></type> <name pos:line="114" pos:column="42">i</name> <init pos:line="114" pos:column="44">= <expr><lit:literal type="number" pos:line="114" pos:column="46">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="114" pos:column="49">i</name> <op:operator pos:line="114" pos:column="51">&lt;</op:operator> <lit:literal type="number" pos:line="114" pos:column="53">10</lit:literal></expr>;</condition> <incr><expr><name pos:line="114" pos:column="57">i</name><op:operator pos:line="114" pos:column="58">++</op:operator></expr></incr>)	<comment type="block" pos:line="114" pos:column="65">/* all control groups */</comment>
					<expr_stmt><expr><name><name pos:line="115" pos:column="41">controlGroups</name><index pos:line="115" pos:column="54">[<expr><name pos:line="115" pos:column="55">i</name></expr>]</index></name><op:operator pos:line="115" pos:column="57">.</op:operator><call><name pos:line="115" pos:column="58">RemoveAll</name><argument_list pos:line="115" pos:column="67">(<argument><expr><lambda><name pos:line="115" pos:column="68">a</name> <op:operator pos:line="115" pos:column="70">=&gt;</op:operator> <call><name><name pos:line="115" pos:column="73">actors</name><op:operator pos:line="115" pos:column="79">.</op:operator><name pos:line="115" pos:column="80">Contains</name></name><argument_list pos:line="115" pos:column="88">(<argument><expr><name pos:line="115" pos:column="89">a</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

				<expr_stmt><expr><name><name pos:line="117" pos:column="33">controlGroups</name><index pos:line="117" pos:column="46">[<expr><linq><group pos:line="117" pos:column="47">group</group></linq></expr>]</index></name><op:operator pos:line="117" pos:column="53">.</op:operator><call><name pos:line="117" pos:column="54">AddRange</name><argument_list pos:line="117" pos:column="62">(<argument><expr><call><name><name pos:line="117" pos:column="63">actors</name><op:operator pos:line="117" pos:column="69">.</op:operator><name pos:line="117" pos:column="70">Where</name></name><argument_list pos:line="117" pos:column="75">(<argument><expr><lambda><name pos:line="117" pos:column="76">a</name> <op:operator pos:line="117" pos:column="78">=&gt;</op:operator> <name><name pos:line="117" pos:column="81">a</name><op:operator pos:line="117" pos:column="82">.</op:operator><name pos:line="117" pos:column="83">Owner</name></name> <op:operator pos:line="117" pos:column="89">==</op:operator> <name><name pos:line="117" pos:column="92">world</name><op:operator pos:line="117" pos:column="97">.</op:operator><name pos:line="117" pos:column="98">LocalPlayer</name></name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="118" pos:column="33">return;</return>
			}</block></then></if>

			<decl_stmt><decl><type><name pos:line="121" pos:column="25">var</name></type> <name pos:line="121" pos:column="29">groupActors</name> <init pos:line="121" pos:column="41">= <expr><name><name pos:line="121" pos:column="43">controlGroups</name><index pos:line="121" pos:column="56">[<expr><linq><group pos:line="121" pos:column="57">group</group></linq></expr>]</index></name><op:operator pos:line="121" pos:column="63">.</op:operator><call><name pos:line="121" pos:column="64">Where</name><argument_list pos:line="121" pos:column="69">(<argument><expr><lambda><name pos:line="121" pos:column="70">a</name> <op:operator pos:line="121" pos:column="72">=&gt;</op:operator> <op:operator pos:line="121" pos:column="75">!</op:operator><name><name pos:line="121" pos:column="76">a</name><op:operator pos:line="121" pos:column="77">.</op:operator><name pos:line="121" pos:column="78">IsDead</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="123" pos:column="25">if <condition pos:line="123" pos:column="28">(<expr><call><name><name pos:line="123" pos:column="29">mods</name><op:operator pos:line="123" pos:column="33">.</op:operator><name pos:line="123" pos:column="34">HasModifier</name></name><argument_list pos:line="123" pos:column="45">(<argument><expr><name><name pos:line="123" pos:column="46">Modifiers</name><op:operator pos:line="123" pos:column="55">.</op:operator><name pos:line="123" pos:column="56">Alt</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="123" pos:column="61">||</op:operator> <name pos:line="123" pos:column="64">multiTapCount</name> <op:operator pos:line="123" pos:column="78">&gt;=</op:operator> <lit:literal type="number" pos:line="123" pos:column="81">2</lit:literal></expr>)</condition><then pos:line="123" pos:column="83">
			<block pos:line="124" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="125" pos:column="33">worldRenderer</name><op:operator pos:line="125" pos:column="46">.</op:operator><name pos:line="125" pos:column="47">Viewport</name><op:operator pos:line="125" pos:column="55">.</op:operator><name pos:line="125" pos:column="56">Center</name></name><argument_list pos:line="125" pos:column="62">(<argument><expr><name pos:line="125" pos:column="63">groupActors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="126" pos:column="33">return;</return>
			}</block></then></if>

			<expr_stmt><expr><call><name pos:line="129" pos:column="25">Combine</name><argument_list pos:line="129" pos:column="32">(<argument><expr><name pos:line="129" pos:column="33">world</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="40">groupActors</name></expr></argument>, <argument><expr><call><name><name pos:line="129" pos:column="53">mods</name><op:operator pos:line="129" pos:column="57">.</op:operator><name pos:line="129" pos:column="58">HasModifier</name></name><argument_list pos:line="129" pos:column="69">(<argument><expr><name><name pos:line="129" pos:column="70">Modifiers</name><op:operator pos:line="129" pos:column="79">.</op:operator><name pos:line="129" pos:column="80">Shift</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="129" pos:column="88">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="132" pos:column="17">public</specifier> <name pos:line="132" pos:column="24">void</name></type> <name pos:line="132" pos:column="29">AddToControlGroup</name><parameter_list pos:line="132" pos:column="46">(<param><decl><type><name pos:line="132" pos:column="47">Actor</name></type> <name pos:line="132" pos:column="53">a</name></decl></param>, <param><decl><type><name pos:line="132" pos:column="56">int</name></type> <name pos:line="132" pos:column="60">group</name></decl></param>)</parameter_list>
		<block pos:line="133" pos:column="17">{
			<if pos:line="134" pos:column="25">if <condition pos:line="134" pos:column="28">(<expr><op:operator pos:line="134" pos:column="29">!</op:operator><name><name pos:line="134" pos:column="30">controlGroups</name><index pos:line="134" pos:column="43">[<expr><linq><group pos:line="134" pos:column="44">group</group></linq></expr>]</index></name><op:operator pos:line="134" pos:column="50">.</op:operator><call><name pos:line="134" pos:column="51">Contains</name><argument_list pos:line="134" pos:column="59">(<argument><expr><name pos:line="134" pos:column="60">a</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="134" pos:column="63">
				<expr_stmt><expr><name><name pos:line="135" pos:column="33">controlGroups</name><index pos:line="135" pos:column="46">[<expr><linq><group pos:line="135" pos:column="47">group</group></linq></expr>]</index></name><op:operator pos:line="135" pos:column="53">.</op:operator><call><name pos:line="135" pos:column="54">Add</name><argument_list pos:line="135" pos:column="57">(<argument><expr><name pos:line="135" pos:column="58">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></function>

		<function><type><specifier pos:line="138" pos:column="17">public</specifier> <name pos:line="138" pos:column="24">int</name><type:modifier pos:line="138" pos:column="27">?</type:modifier></type> <name pos:line="138" pos:column="29">GetControlGroupForActor</name><parameter_list pos:line="138" pos:column="52">(<param><decl><type><name pos:line="138" pos:column="53">Actor</name></type> <name pos:line="138" pos:column="59">a</name></decl></param>)</parameter_list>
		<block pos:line="139" pos:column="17">{
			<return pos:line="140" pos:column="25">return <expr><call><name><name pos:line="140" pos:column="32">controlGroups</name><op:operator pos:line="140" pos:column="45">.</op:operator><name pos:line="140" pos:column="46">Where</name></name><argument_list pos:line="140" pos:column="51">(<argument><expr><lambda><name pos:line="140" pos:column="52">g</name> <op:operator pos:line="140" pos:column="54">=&gt;</op:operator> <call><name><name pos:line="140" pos:column="57">g</name><op:operator pos:line="140" pos:column="58">.</op:operator><name pos:line="140" pos:column="59">Value</name><op:operator pos:line="140" pos:column="64">.</op:operator><name pos:line="140" pos:column="65">Contains</name></name><argument_list pos:line="140" pos:column="73">(<argument><expr><name pos:line="140" pos:column="74">a</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
				<op:operator pos:line="141" pos:column="33">.</op:operator><call><name pos:line="141" pos:column="34">Select</name><argument_list pos:line="141" pos:column="40">(<argument><expr><lambda><name pos:line="141" pos:column="41">g</name> <op:operator pos:line="141" pos:column="43">=&gt;</op:operator> <op:operator pos:line="141" pos:column="46">(</op:operator><name pos:line="141" pos:column="47">int</name><op:operator pos:line="141" pos:column="50">?</op:operator><op:operator pos:line="141" pos:column="51">)</op:operator><name><name pos:line="141" pos:column="52">g</name><op:operator pos:line="141" pos:column="53">.</op:operator><name pos:line="141" pos:column="54">Key</name></name></lambda></expr></argument>)</argument_list></call>
				<op:operator pos:line="142" pos:column="33">.</op:operator><call><name pos:line="142" pos:column="34">FirstOrDefault</name><argument_list pos:line="142" pos:column="48">()</argument_list></call></expr>;</return>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
