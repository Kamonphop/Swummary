<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\Renderer.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Drawing</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Reflection</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">OpenRA</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Graphics</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">OpenRA</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Support</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name pos:line="19" pos:column="11">OpenRA</name>
<block pos:line="20" pos:column="1">{
	<class><specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">sealed</specifier> class <name pos:line="21" pos:column="29">Renderer</name> <super pos:line="21" pos:column="38">: <name pos:line="21" pos:column="40">IDisposable</name></super>
	<block pos:line="22" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="23" pos:column="17">public</specifier> <name pos:line="23" pos:column="24">SpriteRenderer</name></type> <name pos:line="23" pos:column="39">WorldSpriteRenderer</name> <block pos:line="23" pos:column="59">{ <function_decl><name pos:line="23" pos:column="61">get</name>;</function_decl> <function_decl><specifier pos:line="23" pos:column="66">private</specifier> <name pos:line="23" pos:column="74">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="24" pos:column="17">public</specifier> <name pos:line="24" pos:column="24">SpriteRenderer</name></type> <name pos:line="24" pos:column="39">WorldRgbaSpriteRenderer</name> <block pos:line="24" pos:column="63">{ <function_decl><name pos:line="24" pos:column="65">get</name>;</function_decl> <function_decl><specifier pos:line="24" pos:column="70">private</specifier> <name pos:line="24" pos:column="78">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">public</specifier> <name pos:line="25" pos:column="24">QuadRenderer</name></type> <name pos:line="25" pos:column="37">WorldQuadRenderer</name> <block pos:line="25" pos:column="55">{ <function_decl><name pos:line="25" pos:column="57">get</name>;</function_decl> <function_decl><specifier pos:line="25" pos:column="62">private</specifier> <name pos:line="25" pos:column="70">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">public</specifier> <name pos:line="26" pos:column="24">LineRenderer</name></type> <name pos:line="26" pos:column="37">WorldLineRenderer</name> <block pos:line="26" pos:column="55">{ <function_decl><name pos:line="26" pos:column="57">get</name>;</function_decl> <function_decl><specifier pos:line="26" pos:column="62">private</specifier> <name pos:line="26" pos:column="70">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="27" pos:column="17">public</specifier> <name pos:line="27" pos:column="24">VoxelRenderer</name></type> <name pos:line="27" pos:column="38">WorldVoxelRenderer</name> <block pos:line="27" pos:column="57">{ <function_decl><name pos:line="27" pos:column="59">get</name>;</function_decl> <function_decl><specifier pos:line="27" pos:column="64">private</specifier> <name pos:line="27" pos:column="72">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="28" pos:column="17">public</specifier> <name pos:line="28" pos:column="24">LineRenderer</name></type> <name pos:line="28" pos:column="37">LineRenderer</name> <block pos:line="28" pos:column="50">{ <function_decl><name pos:line="28" pos:column="52">get</name>;</function_decl> <function_decl><specifier pos:line="28" pos:column="57">private</specifier> <name pos:line="28" pos:column="65">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">public</specifier> <name pos:line="29" pos:column="24">SpriteRenderer</name></type> <name pos:line="29" pos:column="39">RgbaSpriteRenderer</name> <block pos:line="29" pos:column="58">{ <function_decl><name pos:line="29" pos:column="60">get</name>;</function_decl> <function_decl><specifier pos:line="29" pos:column="65">private</specifier> <name pos:line="29" pos:column="73">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="30" pos:column="17">public</specifier> <name pos:line="30" pos:column="24">SpriteRenderer</name></type> <name pos:line="30" pos:column="39">SpriteRenderer</name> <block pos:line="30" pos:column="54">{ <function_decl><name pos:line="30" pos:column="56">get</name>;</function_decl> <function_decl><specifier pos:line="30" pos:column="61">private</specifier> <name pos:line="30" pos:column="69">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="31" pos:column="17">public</specifier> <name><name pos:line="31" pos:column="24">IReadOnlyDictionary</name><argument_list pos:line="31" pos:column="43">&lt;<argument><name pos:line="31" pos:column="44">string</name></argument>, <argument><name pos:line="31" pos:column="52">SpriteFont</name></argument>&gt;</argument_list></name></type> <name pos:line="31" pos:column="64">Fonts</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="33" pos:column="17">internal</specifier> <name pos:line="33" pos:column="26">IGraphicsDevice</name></type> <name pos:line="33" pos:column="42">Device</name> <block pos:line="33" pos:column="49">{ <function_decl><name pos:line="33" pos:column="51">get</name>;</function_decl> <function_decl><specifier pos:line="33" pos:column="56">private</specifier> <name pos:line="33" pos:column="64">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="34" pos:column="17">internal</specifier> <name pos:line="34" pos:column="26">int</name></type> <name pos:line="34" pos:column="30">SheetSize</name> <block pos:line="34" pos:column="40">{ <function_decl><name pos:line="34" pos:column="42">get</name>;</function_decl> <function_decl><specifier pos:line="34" pos:column="47">private</specifier> <name pos:line="34" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="35" pos:column="17">internal</specifier> <name pos:line="35" pos:column="26">int</name></type> <name pos:line="35" pos:column="30">TempBufferSize</name> <block pos:line="35" pos:column="45">{ <function_decl><name pos:line="35" pos:column="47">get</name>;</function_decl> <function_decl><specifier pos:line="35" pos:column="52">private</specifier> <name pos:line="35" pos:column="60">set</name>;</function_decl> }</block></decl></decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="37" pos:column="17">readonly</specifier> <name><name pos:line="37" pos:column="26">IVertexBuffer</name><argument_list pos:line="37" pos:column="39">&lt;<argument><name pos:line="37" pos:column="40">Vertex</name></argument>&gt;</argument_list></name></type> <name pos:line="37" pos:column="48">tempBuffer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="38" pos:column="17">readonly</specifier> <name><name pos:line="38" pos:column="26">Stack</name><argument_list pos:line="38" pos:column="31">&lt;<argument><name pos:line="38" pos:column="32">Rectangle</name></argument>&gt;</argument_list></name></type> <name pos:line="38" pos:column="43">scissorState</name> <init pos:line="38" pos:column="56">= <expr><op:operator pos:line="38" pos:column="58">new</op:operator> <call><name><name pos:line="38" pos:column="62">Stack</name><argument_list pos:line="38" pos:column="67">&lt;<argument><name pos:line="38" pos:column="68">Rectangle</name></argument>&gt;</argument_list></name><argument_list pos:line="38" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="40" pos:column="17">SheetBuilder</name></type> <name pos:line="40" pos:column="30">fontSheetBuilder</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="42" pos:column="17">Size</name><type:modifier pos:line="42" pos:column="21">?</type:modifier></type> <name pos:line="42" pos:column="23">lastResolution</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="43" pos:column="17">int2</name><type:modifier pos:line="43" pos:column="21">?</type:modifier></type> <name pos:line="43" pos:column="23">lastScroll</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">float</name><type:modifier pos:line="44" pos:column="22">?</type:modifier></type> <name pos:line="44" pos:column="24">lastZoom</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="45" pos:column="17">ITexture</name></type> <name pos:line="45" pos:column="26">currentPaletteTexture</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="46" pos:column="17">IBatchRenderer</name></type> <name pos:line="46" pos:column="32">currentBatchRenderer</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="48" pos:column="17">public</specifier> <name pos:line="48" pos:column="24">Renderer</name><parameter_list pos:line="48" pos:column="32">(<param><decl><type><name pos:line="48" pos:column="33">GraphicSettings</name></type> <name pos:line="48" pos:column="49">graphicSettings</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="66">ServerSettings</name></type> <name pos:line="48" pos:column="81">serverSettings</name></decl></param>)</parameter_list>
		<block pos:line="49" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="50" pos:column="25">var</name></type> <name pos:line="50" pos:column="29">resolution</name> <init pos:line="50" pos:column="40">= <expr><call><name pos:line="50" pos:column="42">GetResolution</name><argument_list pos:line="50" pos:column="55">(<argument><expr><name pos:line="50" pos:column="56">graphicSettings</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="52" pos:column="25">var</name></type> <name pos:line="52" pos:column="29">rendererName</name> <init pos:line="52" pos:column="42">= <expr><name><name pos:line="52" pos:column="44">serverSettings</name><op:operator pos:line="52" pos:column="58">.</op:operator><name pos:line="52" pos:column="59">Dedicated</name> <type:modifier pos:line="52" pos:column="69">?</type:modifier></name> <lit:literal type="string" pos:line="52" pos:column="71">"Null"</lit:literal> <op:operator pos:line="52" pos:column="78">:</op:operator> <name><name pos:line="52" pos:column="80">graphicSettings</name><op:operator pos:line="52" pos:column="95">.</op:operator><name pos:line="52" pos:column="96">Renderer</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="53" pos:column="25">var</name></type> <name pos:line="53" pos:column="29">rendererPath</name> <init pos:line="53" pos:column="42">= <expr><call><name><name pos:line="53" pos:column="44">Platform</name><op:operator pos:line="53" pos:column="52">.</op:operator><name pos:line="53" pos:column="53">ResolvePath</name></name><argument_list pos:line="53" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="65">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="70">"OpenRA.Platforms."</lit:literal> <op:operator pos:line="53" pos:column="90">+</op:operator> <name pos:line="53" pos:column="92">rendererName</name> <op:operator pos:line="53" pos:column="105">+</op:operator> <lit:literal type="string" pos:line="53" pos:column="107">".dll"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name pos:line="55" pos:column="25">Device</name> <op:operator pos:line="55" pos:column="32">=</op:operator> <call><name pos:line="55" pos:column="34">CreateDevice</name><argument_list pos:line="55" pos:column="46">(<argument><expr><call><name><name pos:line="55" pos:column="47">Assembly</name><op:operator pos:line="55" pos:column="55">.</op:operator><name pos:line="55" pos:column="56">LoadFile</name></name><argument_list pos:line="55" pos:column="64">(<argument><expr><name pos:line="55" pos:column="65">rendererPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="80">resolution</name><op:operator pos:line="55" pos:column="90">.</op:operator><name pos:line="55" pos:column="91">Width</name></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="98">resolution</name><op:operator pos:line="55" pos:column="108">.</op:operator><name pos:line="55" pos:column="109">Height</name></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="117">graphicSettings</name><op:operator pos:line="55" pos:column="132">.</op:operator><name pos:line="55" pos:column="133">Mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="57" pos:column="25">if <condition pos:line="57" pos:column="28">(<expr><op:operator pos:line="57" pos:column="29">!</op:operator><name><name pos:line="57" pos:column="30">serverSettings</name><op:operator pos:line="57" pos:column="44">.</op:operator><name pos:line="57" pos:column="45">Dedicated</name></name></expr>)</condition><then pos:line="57" pos:column="55">
			<block pos:line="58" pos:column="25">{
				<expr_stmt><expr><name pos:line="59" pos:column="33">TempBufferSize</name> <op:operator pos:line="59" pos:column="48">=</op:operator> <name><name pos:line="59" pos:column="50">graphicSettings</name><op:operator pos:line="59" pos:column="65">.</op:operator><name pos:line="59" pos:column="66">BatchSize</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="60" pos:column="33">SheetSize</name> <op:operator pos:line="60" pos:column="43">=</op:operator> <name><name pos:line="60" pos:column="45">graphicSettings</name><op:operator pos:line="60" pos:column="60">.</op:operator><name pos:line="60" pos:column="61">SheetSize</name></name></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><name pos:line="63" pos:column="25">WorldSpriteRenderer</name> <op:operator pos:line="63" pos:column="45">=</op:operator> <op:operator pos:line="63" pos:column="47">new</op:operator> <call><name pos:line="63" pos:column="51">SpriteRenderer</name><argument_list pos:line="63" pos:column="65">(<argument><expr><name pos:line="63" pos:column="66">this</name></expr></argument>, <argument><expr><call><name><name pos:line="63" pos:column="72">Device</name><op:operator pos:line="63" pos:column="78">.</op:operator><name pos:line="63" pos:column="79">CreateShader</name></name><argument_list pos:line="63" pos:column="91">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="92">"shp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="64" pos:column="25">WorldRgbaSpriteRenderer</name> <op:operator pos:line="64" pos:column="49">=</op:operator> <op:operator pos:line="64" pos:column="51">new</op:operator> <call><name pos:line="64" pos:column="55">SpriteRenderer</name><argument_list pos:line="64" pos:column="69">(<argument><expr><name pos:line="64" pos:column="70">this</name></expr></argument>, <argument><expr><call><name><name pos:line="64" pos:column="76">Device</name><op:operator pos:line="64" pos:column="82">.</op:operator><name pos:line="64" pos:column="83">CreateShader</name></name><argument_list pos:line="64" pos:column="95">(<argument><expr><lit:literal type="string" pos:line="64" pos:column="96">"rgba"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="65" pos:column="25">WorldLineRenderer</name> <op:operator pos:line="65" pos:column="43">=</op:operator> <op:operator pos:line="65" pos:column="45">new</op:operator> <call><name pos:line="65" pos:column="49">LineRenderer</name><argument_list pos:line="65" pos:column="61">(<argument><expr><name pos:line="65" pos:column="62">this</name></expr></argument>, <argument><expr><call><name><name pos:line="65" pos:column="68">Device</name><op:operator pos:line="65" pos:column="74">.</op:operator><name pos:line="65" pos:column="75">CreateShader</name></name><argument_list pos:line="65" pos:column="87">(<argument><expr><lit:literal type="string" pos:line="65" pos:column="88">"line"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="66" pos:column="25">WorldVoxelRenderer</name> <op:operator pos:line="66" pos:column="44">=</op:operator> <op:operator pos:line="66" pos:column="46">new</op:operator> <call><name pos:line="66" pos:column="50">VoxelRenderer</name><argument_list pos:line="66" pos:column="63">(<argument><expr><name pos:line="66" pos:column="64">this</name></expr></argument>, <argument><expr><call><name><name pos:line="66" pos:column="70">Device</name><op:operator pos:line="66" pos:column="76">.</op:operator><name pos:line="66" pos:column="77">CreateShader</name></name><argument_list pos:line="66" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="66" pos:column="90">"vxl"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="67" pos:column="25">LineRenderer</name> <op:operator pos:line="67" pos:column="38">=</op:operator> <op:operator pos:line="67" pos:column="40">new</op:operator> <call><name pos:line="67" pos:column="44">LineRenderer</name><argument_list pos:line="67" pos:column="56">(<argument><expr><name pos:line="67" pos:column="57">this</name></expr></argument>, <argument><expr><call><name><name pos:line="67" pos:column="63">Device</name><op:operator pos:line="67" pos:column="69">.</op:operator><name pos:line="67" pos:column="70">CreateShader</name></name><argument_list pos:line="67" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="83">"line"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="68" pos:column="25">WorldQuadRenderer</name> <op:operator pos:line="68" pos:column="43">=</op:operator> <op:operator pos:line="68" pos:column="45">new</op:operator> <call><name pos:line="68" pos:column="49">QuadRenderer</name><argument_list pos:line="68" pos:column="61">(<argument><expr><name pos:line="68" pos:column="62">this</name></expr></argument>, <argument><expr><call><name><name pos:line="68" pos:column="68">Device</name><op:operator pos:line="68" pos:column="74">.</op:operator><name pos:line="68" pos:column="75">CreateShader</name></name><argument_list pos:line="68" pos:column="87">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="88">"line"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="69" pos:column="25">RgbaSpriteRenderer</name> <op:operator pos:line="69" pos:column="44">=</op:operator> <op:operator pos:line="69" pos:column="46">new</op:operator> <call><name pos:line="69" pos:column="50">SpriteRenderer</name><argument_list pos:line="69" pos:column="64">(<argument><expr><name pos:line="69" pos:column="65">this</name></expr></argument>, <argument><expr><call><name><name pos:line="69" pos:column="71">Device</name><op:operator pos:line="69" pos:column="77">.</op:operator><name pos:line="69" pos:column="78">CreateShader</name></name><argument_list pos:line="69" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="91">"rgba"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="70" pos:column="25">SpriteRenderer</name> <op:operator pos:line="70" pos:column="40">=</op:operator> <op:operator pos:line="70" pos:column="42">new</op:operator> <call><name pos:line="70" pos:column="46">SpriteRenderer</name><argument_list pos:line="70" pos:column="60">(<argument><expr><name pos:line="70" pos:column="61">this</name></expr></argument>, <argument><expr><call><name><name pos:line="70" pos:column="67">Device</name><op:operator pos:line="70" pos:column="73">.</op:operator><name pos:line="70" pos:column="74">CreateShader</name></name><argument_list pos:line="70" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="70" pos:column="87">"shp"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="72" pos:column="25">tempBuffer</name> <op:operator pos:line="72" pos:column="36">=</op:operator> <call><name><name pos:line="72" pos:column="38">Device</name><op:operator pos:line="72" pos:column="44">.</op:operator><name pos:line="72" pos:column="45">CreateVertexBuffer</name></name><argument_list pos:line="72" pos:column="63">(<argument><expr><name pos:line="72" pos:column="64">TempBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><specifier pos:line="75" pos:column="17">static</specifier> <name pos:line="75" pos:column="24">Size</name></type> <name pos:line="75" pos:column="29">GetResolution</name><parameter_list pos:line="75" pos:column="42">(<param><decl><type><name pos:line="75" pos:column="43">GraphicSettings</name></type> <name pos:line="75" pos:column="59">graphicsSettings</name></decl></param>)</parameter_list>
		<block pos:line="76" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="77" pos:column="25">var</name></type> <name pos:line="77" pos:column="29">size</name> <init pos:line="77" pos:column="34">= <expr><op:operator pos:line="77" pos:column="36">(</op:operator><name><name pos:line="77" pos:column="37">graphicsSettings</name><op:operator pos:line="77" pos:column="53">.</op:operator><name pos:line="77" pos:column="54">Mode</name></name> <op:operator pos:line="77" pos:column="59">==</op:operator> <name><name pos:line="77" pos:column="62">WindowMode</name><op:operator pos:line="77" pos:column="72">.</op:operator><name pos:line="77" pos:column="73">Windowed</name></name><op:operator pos:line="77" pos:column="81">)</op:operator>
				<op:operator pos:line="78" pos:column="33">?</op:operator> <name><name pos:line="78" pos:column="35">graphicsSettings</name><op:operator pos:line="78" pos:column="51">.</op:operator><name pos:line="78" pos:column="52">WindowedSize</name></name>
				<op:operator pos:line="79" pos:column="33">:</op:operator> <name><name pos:line="79" pos:column="35">graphicsSettings</name><op:operator pos:line="79" pos:column="51">.</op:operator><name pos:line="79" pos:column="52">FullscreenSize</name></name></expr></init></decl>;</decl_stmt>
			<return pos:line="80" pos:column="25">return <expr><op:operator pos:line="80" pos:column="32">new</op:operator> <call><name pos:line="80" pos:column="36">Size</name><argument_list pos:line="80" pos:column="40">(<argument><expr><name><name pos:line="80" pos:column="41">size</name><op:operator pos:line="80" pos:column="45">.</op:operator><name pos:line="80" pos:column="46">X</name></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="49">size</name><op:operator pos:line="80" pos:column="53">.</op:operator><name pos:line="80" pos:column="54">Y</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="83" pos:column="17">static</specifier> <name pos:line="83" pos:column="24">IGraphicsDevice</name></type> <name pos:line="83" pos:column="40">CreateDevice</name><parameter_list pos:line="83" pos:column="52">(<param><decl><type><name pos:line="83" pos:column="53">Assembly</name></type> <name pos:line="83" pos:column="62">platformDll</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="75">int</name></type> <name pos:line="83" pos:column="79">width</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="86">int</name></type> <name pos:line="83" pos:column="90">height</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="98">WindowMode</name></type> <name pos:line="83" pos:column="109">window</name></decl></param>)</parameter_list>
		<block pos:line="84" pos:column="17">{
			<foreach pos:line="85" pos:column="25">foreach (<init><decl><type><name pos:line="85" pos:column="34">PlatformAttribute</name></type> <name pos:line="85" pos:column="52">r</name> <range pos:line="85" pos:column="54">in <expr><call><name><name pos:line="85" pos:column="57">platformDll</name><op:operator pos:line="85" pos:column="68">.</op:operator><name pos:line="85" pos:column="69">GetCustomAttributes</name></name><argument_list pos:line="85" pos:column="88">(<argument><expr><call><name pos:line="85" pos:column="89">typeof</name><argument_list pos:line="85" pos:column="95">(<argument><expr><name pos:line="85" pos:column="96">PlatformAttribute</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="85" pos:column="116">false</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>)
			<block pos:line="86" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="87" pos:column="33">var</name></type> <name pos:line="87" pos:column="37">factory</name> <init pos:line="87" pos:column="45">= <expr><op:operator pos:line="87" pos:column="47">(</op:operator><name pos:line="87" pos:column="48">IDeviceFactory</name><op:operator pos:line="87" pos:column="62">)</op:operator><call><name><name pos:line="87" pos:column="63">r</name><op:operator pos:line="87" pos:column="64">.</op:operator><name pos:line="87" pos:column="65">Type</name><op:operator pos:line="87" pos:column="69">.</op:operator><name pos:line="87" pos:column="70">GetConstructor</name></name><argument_list pos:line="87" pos:column="84">(<argument><expr><name><name pos:line="87" pos:column="85">Type</name><op:operator pos:line="87" pos:column="89">.</op:operator><name pos:line="87" pos:column="90">EmptyTypes</name></name></expr></argument>)</argument_list></call><op:operator pos:line="87" pos:column="101">.</op:operator><call><name pos:line="87" pos:column="102">Invoke</name><argument_list pos:line="87" pos:column="108">(<argument><expr><name pos:line="87" pos:column="109">null</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<return pos:line="88" pos:column="33">return <expr><call><name><name pos:line="88" pos:column="40">factory</name><op:operator pos:line="88" pos:column="47">.</op:operator><name pos:line="88" pos:column="48">CreateGraphics</name></name><argument_list pos:line="88" pos:column="62">(<argument><expr><op:operator pos:line="88" pos:column="63">new</op:operator> <call><name pos:line="88" pos:column="67">Size</name><argument_list pos:line="88" pos:column="71">(<argument><expr><name pos:line="88" pos:column="72">width</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="79">height</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="88" pos:column="88">window</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></foreach>

			<throw pos:line="91" pos:column="25">throw <expr><op:operator pos:line="91" pos:column="31">new</op:operator> <call><name pos:line="91" pos:column="35">InvalidOperationException</name><argument_list pos:line="91" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="61">"Renderer DLL is missing RendererAttribute to tell us what type to use!"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></function>

		<function><type><specifier pos:line="94" pos:column="17">public</specifier> <name pos:line="94" pos:column="24">void</name></type> <name pos:line="94" pos:column="29">InitializeFonts</name><parameter_list pos:line="94" pos:column="44">(<param><decl><type><name pos:line="94" pos:column="45">Manifest</name></type> <name pos:line="94" pos:column="54">m</name></decl></param>)</parameter_list>
		<block pos:line="95" pos:column="17">{
			<using pos:line="96" pos:column="25">using (<expr><op:operator pos:line="96" pos:column="32">new</op:operator> <call><name><name pos:line="96" pos:column="36">Support</name><op:operator pos:line="96" pos:column="43">.</op:operator><name pos:line="96" pos:column="44">PerfTimer</name></name><argument_list pos:line="96" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="54">"SpriteFonts"</lit:literal></expr></argument>)</argument_list></call></expr>)
			<block pos:line="97" pos:column="25">{
				<if pos:line="98" pos:column="33">if <condition pos:line="98" pos:column="36">(<expr><name pos:line="98" pos:column="37">fontSheetBuilder</name> <op:operator pos:line="98" pos:column="54">!=</op:operator> <name pos:line="98" pos:column="57">null</name></expr>)</condition><then pos:line="98" pos:column="62">
					<expr_stmt><expr><call><name><name pos:line="99" pos:column="41">fontSheetBuilder</name><op:operator pos:line="99" pos:column="57">.</op:operator><name pos:line="99" pos:column="58">Dispose</name></name><argument_list pos:line="99" pos:column="65">()</argument_list></call></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="100" pos:column="33">fontSheetBuilder</name> <op:operator pos:line="100" pos:column="50">=</op:operator> <op:operator pos:line="100" pos:column="52">new</op:operator> <call><name pos:line="100" pos:column="56">SheetBuilder</name><argument_list pos:line="100" pos:column="68">(<argument><expr><name><name pos:line="100" pos:column="69">SheetType</name><op:operator pos:line="100" pos:column="78">.</op:operator><name pos:line="100" pos:column="79">BGRA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="101" pos:column="33">Fonts</name> <op:operator pos:line="101" pos:column="39">=</op:operator> <call><name><name pos:line="101" pos:column="41">m</name><op:operator pos:line="101" pos:column="42">.</op:operator><name pos:line="101" pos:column="43">Fonts</name><op:operator pos:line="101" pos:column="48">.</op:operator><name pos:line="101" pos:column="49">ToDictionary</name></name><argument_list pos:line="101" pos:column="61">(<argument><expr><lambda><name pos:line="101" pos:column="62">x</name> <op:operator pos:line="101" pos:column="64">=&gt;</op:operator> <name><name pos:line="101" pos:column="67">x</name><op:operator pos:line="101" pos:column="68">.</op:operator><name pos:line="101" pos:column="69">Key</name></name></lambda></expr></argument>,
					<argument><expr><lambda><name pos:line="102" pos:column="41">x</name> <op:operator pos:line="102" pos:column="43">=&gt;</op:operator> <op:operator pos:line="102" pos:column="46">new</op:operator> <call><name pos:line="102" pos:column="50">SpriteFont</name><argument_list pos:line="102" pos:column="60">(<argument><expr><call><name><name pos:line="102" pos:column="61">Platform</name><op:operator pos:line="102" pos:column="69">.</op:operator><name pos:line="102" pos:column="70">ResolvePath</name></name><argument_list pos:line="102" pos:column="81">(<argument><expr><name><name pos:line="102" pos:column="82">x</name><op:operator pos:line="102" pos:column="83">.</op:operator><name pos:line="102" pos:column="84">Value</name><op:operator pos:line="102" pos:column="89">.</op:operator><name pos:line="102" pos:column="90">First</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="102" pos:column="98">x</name><op:operator pos:line="102" pos:column="99">.</op:operator><name pos:line="102" pos:column="100">Value</name><op:operator pos:line="102" pos:column="105">.</op:operator><name pos:line="102" pos:column="106">Second</name></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="114">fontSheetBuilder</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="102" pos:column="132">.</op:operator><call><name pos:line="102" pos:column="133">AsReadOnly</name><argument_list pos:line="102" pos:column="143">()</argument_list></call></expr>;</expr_stmt>
			}</block></using>
		}</block></function>

		<function><type><specifier pos:line="106" pos:column="17">public</specifier> <name pos:line="106" pos:column="24">void</name></type> <name pos:line="106" pos:column="29">BeginFrame</name><parameter_list pos:line="106" pos:column="39">(<param><decl><type><name pos:line="106" pos:column="40">int2</name></type> <name pos:line="106" pos:column="45">scroll</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="53">float</name></type> <name pos:line="106" pos:column="59">zoom</name></decl></param>)</parameter_list>
		<block pos:line="107" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="108" pos:column="25">Device</name><op:operator pos:line="108" pos:column="31">.</op:operator><name pos:line="108" pos:column="32">Clear</name></name><argument_list pos:line="108" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="109" pos:column="25">SetViewportParams</name><argument_list pos:line="109" pos:column="42">(<argument><expr><name pos:line="109" pos:column="43">scroll</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="51">zoom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="112" pos:column="17">public</specifier> <name pos:line="112" pos:column="24">void</name></type> <name pos:line="112" pos:column="29">SetViewportParams</name><parameter_list pos:line="112" pos:column="46">(<param><decl><type><name pos:line="112" pos:column="47">int2</name></type> <name pos:line="112" pos:column="52">scroll</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="60">float</name></type> <name pos:line="112" pos:column="66">zoom</name></decl></param>)</parameter_list>
		<block pos:line="113" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="114" pos:column="25">var</name></type> <name pos:line="114" pos:column="29">resolutionChanged</name> <init pos:line="114" pos:column="47">= <expr><name pos:line="114" pos:column="49">lastResolution</name> <op:operator pos:line="114" pos:column="64">!=</op:operator> <name pos:line="114" pos:column="67">Resolution</name></expr></init></decl>;</decl_stmt>
			<if pos:line="115" pos:column="25">if <condition pos:line="115" pos:column="28">(<expr><name pos:line="115" pos:column="29">resolutionChanged</name></expr>)</condition><then pos:line="115" pos:column="47">
			<block pos:line="116" pos:column="25">{
				<expr_stmt><expr><name pos:line="117" pos:column="33">lastResolution</name> <op:operator pos:line="117" pos:column="48">=</op:operator> <name pos:line="117" pos:column="50">Resolution</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="118" pos:column="33">RgbaSpriteRenderer</name><op:operator pos:line="118" pos:column="51">.</op:operator><name pos:line="118" pos:column="52">SetViewportParams</name></name><argument_list pos:line="118" pos:column="69">(<argument><expr><name pos:line="118" pos:column="70">Resolution</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="118" pos:column="82">1f</lit:literal></expr></argument>, <argument><expr><name><name pos:line="118" pos:column="86">int2</name><op:operator pos:line="118" pos:column="90">.</op:operator><name pos:line="118" pos:column="91">Zero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="119" pos:column="33">SpriteRenderer</name><op:operator pos:line="119" pos:column="47">.</op:operator><name pos:line="119" pos:column="48">SetViewportParams</name></name><argument_list pos:line="119" pos:column="65">(<argument><expr><name pos:line="119" pos:column="66">Resolution</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="119" pos:column="78">1f</lit:literal></expr></argument>, <argument><expr><name><name pos:line="119" pos:column="82">int2</name><op:operator pos:line="119" pos:column="86">.</op:operator><name pos:line="119" pos:column="87">Zero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="120" pos:column="33">LineRenderer</name><op:operator pos:line="120" pos:column="45">.</op:operator><name pos:line="120" pos:column="46">SetViewportParams</name></name><argument_list pos:line="120" pos:column="63">(<argument><expr><name pos:line="120" pos:column="64">Resolution</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="120" pos:column="76">1f</lit:literal></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="80">int2</name><op:operator pos:line="120" pos:column="84">.</op:operator><name pos:line="120" pos:column="85">Zero</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<comment type="line" pos:line="123" pos:column="25">// If zoom evaluates as different due to floating point weirdness that's OK, setting the parameters again is harmless.</comment>
			<if pos:line="124" pos:column="25">if <condition pos:line="124" pos:column="28">(<expr><name pos:line="124" pos:column="29">resolutionChanged</name> <op:operator pos:line="124" pos:column="47">||</op:operator> <name pos:line="124" pos:column="50">lastScroll</name> <op:operator pos:line="124" pos:column="61">!=</op:operator> <name pos:line="124" pos:column="64">scroll</name> <op:operator pos:line="124" pos:column="71">||</op:operator> <name pos:line="124" pos:column="74">lastZoom</name> <op:operator pos:line="124" pos:column="83">!=</op:operator> <name pos:line="124" pos:column="86">zoom</name></expr>)</condition><then pos:line="124" pos:column="91">
			<block pos:line="125" pos:column="25">{
				<expr_stmt><expr><name pos:line="126" pos:column="33">lastScroll</name> <op:operator pos:line="126" pos:column="44">=</op:operator> <name pos:line="126" pos:column="46">scroll</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="127" pos:column="33">lastZoom</name> <op:operator pos:line="127" pos:column="42">=</op:operator> <name pos:line="127" pos:column="44">zoom</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="128" pos:column="33">WorldRgbaSpriteRenderer</name><op:operator pos:line="128" pos:column="56">.</op:operator><name pos:line="128" pos:column="57">SetViewportParams</name></name><argument_list pos:line="128" pos:column="74">(<argument><expr><name pos:line="128" pos:column="75">Resolution</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="87">zoom</name></expr></argument>, <argument><expr><name pos:line="128" pos:column="93">scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="129" pos:column="33">WorldSpriteRenderer</name><op:operator pos:line="129" pos:column="52">.</op:operator><name pos:line="129" pos:column="53">SetViewportParams</name></name><argument_list pos:line="129" pos:column="70">(<argument><expr><name pos:line="129" pos:column="71">Resolution</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="83">zoom</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="89">scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="130" pos:column="33">WorldVoxelRenderer</name><op:operator pos:line="130" pos:column="51">.</op:operator><name pos:line="130" pos:column="52">SetViewportParams</name></name><argument_list pos:line="130" pos:column="69">(<argument><expr><name pos:line="130" pos:column="70">Resolution</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="82">zoom</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="88">scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="131" pos:column="33">WorldLineRenderer</name><op:operator pos:line="131" pos:column="50">.</op:operator><name pos:line="131" pos:column="51">SetViewportParams</name></name><argument_list pos:line="131" pos:column="68">(<argument><expr><name pos:line="131" pos:column="69">Resolution</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="81">zoom</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="87">scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="132" pos:column="33">WorldQuadRenderer</name><op:operator pos:line="132" pos:column="50">.</op:operator><name pos:line="132" pos:column="51">SetViewportParams</name></name><argument_list pos:line="132" pos:column="68">(<argument><expr><name pos:line="132" pos:column="69">Resolution</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="81">zoom</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="87">scroll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></function>

		<function><type><specifier pos:line="136" pos:column="17">public</specifier> <name pos:line="136" pos:column="24">void</name></type> <name pos:line="136" pos:column="29">SetPalette</name><parameter_list pos:line="136" pos:column="39">(<param><decl><type><name pos:line="136" pos:column="40">HardwarePalette</name></type> <name pos:line="136" pos:column="56">palette</name></decl></param>)</parameter_list>
		<block pos:line="137" pos:column="17">{
			<if pos:line="138" pos:column="25">if <condition pos:line="138" pos:column="28">(<expr><name><name pos:line="138" pos:column="29">palette</name><op:operator pos:line="138" pos:column="36">.</op:operator><name pos:line="138" pos:column="37">Texture</name></name> <op:operator pos:line="138" pos:column="45">==</op:operator> <name pos:line="138" pos:column="48">currentPaletteTexture</name></expr>)</condition><then pos:line="138" pos:column="70">
				<return pos:line="139" pos:column="33">return;</return></then></if>

			<expr_stmt><expr><call><name pos:line="141" pos:column="25">Flush</name><argument_list pos:line="141" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="142" pos:column="25">currentPaletteTexture</name> <op:operator pos:line="142" pos:column="47">=</op:operator> <name><name pos:line="142" pos:column="49">palette</name><op:operator pos:line="142" pos:column="56">.</op:operator><name pos:line="142" pos:column="57">Texture</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><name pos:line="144" pos:column="25">RgbaSpriteRenderer</name><op:operator pos:line="144" pos:column="43">.</op:operator><name pos:line="144" pos:column="44">SetPalette</name></name><argument_list pos:line="144" pos:column="54">(<argument><expr><name pos:line="144" pos:column="55">currentPaletteTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="145" pos:column="25">SpriteRenderer</name><op:operator pos:line="145" pos:column="39">.</op:operator><name pos:line="145" pos:column="40">SetPalette</name></name><argument_list pos:line="145" pos:column="50">(<argument><expr><name pos:line="145" pos:column="51">currentPaletteTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="146" pos:column="25">WorldSpriteRenderer</name><op:operator pos:line="146" pos:column="44">.</op:operator><name pos:line="146" pos:column="45">SetPalette</name></name><argument_list pos:line="146" pos:column="55">(<argument><expr><name pos:line="146" pos:column="56">currentPaletteTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="147" pos:column="25">WorldRgbaSpriteRenderer</name><op:operator pos:line="147" pos:column="48">.</op:operator><name pos:line="147" pos:column="49">SetPalette</name></name><argument_list pos:line="147" pos:column="59">(<argument><expr><name pos:line="147" pos:column="60">currentPaletteTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="148" pos:column="25">WorldVoxelRenderer</name><op:operator pos:line="148" pos:column="43">.</op:operator><name pos:line="148" pos:column="44">SetPalette</name></name><argument_list pos:line="148" pos:column="54">(<argument><expr><name pos:line="148" pos:column="55">currentPaletteTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="151" pos:column="17">public</specifier> <name pos:line="151" pos:column="24">void</name></type> <name pos:line="151" pos:column="29">EndFrame</name><parameter_list pos:line="151" pos:column="37">(<param><decl><type><name pos:line="151" pos:column="38">IInputHandler</name></type> <name pos:line="151" pos:column="52">inputHandler</name></decl></param>)</parameter_list>
		<block pos:line="152" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="153" pos:column="25">Flush</name><argument_list pos:line="153" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="154" pos:column="25">Device</name><op:operator pos:line="154" pos:column="31">.</op:operator><name pos:line="154" pos:column="32">PumpInput</name></name><argument_list pos:line="154" pos:column="41">(<argument><expr><name pos:line="154" pos:column="42">inputHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="155" pos:column="25">Device</name><op:operator pos:line="155" pos:column="31">.</op:operator><name pos:line="155" pos:column="32">Present</name></name><argument_list pos:line="155" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="158" pos:column="17">public</specifier> <name pos:line="158" pos:column="24">void</name></type> <name pos:line="158" pos:column="29">DrawBatch</name><parameter_list pos:line="158" pos:column="38">(<param><decl><type><name><name pos:line="158" pos:column="39">Vertex</name><index pos:line="158" pos:column="45">[]</index></name></type> <name pos:line="158" pos:column="48">vertices</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="58">int</name></type> <name pos:line="158" pos:column="62">numVertices</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="75">PrimitiveType</name></type> <name pos:line="158" pos:column="89">type</name></decl></param>)</parameter_list>
		<block pos:line="159" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="160" pos:column="25">tempBuffer</name><op:operator pos:line="160" pos:column="35">.</op:operator><name pos:line="160" pos:column="36">SetData</name></name><argument_list pos:line="160" pos:column="43">(<argument><expr><name pos:line="160" pos:column="44">vertices</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="54">numVertices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="161" pos:column="25">DrawBatch</name><argument_list pos:line="161" pos:column="34">(<argument><expr><name pos:line="161" pos:column="35">tempBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="161" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><name pos:line="161" pos:column="50">numVertices</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="63">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="164" pos:column="17">public</specifier> <name pos:line="164" pos:column="24">void</name></type> <name><name pos:line="164" pos:column="29">DrawBatch</name><argument_list pos:line="164" pos:column="38">&lt;<argument><name pos:line="164" pos:column="39">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="164" pos:column="41">(<param><decl><type><name><name pos:line="164" pos:column="42">IVertexBuffer</name><argument_list pos:line="164" pos:column="55">&lt;<argument><name pos:line="164" pos:column="56">T</name></argument>&gt;</argument_list></name></type> <name pos:line="164" pos:column="59">vertices</name></decl></param>,
			<param><decl><type><name pos:line="165" pos:column="25">int</name></type> <name pos:line="165" pos:column="29">firstVertex</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="42">int</name></type> <name pos:line="165" pos:column="46">numVertices</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="59">PrimitiveType</name></type> <name pos:line="165" pos:column="73">type</name></decl></param>)</parameter_list>
			<where pos:line="166" pos:column="25">where <name pos:line="166" pos:column="31">T</name> : struct</where>
		<block pos:line="167" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="168" pos:column="25">vertices</name><op:operator pos:line="168" pos:column="33">.</op:operator><name pos:line="168" pos:column="34">Bind</name></name><argument_list pos:line="168" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="169" pos:column="25">Device</name><op:operator pos:line="169" pos:column="31">.</op:operator><name pos:line="169" pos:column="32">DrawPrimitives</name></name><argument_list pos:line="169" pos:column="46">(<argument><expr><name pos:line="169" pos:column="47">type</name></expr></argument>, <argument><expr><name pos:line="169" pos:column="53">firstVertex</name></expr></argument>, <argument><expr><name pos:line="169" pos:column="66">numVertices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="170" pos:column="25">PerfHistory</name><op:operator pos:line="170" pos:column="36">.</op:operator><name pos:line="170" pos:column="37">Increment</name></name><argument_list pos:line="170" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="170" pos:column="47">"batches"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="170" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="173" pos:column="17">public</specifier> <name pos:line="173" pos:column="24">void</name></type> <name pos:line="173" pos:column="29">Flush</name><parameter_list pos:line="173" pos:column="34">()</parameter_list>
		<block pos:line="174" pos:column="17">{
			<expr_stmt><expr><name pos:line="175" pos:column="25">CurrentBatchRenderer</name> <op:operator pos:line="175" pos:column="46">=</op:operator> <name pos:line="175" pos:column="48">null</name></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="178" pos:column="17">public</specifier> <name pos:line="178" pos:column="24">void</name></type> <name pos:line="178" pos:column="29">SetLineWidth</name><parameter_list pos:line="178" pos:column="41">(<param><decl><type><name pos:line="178" pos:column="42">float</name></type> <name pos:line="178" pos:column="48">width</name></decl></param>)</parameter_list>
		<block pos:line="179" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="180" pos:column="25">Device</name><op:operator pos:line="180" pos:column="31">.</op:operator><name pos:line="180" pos:column="32">SetLineWidth</name></name><argument_list pos:line="180" pos:column="44">(<argument><expr><name pos:line="180" pos:column="45">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="183" pos:column="17">public</specifier> <name pos:line="183" pos:column="24">Size</name></type> <name pos:line="183" pos:column="29">Resolution</name> <block pos:line="183" pos:column="40">{ <function><name pos:line="183" pos:column="42">get</name> <block pos:line="183" pos:column="46">{ <return pos:line="183" pos:column="48">return <expr><name><name pos:line="183" pos:column="55">Device</name><op:operator pos:line="183" pos:column="61">.</op:operator><name pos:line="183" pos:column="62">WindowSize</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

		<class type="interface"><specifier pos:line="185" pos:column="17">public</specifier> interface <name pos:line="185" pos:column="34">IBatchRenderer</name> <block pos:line="185" pos:column="49">{ <function_decl><type><name pos:line="185" pos:column="51">void</name></type> <name pos:line="185" pos:column="56">Flush</name><parameter_list pos:line="185" pos:column="61">()</parameter_list>;</function_decl>	}</block></class>

		<decl_stmt><decl><type><specifier pos:line="187" pos:column="17">public</specifier> <name pos:line="187" pos:column="24">IBatchRenderer</name></type> <name pos:line="187" pos:column="39">CurrentBatchRenderer</name>
		<block pos:line="188" pos:column="17">{
			<function><name pos:line="189" pos:column="25">get</name>
			<block pos:line="190" pos:column="25">{
				<return pos:line="191" pos:column="33">return <expr><name pos:line="191" pos:column="40">currentBatchRenderer</name></expr>;</return>
			}</block></function>

			<function><name pos:line="194" pos:column="25">set</name>
			<block pos:line="195" pos:column="25">{
				<if pos:line="196" pos:column="33">if <condition pos:line="196" pos:column="36">(<expr><name pos:line="196" pos:column="37">currentBatchRenderer</name> <op:operator pos:line="196" pos:column="58">==</op:operator> <name pos:line="196" pos:column="61">value</name></expr>)</condition><then pos:line="196" pos:column="67">
					<return pos:line="197" pos:column="41">return;</return></then></if>
				<if pos:line="198" pos:column="33">if <condition pos:line="198" pos:column="36">(<expr><name pos:line="198" pos:column="37">currentBatchRenderer</name> <op:operator pos:line="198" pos:column="58">!=</op:operator> <name pos:line="198" pos:column="61">null</name></expr>)</condition><then pos:line="198" pos:column="66">
					<expr_stmt><expr><call><name><name pos:line="199" pos:column="41">currentBatchRenderer</name><op:operator pos:line="199" pos:column="61">.</op:operator><name pos:line="199" pos:column="62">Flush</name></name><argument_list pos:line="199" pos:column="67">()</argument_list></call></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="200" pos:column="33">currentBatchRenderer</name> <op:operator pos:line="200" pos:column="54">=</op:operator> <name pos:line="200" pos:column="56">value</name></expr>;</expr_stmt>
			}</block></function>
		}</block></decl></decl_stmt>

		<function><type><specifier pos:line="204" pos:column="17">public</specifier> <name><name pos:line="204" pos:column="24">IVertexBuffer</name><argument_list pos:line="204" pos:column="37">&lt;<argument><name pos:line="204" pos:column="38">Vertex</name></argument>&gt;</argument_list></name></type> <name pos:line="204" pos:column="46">CreateVertexBuffer</name><parameter_list pos:line="204" pos:column="64">(<param><decl><type><name pos:line="204" pos:column="65">int</name></type> <name pos:line="204" pos:column="69">length</name></decl></param>)</parameter_list>
		<block pos:line="205" pos:column="17">{
			<return pos:line="206" pos:column="25">return <expr><call><name><name pos:line="206" pos:column="32">Device</name><op:operator pos:line="206" pos:column="38">.</op:operator><name pos:line="206" pos:column="39">CreateVertexBuffer</name></name><argument_list pos:line="206" pos:column="57">(<argument><expr><name pos:line="206" pos:column="58">length</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="209" pos:column="17">public</specifier> <name pos:line="209" pos:column="24">void</name></type> <name pos:line="209" pos:column="29">EnableScissor</name><parameter_list pos:line="209" pos:column="42">(<param><decl><type><name pos:line="209" pos:column="43">Rectangle</name></type> <name pos:line="209" pos:column="53">rect</name></decl></param>)</parameter_list>
		<block pos:line="210" pos:column="17">{
			<comment type="line" pos:line="211" pos:column="25">// Must remain inside the current scissor rect</comment>
			<if pos:line="212" pos:column="25">if <condition pos:line="212" pos:column="28">(<expr><call><name><name pos:line="212" pos:column="29">scissorState</name><op:operator pos:line="212" pos:column="41">.</op:operator><name pos:line="212" pos:column="42">Any</name></name><argument_list pos:line="212" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="212" pos:column="48">
				<expr_stmt><expr><call><name><name pos:line="213" pos:column="33">rect</name><op:operator pos:line="213" pos:column="37">.</op:operator><name pos:line="213" pos:column="38">Intersect</name></name><argument_list pos:line="213" pos:column="47">(<argument><expr><call><name><name pos:line="213" pos:column="48">scissorState</name><op:operator pos:line="213" pos:column="60">.</op:operator><name pos:line="213" pos:column="61">Peek</name></name><argument_list pos:line="213" pos:column="65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<expr_stmt><expr><call><name pos:line="215" pos:column="25">Flush</name><argument_list pos:line="215" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="216" pos:column="25">Device</name><op:operator pos:line="216" pos:column="31">.</op:operator><name pos:line="216" pos:column="32">EnableScissor</name></name><argument_list pos:line="216" pos:column="45">(<argument><expr><name><name pos:line="216" pos:column="46">rect</name><op:operator pos:line="216" pos:column="50">.</op:operator><name pos:line="216" pos:column="51">Left</name></name></expr></argument>, <argument><expr><name><name pos:line="216" pos:column="57">rect</name><op:operator pos:line="216" pos:column="61">.</op:operator><name pos:line="216" pos:column="62">Top</name></name></expr></argument>, <argument><expr><name><name pos:line="216" pos:column="67">rect</name><op:operator pos:line="216" pos:column="71">.</op:operator><name pos:line="216" pos:column="72">Width</name></name></expr></argument>, <argument><expr><name><name pos:line="216" pos:column="79">rect</name><op:operator pos:line="216" pos:column="83">.</op:operator><name pos:line="216" pos:column="84">Height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="217" pos:column="25">scissorState</name><op:operator pos:line="217" pos:column="37">.</op:operator><name pos:line="217" pos:column="38">Push</name></name><argument_list pos:line="217" pos:column="42">(<argument><expr><name pos:line="217" pos:column="43">rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="220" pos:column="17">public</specifier> <name pos:line="220" pos:column="24">void</name></type> <name pos:line="220" pos:column="29">DisableScissor</name><parameter_list pos:line="220" pos:column="43">()</parameter_list>
		<block pos:line="221" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="222" pos:column="25">scissorState</name><op:operator pos:line="222" pos:column="37">.</op:operator><name pos:line="222" pos:column="38">Pop</name></name><argument_list pos:line="222" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="223" pos:column="25">Flush</name><argument_list pos:line="223" pos:column="30">()</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="225" pos:column="25">// Restore previous scissor rect</comment>
			<if pos:line="226" pos:column="25">if <condition pos:line="226" pos:column="28">(<expr><call><name><name pos:line="226" pos:column="29">scissorState</name><op:operator pos:line="226" pos:column="41">.</op:operator><name pos:line="226" pos:column="42">Any</name></name><argument_list pos:line="226" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="226" pos:column="48">
			<block pos:line="227" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="228" pos:column="33">var</name></type> <name pos:line="228" pos:column="37">rect</name> <init pos:line="228" pos:column="42">= <expr><call><name><name pos:line="228" pos:column="44">scissorState</name><op:operator pos:line="228" pos:column="56">.</op:operator><name pos:line="228" pos:column="57">Peek</name></name><argument_list pos:line="228" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="229" pos:column="33">Device</name><op:operator pos:line="229" pos:column="39">.</op:operator><name pos:line="229" pos:column="40">EnableScissor</name></name><argument_list pos:line="229" pos:column="53">(<argument><expr><name><name pos:line="229" pos:column="54">rect</name><op:operator pos:line="229" pos:column="58">.</op:operator><name pos:line="229" pos:column="59">Left</name></name></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="65">rect</name><op:operator pos:line="229" pos:column="69">.</op:operator><name pos:line="229" pos:column="70">Top</name></name></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="75">rect</name><op:operator pos:line="229" pos:column="79">.</op:operator><name pos:line="229" pos:column="80">Width</name></name></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="87">rect</name><op:operator pos:line="229" pos:column="91">.</op:operator><name pos:line="229" pos:column="92">Height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="231" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="232" pos:column="33">Device</name><op:operator pos:line="232" pos:column="39">.</op:operator><name pos:line="232" pos:column="40">DisableScissor</name></name><argument_list pos:line="232" pos:column="54">()</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></function>

		<function><type><specifier pos:line="235" pos:column="17">public</specifier> <name pos:line="235" pos:column="24">void</name></type> <name pos:line="235" pos:column="29">EnableDepthBuffer</name><parameter_list pos:line="235" pos:column="46">()</parameter_list>
		<block pos:line="236" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="237" pos:column="25">Flush</name><argument_list pos:line="237" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="238" pos:column="25">Device</name><op:operator pos:line="238" pos:column="31">.</op:operator><name pos:line="238" pos:column="32">EnableDepthBuffer</name></name><argument_list pos:line="238" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="241" pos:column="17">public</specifier> <name pos:line="241" pos:column="24">void</name></type> <name pos:line="241" pos:column="29">DisableDepthBuffer</name><parameter_list pos:line="241" pos:column="47">()</parameter_list>
		<block pos:line="242" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="243" pos:column="25">Flush</name><argument_list pos:line="243" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="244" pos:column="25">Device</name><op:operator pos:line="244" pos:column="31">.</op:operator><name pos:line="244" pos:column="32">DisableDepthBuffer</name></name><argument_list pos:line="244" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="247" pos:column="17">public</specifier> <name pos:line="247" pos:column="24">void</name></type> <name pos:line="247" pos:column="29">GrabWindowMouseFocus</name><parameter_list pos:line="247" pos:column="49">()</parameter_list>
		<block pos:line="248" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="249" pos:column="25">Device</name><op:operator pos:line="249" pos:column="31">.</op:operator><name pos:line="249" pos:column="32">GrabWindowMouseFocus</name></name><argument_list pos:line="249" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="252" pos:column="17">public</specifier> <name pos:line="252" pos:column="24">void</name></type> <name pos:line="252" pos:column="29">ReleaseWindowMouseFocus</name><parameter_list pos:line="252" pos:column="52">()</parameter_list>
		<block pos:line="253" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="254" pos:column="25">Device</name><op:operator pos:line="254" pos:column="31">.</op:operator><name pos:line="254" pos:column="32">ReleaseWindowMouseFocus</name></name><argument_list pos:line="254" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="257" pos:column="17">public</specifier> <name pos:line="257" pos:column="24">void</name></type> <name pos:line="257" pos:column="29">Dispose</name><parameter_list pos:line="257" pos:column="36">()</parameter_list>
		<block pos:line="258" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="259" pos:column="25">Device</name><op:operator pos:line="259" pos:column="31">.</op:operator><name pos:line="259" pos:column="32">Dispose</name></name><argument_list pos:line="259" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="260" pos:column="25">WorldVoxelRenderer</name><op:operator pos:line="260" pos:column="43">.</op:operator><name pos:line="260" pos:column="44">Dispose</name></name><argument_list pos:line="260" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="261" pos:column="25">tempBuffer</name><op:operator pos:line="261" pos:column="35">.</op:operator><name pos:line="261" pos:column="36">Dispose</name></name><argument_list pos:line="261" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="262" pos:column="25">if <condition pos:line="262" pos:column="28">(<expr><name pos:line="262" pos:column="29">fontSheetBuilder</name> <op:operator pos:line="262" pos:column="46">!=</op:operator> <name pos:line="262" pos:column="49">null</name></expr>)</condition><then pos:line="262" pos:column="54">
				<expr_stmt><expr><call><name><name pos:line="263" pos:column="33">fontSheetBuilder</name><op:operator pos:line="263" pos:column="49">.</op:operator><name pos:line="263" pos:column="50">Dispose</name></name><argument_list pos:line="263" pos:column="57">()</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></function>

		<function><type><specifier pos:line="266" pos:column="17">public</specifier> <name pos:line="266" pos:column="24">string</name></type> <name pos:line="266" pos:column="31">GetClipboardText</name><parameter_list pos:line="266" pos:column="47">()</parameter_list>
		<block pos:line="267" pos:column="17">{
			<return pos:line="268" pos:column="25">return <expr><call><name><name pos:line="268" pos:column="32">Device</name><op:operator pos:line="268" pos:column="38">.</op:operator><name pos:line="268" pos:column="39">GetClipboardText</name></name><argument_list pos:line="268" pos:column="55">()</argument_list></call></expr>;</return>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
