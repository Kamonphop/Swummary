<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\Group.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Collections</name><op:operator pos:line="11" pos:column="25">.</op:operator><name pos:line="11" pos:column="26">Generic</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="14" pos:column="1">namespace <name pos:line="14" pos:column="11">OpenRA</name>
<block pos:line="15" pos:column="1">{
	<class><specifier pos:line="16" pos:column="9">public</specifier> class <name pos:line="16" pos:column="22">Group</name>
	<block pos:line="17" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="18" pos:column="17">readonly</specifier> <name pos:line="18" pos:column="26">Actor</name><index pos:line="18" pos:column="31">[]</index></type> <name pos:line="18" pos:column="34">actors</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="19" pos:column="17">readonly</specifier> <name pos:line="19" pos:column="26">int</name></type> <name pos:line="19" pos:column="30">id</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="21" pos:column="17">static</specifier> <name pos:line="21" pos:column="24">int</name></type> <name pos:line="21" pos:column="28">nextGroup</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="23" pos:column="17">public</specifier> <name><name pos:line="23" pos:column="24">IEnumerable</name><argument_list pos:line="23" pos:column="35">&lt;<argument><name pos:line="23" pos:column="36">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="43">Actors</name> <block pos:line="23" pos:column="50">{ <function><name pos:line="23" pos:column="52">get</name> <block pos:line="23" pos:column="56">{ <return pos:line="23" pos:column="58">return <expr><name pos:line="23" pos:column="65">actors</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

		<constructor><specifier pos:line="25" pos:column="17">public</specifier> <name pos:line="25" pos:column="24">Group</name><parameter_list pos:line="25" pos:column="29">(<param><decl><type><name><name pos:line="25" pos:column="30">IEnumerable</name><argument_list pos:line="25" pos:column="41">&lt;<argument><name pos:line="25" pos:column="42">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="25" pos:column="49">actors</name></decl></param>)</parameter_list>
		<block pos:line="26" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="27" pos:column="25">this</name><op:operator pos:line="27" pos:column="29">.</op:operator><name pos:line="27" pos:column="30">actors</name></name> <op:operator pos:line="27" pos:column="37">=</op:operator> <call><name><name pos:line="27" pos:column="39">actors</name><op:operator pos:line="27" pos:column="45">.</op:operator><name pos:line="27" pos:column="46">ToArray</name></name><argument_list pos:line="27" pos:column="53">()</argument_list></call></expr>;</expr_stmt>

			<foreach pos:line="29" pos:column="25">foreach (<init><decl><type><name pos:line="29" pos:column="34">var</name></type> <name pos:line="29" pos:column="38">a</name> <range pos:line="29" pos:column="40">in <expr><name pos:line="29" pos:column="43">actors</name></expr></range></decl></init>)
				<expr_stmt><expr><name><name pos:line="30" pos:column="33">a</name><op:operator pos:line="30" pos:column="34">.</op:operator><name pos:line="30" pos:column="35">Group</name></name> <op:operator pos:line="30" pos:column="41">=</op:operator> <name pos:line="30" pos:column="43">this</name></expr>;</expr_stmt></foreach>

			<expr_stmt><expr><name pos:line="32" pos:column="25">id</name> <op:operator pos:line="32" pos:column="28">=</op:operator> <name pos:line="32" pos:column="30">nextGroup</name><op:operator pos:line="32" pos:column="39">++</op:operator></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><specifier pos:line="35" pos:column="17">public</specifier> <name pos:line="35" pos:column="24">void</name></type> <name pos:line="35" pos:column="29">Dump</name><parameter_list pos:line="35" pos:column="33">()</parameter_list>
		<block pos:line="36" pos:column="17">{
			<comment type="block" pos:line="37" pos:column="25">/* debug crap */</comment>
			<expr_stmt><expr><call><name><name pos:line="38" pos:column="25">Game</name><op:operator pos:line="38" pos:column="29">.</op:operator><name pos:line="38" pos:column="30">Debug</name></name><argument_list pos:line="38" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="36">"Group #{0}: {1}"</lit:literal><op:operator pos:line="38" pos:column="53">.</op:operator><call><name pos:line="38" pos:column="54">F</name><argument_list pos:line="38" pos:column="55">(
				<argument><expr><name pos:line="39" pos:column="33">id</name></expr></argument>, <argument><expr><call><name><name pos:line="39" pos:column="37">actors</name><op:operator pos:line="39" pos:column="43">.</op:operator><name pos:line="39" pos:column="44">Select</name></name><argument_list pos:line="39" pos:column="50">(<argument><expr><lambda><name pos:line="39" pos:column="51">a</name> <op:operator pos:line="39" pos:column="53">=&gt;</op:operator> <lit:literal type="string" pos:line="39" pos:column="56">"#{0} {1}"</lit:literal><op:operator pos:line="39" pos:column="66">.</op:operator><call><name pos:line="39" pos:column="67">F</name><argument_list pos:line="39" pos:column="68">(<argument><expr><name><name pos:line="39" pos:column="69">a</name><op:operator pos:line="39" pos:column="70">.</op:operator><name pos:line="39" pos:column="71">ActorID</name></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="80">a</name><op:operator pos:line="39" pos:column="81">.</op:operator><name pos:line="39" pos:column="82">Info</name><op:operator pos:line="39" pos:column="86">.</op:operator><name pos:line="39" pos:column="87">Name</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="93">.</op:operator><call><name pos:line="39" pos:column="94">JoinWith</name><argument_list pos:line="39" pos:column="102">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="103">","</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<comment type="block" pos:line="42" pos:column="17">/* TODO: add lazy group path crap, groupleader, pruning, etc */</comment>
	}</block></class>
}</block></namespace>
</unit>
