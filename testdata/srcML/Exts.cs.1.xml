<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\Exts.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Drawing</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Drawing</name><op:operator pos:line="14" pos:column="21">.</op:operator><name pos:line="14" pos:column="22">Imaging</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Globalization</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Linq</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Reflection</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">OpenRA</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Support</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">OpenRA</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Traits</name></name>;</using>

<namespace pos:line="21" pos:column="1">namespace <name pos:line="21" pos:column="11">OpenRA</name>
<block pos:line="22" pos:column="1">{
	<class><specifier pos:line="23" pos:column="9">public</specifier> <specifier pos:line="23" pos:column="16">static</specifier> class <name pos:line="23" pos:column="29">Exts</name>
	<block pos:line="24" pos:column="9">{
		<function><type><specifier pos:line="25" pos:column="17">public</specifier> <specifier pos:line="25" pos:column="24">static</specifier> <name pos:line="25" pos:column="31">bool</name></type> <name pos:line="25" pos:column="36">IsUppercase</name><parameter_list pos:line="25" pos:column="47">(<param><decl><type><name pos:line="25" pos:column="48">this</name> <name pos:line="25" pos:column="53">string</name></type> <name pos:line="25" pos:column="60">str</name></decl></param>)</parameter_list>
		<block pos:line="26" pos:column="17">{
			<return pos:line="27" pos:column="25">return <expr><call><name><name pos:line="27" pos:column="32">string</name><op:operator pos:line="27" pos:column="38">.</op:operator><name pos:line="27" pos:column="39">Compare</name></name><argument_list pos:line="27" pos:column="46">(<argument><expr><call><name><name pos:line="27" pos:column="47">str</name><op:operator pos:line="27" pos:column="50">.</op:operator><name pos:line="27" pos:column="51">ToUpperInvariant</name></name><argument_list pos:line="27" pos:column="67">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="27" pos:column="71">str</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="27" pos:column="76">false</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="27" pos:column="83">==</op:operator> <lit:literal type="number" pos:line="27" pos:column="86">0</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="30" pos:column="17">public</specifier> <specifier pos:line="30" pos:column="24">static</specifier> <name pos:line="30" pos:column="31">string</name></type> <name pos:line="30" pos:column="38">F</name><parameter_list pos:line="30" pos:column="39">(<param><decl><type><name pos:line="30" pos:column="40">this</name> <name pos:line="30" pos:column="45">string</name></type> <name pos:line="30" pos:column="52">fmt</name></decl></param>, <param><decl><type><specifier pos:line="30" pos:column="57">params</specifier> <name><name pos:line="30" pos:column="64">object</name><index pos:line="30" pos:column="70">[]</index></name></type> <name pos:line="30" pos:column="73">args</name></decl></param>)</parameter_list>
		<block pos:line="31" pos:column="17">{
			<return pos:line="32" pos:column="25">return <expr><call><name><name pos:line="32" pos:column="32">string</name><op:operator pos:line="32" pos:column="38">.</op:operator><name pos:line="32" pos:column="39">Format</name></name><argument_list pos:line="32" pos:column="45">(<argument><expr><name pos:line="32" pos:column="46">fmt</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="51">args</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="35" pos:column="17">public</specifier> <specifier pos:line="35" pos:column="24">static</specifier> <name pos:line="35" pos:column="31">T</name></type> <name><name pos:line="35" pos:column="33">WithDefault</name><argument_list pos:line="35" pos:column="44">&lt;<argument><name pos:line="35" pos:column="45">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="35" pos:column="47">(<param><decl><type><name pos:line="35" pos:column="48">T</name></type> <name pos:line="35" pos:column="50">def</name></decl></param>, <param><decl><type><name><name pos:line="35" pos:column="55">Func</name><argument_list pos:line="35" pos:column="59">&lt;<argument><name pos:line="35" pos:column="60">T</name></argument>&gt;</argument_list></name></type> <name pos:line="35" pos:column="63">f</name></decl></param>)</parameter_list>
		<block pos:line="36" pos:column="17">{
			<try pos:line="37" pos:column="25">try <block pos:line="37" pos:column="29">{ <return pos:line="37" pos:column="31">return <expr><call><name pos:line="37" pos:column="38">f</name><argument_list pos:line="37" pos:column="39">()</argument_list></call></expr>;</return> }</block>
			<catch pos:line="38" pos:column="25">catch <block pos:line="38" pos:column="31">{ <return pos:line="38" pos:column="33">return <expr><name pos:line="38" pos:column="40">def</name></expr>;</return> }</block></catch></try>
		}</block></function>

		<function><type><specifier pos:line="41" pos:column="17">public</specifier> <specifier pos:line="41" pos:column="24">static</specifier> <name pos:line="41" pos:column="31">void</name></type> <name><name pos:line="41" pos:column="36">Do</name><argument_list pos:line="41" pos:column="38">&lt;<argument><name pos:line="41" pos:column="39">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="41" pos:column="41">(<param><decl><type><name pos:line="41" pos:column="42">this</name> <name><name pos:line="41" pos:column="47">IEnumerable</name><argument_list pos:line="41" pos:column="58">&lt;<argument><name pos:line="41" pos:column="59">T</name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="62">e</name></decl></param>, <param><decl><type><name><name pos:line="41" pos:column="65">Action</name><argument_list pos:line="41" pos:column="71">&lt;<argument><name pos:line="41" pos:column="72">T</name></argument>&gt;</argument_list></name></type> <name pos:line="41" pos:column="75">fn</name></decl></param>)</parameter_list>
		<block pos:line="42" pos:column="17">{
			<foreach pos:line="43" pos:column="25">foreach (<init><decl><type><name pos:line="43" pos:column="34">var</name></type> <name pos:line="43" pos:column="38">ee</name> <range pos:line="43" pos:column="41">in <expr><name pos:line="43" pos:column="44">e</name></expr></range></decl></init>)
				<expr_stmt><expr><call><name pos:line="44" pos:column="33">fn</name><argument_list pos:line="44" pos:column="35">(<argument><expr><name pos:line="44" pos:column="36">ee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
		}</block></function>

		<function><type><specifier pos:line="47" pos:column="17">public</specifier> <specifier pos:line="47" pos:column="24">static</specifier> <name><name pos:line="47" pos:column="31">Lazy</name><argument_list pos:line="47" pos:column="35">&lt;<argument><name pos:line="47" pos:column="36">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="47" pos:column="39">Lazy</name><argument_list pos:line="47" pos:column="43">&lt;<argument><name pos:line="47" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="47" pos:column="46">(<param><decl><type><name><name pos:line="47" pos:column="47">Func</name><argument_list pos:line="47" pos:column="51">&lt;<argument><name pos:line="47" pos:column="52">T</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="55">p</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="58">{ <return pos:line="47" pos:column="60">return <expr><op:operator pos:line="47" pos:column="67">new</op:operator> <call><name><name pos:line="47" pos:column="71">Lazy</name><argument_list pos:line="47" pos:column="75">&lt;<argument><name pos:line="47" pos:column="76">T</name></argument>&gt;</argument_list></name><argument_list pos:line="47" pos:column="78">(<argument><expr><name pos:line="47" pos:column="79">p</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="49" pos:column="17">public</specifier> <specifier pos:line="49" pos:column="24">static</specifier> <name><name pos:line="49" pos:column="31">IEnumerable</name><argument_list pos:line="49" pos:column="42">&lt;<argument><name pos:line="49" pos:column="43">string</name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="51">GetNamespaces</name><parameter_list pos:line="49" pos:column="64">(<param><decl><type><name pos:line="49" pos:column="65">this</name> <name pos:line="49" pos:column="70">Assembly</name></type> <name pos:line="49" pos:column="79">a</name></decl></param>)</parameter_list>
		<block pos:line="50" pos:column="17">{
			<return pos:line="51" pos:column="25">return <expr><call><name><name pos:line="51" pos:column="32">a</name><op:operator pos:line="51" pos:column="33">.</op:operator><name pos:line="51" pos:column="34">GetTypes</name></name><argument_list pos:line="51" pos:column="42">()</argument_list></call><op:operator pos:line="51" pos:column="44">.</op:operator><call><name pos:line="51" pos:column="45">Select</name><argument_list pos:line="51" pos:column="51">(<argument><expr><lambda><name pos:line="51" pos:column="52">t</name> <op:operator pos:line="51" pos:column="54">=&gt;</op:operator> <name><name pos:line="51" pos:column="57">t</name><op:operator pos:line="51" pos:column="58">.</op:operator><name pos:line="51" pos:column="59">Namespace</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="51" pos:column="69">.</op:operator><call><name pos:line="51" pos:column="70">Distinct</name><argument_list pos:line="51" pos:column="78">()</argument_list></call><op:operator pos:line="51" pos:column="80">.</op:operator><call><name pos:line="51" pos:column="81">Where</name><argument_list pos:line="51" pos:column="86">(<argument><expr><lambda><name pos:line="51" pos:column="87">n</name> <op:operator pos:line="51" pos:column="89">=&gt;</op:operator> <name pos:line="51" pos:column="92">n</name> <op:operator pos:line="51" pos:column="94">!=</op:operator> <name pos:line="51" pos:column="97">null</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="54" pos:column="17">public</specifier> <specifier pos:line="54" pos:column="24">static</specifier> <name pos:line="54" pos:column="31">bool</name></type> <name><name pos:line="54" pos:column="36">HasAttribute</name><argument_list pos:line="54" pos:column="48">&lt;<argument><name pos:line="54" pos:column="49">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="54" pos:column="51">(<param><decl><type><name pos:line="54" pos:column="52">this</name> <name pos:line="54" pos:column="57">MemberInfo</name></type> <name pos:line="54" pos:column="68">mi</name></decl></param>)</parameter_list>
		<block pos:line="55" pos:column="17">{
			<return pos:line="56" pos:column="25">return <expr><call><name><name pos:line="56" pos:column="32">mi</name><op:operator pos:line="56" pos:column="34">.</op:operator><name pos:line="56" pos:column="35">GetCustomAttributes</name></name><argument_list pos:line="56" pos:column="54">(<argument><expr><call><name pos:line="56" pos:column="55">typeof</name><argument_list pos:line="56" pos:column="61">(<argument><expr><name pos:line="56" pos:column="62">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="56" pos:column="66">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="71">.</op:operator><name pos:line="56" pos:column="72">Length</name> <op:operator pos:line="56" pos:column="79">!=</op:operator> <lit:literal type="number" pos:line="56" pos:column="82">0</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="59" pos:column="17">public</specifier> <specifier pos:line="59" pos:column="24">static</specifier> <name pos:line="59" pos:column="31">T</name><index pos:line="59" pos:column="32">[]</index></type> <name><name pos:line="59" pos:column="35">GetCustomAttributes</name><argument_list pos:line="59" pos:column="54">&lt;<argument><name pos:line="59" pos:column="55">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="59" pos:column="57">(<param><decl><type><name pos:line="59" pos:column="58">this</name> <name pos:line="59" pos:column="63">MemberInfo</name></type> <name pos:line="59" pos:column="74">mi</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="78">bool</name></type> <name pos:line="59" pos:column="83">inherit</name></decl></param>)</parameter_list>
			<where pos:line="60" pos:column="25">where <name pos:line="60" pos:column="31">T</name> : class</where>
		<block pos:line="61" pos:column="17">{
			<return pos:line="62" pos:column="25">return <expr><op:operator pos:line="62" pos:column="32">(</op:operator><name><name pos:line="62" pos:column="33">T</name><index pos:line="62" pos:column="34">[]</index></name><op:operator pos:line="62" pos:column="36">)</op:operator><call><name><name pos:line="62" pos:column="37">mi</name><op:operator pos:line="62" pos:column="39">.</op:operator><name pos:line="62" pos:column="40">GetCustomAttributes</name></name><argument_list pos:line="62" pos:column="59">(<argument><expr><call><name pos:line="62" pos:column="60">typeof</name><argument_list pos:line="62" pos:column="66">(<argument><expr><name pos:line="62" pos:column="67">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="62" pos:column="71">inherit</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="65" pos:column="17">public</specifier> <specifier pos:line="65" pos:column="24">static</specifier> <name pos:line="65" pos:column="31">T</name><index pos:line="65" pos:column="32">[]</index></type> <name><name pos:line="65" pos:column="35">GetCustomAttributes</name><argument_list pos:line="65" pos:column="54">&lt;<argument><name pos:line="65" pos:column="55">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="65" pos:column="57">(<param><decl><type><name pos:line="65" pos:column="58">this</name> <name pos:line="65" pos:column="63">ParameterInfo</name></type> <name pos:line="65" pos:column="77">mi</name></decl></param>)</parameter_list>
			<where pos:line="66" pos:column="25">where <name pos:line="66" pos:column="31">T</name> : class</where>
		<block pos:line="67" pos:column="17">{
			<return pos:line="68" pos:column="25">return <expr><op:operator pos:line="68" pos:column="32">(</op:operator><name><name pos:line="68" pos:column="33">T</name><index pos:line="68" pos:column="34">[]</index></name><op:operator pos:line="68" pos:column="36">)</op:operator><call><name><name pos:line="68" pos:column="37">mi</name><op:operator pos:line="68" pos:column="39">.</op:operator><name pos:line="68" pos:column="40">GetCustomAttributes</name></name><argument_list pos:line="68" pos:column="59">(<argument><expr><call><name pos:line="68" pos:column="60">typeof</name><argument_list pos:line="68" pos:column="66">(<argument><expr><name pos:line="68" pos:column="67">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="68" pos:column="71">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="71" pos:column="17">public</specifier> <specifier pos:line="71" pos:column="24">static</specifier> <name pos:line="71" pos:column="31">T</name></type> <name><name pos:line="71" pos:column="33">Clamp</name><argument_list pos:line="71" pos:column="38">&lt;<argument><name pos:line="71" pos:column="39">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="71" pos:column="41">(<param><decl><type><name pos:line="71" pos:column="42">this</name> <name pos:line="71" pos:column="47">T</name></type> <name pos:line="71" pos:column="49">val</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="54">T</name></type> <name pos:line="71" pos:column="56">min</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="61">T</name></type> <name pos:line="71" pos:column="63">max</name></decl></param>)</parameter_list> <where pos:line="71" pos:column="68">where <name pos:line="71" pos:column="74">T</name> : <name><name pos:line="71" pos:column="78">IComparable</name><argument_list pos:line="71" pos:column="89">&lt;<argument><name pos:line="71" pos:column="90">T</name></argument>&gt;</argument_list></name></where>
		<block pos:line="72" pos:column="17">{
			<if pos:line="73" pos:column="25">if <condition pos:line="73" pos:column="28">(<expr><call><name><name pos:line="73" pos:column="29">val</name><op:operator pos:line="73" pos:column="32">.</op:operator><name pos:line="73" pos:column="33">CompareTo</name></name><argument_list pos:line="73" pos:column="42">(<argument><expr><name pos:line="73" pos:column="43">min</name></expr></argument>)</argument_list></call> <op:operator pos:line="73" pos:column="48">&lt;</op:operator> <lit:literal type="number" pos:line="73" pos:column="50">0</lit:literal></expr>)</condition><then pos:line="73" pos:column="52">
				<return pos:line="74" pos:column="33">return <expr><name pos:line="74" pos:column="40">min</name></expr>;</return></then>
			<else pos:line="75" pos:column="25">else <if pos:line="75" pos:column="30">if <condition pos:line="75" pos:column="33">(<expr><call><name><name pos:line="75" pos:column="34">val</name><op:operator pos:line="75" pos:column="37">.</op:operator><name pos:line="75" pos:column="38">CompareTo</name></name><argument_list pos:line="75" pos:column="47">(<argument><expr><name pos:line="75" pos:column="48">max</name></expr></argument>)</argument_list></call> <op:operator pos:line="75" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="75" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="75" pos:column="57">
				<return pos:line="76" pos:column="33">return <expr><name pos:line="76" pos:column="40">max</name></expr>;</return></then>
			<else pos:line="77" pos:column="25">else
				<return pos:line="78" pos:column="33">return <expr><name pos:line="78" pos:column="40">val</name></expr>;</return></else></if></else></if>
		}</block></function>

		<function><type><specifier pos:line="81" pos:column="17">public</specifier> <specifier pos:line="81" pos:column="24">static</specifier> <name pos:line="81" pos:column="31">bool</name></type> <name pos:line="81" pos:column="36">Contains</name><parameter_list pos:line="81" pos:column="44">(<param><decl><type><name pos:line="81" pos:column="45">this</name> <name pos:line="81" pos:column="50">Rectangle</name></type> <name pos:line="81" pos:column="60">r</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="63">int2</name></type> <name pos:line="81" pos:column="68">p</name></decl></param>)</parameter_list>
		<block pos:line="82" pos:column="17">{
			<return pos:line="83" pos:column="25">return <expr><call><name><name pos:line="83" pos:column="32">r</name><op:operator pos:line="83" pos:column="33">.</op:operator><name pos:line="83" pos:column="34">Contains</name></name><argument_list pos:line="83" pos:column="42">(<argument><expr><call><name><name pos:line="83" pos:column="43">p</name><op:operator pos:line="83" pos:column="44">.</op:operator><name pos:line="83" pos:column="45">ToPoint</name></name><argument_list pos:line="83" pos:column="52">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="86" pos:column="17">public</specifier> <specifier pos:line="86" pos:column="24">static</specifier> <name pos:line="86" pos:column="31">bool</name></type> <name pos:line="86" pos:column="36">Contains</name><parameter_list pos:line="86" pos:column="44">(<param><decl><type><name pos:line="86" pos:column="45">this</name> <name pos:line="86" pos:column="50">RectangleF</name></type> <name pos:line="86" pos:column="61">r</name></decl></param>, <param><decl><type><name pos:line="86" pos:column="64">int2</name></type> <name pos:line="86" pos:column="69">p</name></decl></param>)</parameter_list>
		<block pos:line="87" pos:column="17">{
			<return pos:line="88" pos:column="25">return <expr><call><name><name pos:line="88" pos:column="32">r</name><op:operator pos:line="88" pos:column="33">.</op:operator><name pos:line="88" pos:column="34">Contains</name></name><argument_list pos:line="88" pos:column="42">(<argument><expr><call><name><name pos:line="88" pos:column="43">p</name><op:operator pos:line="88" pos:column="44">.</op:operator><name pos:line="88" pos:column="45">ToPointF</name></name><argument_list pos:line="88" pos:column="53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="91" pos:column="17">static</specifier> <name pos:line="91" pos:column="24">int</name></type> <name pos:line="91" pos:column="28">WindingDirectionTest</name><parameter_list pos:line="91" pos:column="48">(<param><decl><type><name pos:line="91" pos:column="49">int2</name></type> <name pos:line="91" pos:column="54">v0</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="58">int2</name></type> <name pos:line="91" pos:column="63">v1</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="67">int2</name></type> <name pos:line="91" pos:column="72">p</name></decl></param>)</parameter_list>
		<block pos:line="92" pos:column="17">{
			<return pos:line="93" pos:column="25">return <expr><op:operator pos:line="93" pos:column="32">(</op:operator><name><name pos:line="93" pos:column="33">v1</name><op:operator pos:line="93" pos:column="35">.</op:operator><name pos:line="93" pos:column="36">X</name></name> <op:operator pos:line="93" pos:column="38">-</op:operator> <name><name pos:line="93" pos:column="40">v0</name><op:operator pos:line="93" pos:column="42">.</op:operator><name pos:line="93" pos:column="43">X</name></name><op:operator pos:line="93" pos:column="44">)</op:operator> <op:operator pos:line="93" pos:column="46">*</op:operator> <op:operator pos:line="93" pos:column="48">(</op:operator><name><name pos:line="93" pos:column="49">p</name><op:operator pos:line="93" pos:column="50">.</op:operator><name pos:line="93" pos:column="51">Y</name></name> <op:operator pos:line="93" pos:column="53">-</op:operator> <name><name pos:line="93" pos:column="55">v0</name><op:operator pos:line="93" pos:column="57">.</op:operator><name pos:line="93" pos:column="58">Y</name></name><op:operator pos:line="93" pos:column="59">)</op:operator> <op:operator pos:line="93" pos:column="61">-</op:operator> <op:operator pos:line="93" pos:column="63">(</op:operator><name><name pos:line="93" pos:column="64">p</name><op:operator pos:line="93" pos:column="65">.</op:operator><name pos:line="93" pos:column="66">X</name></name> <op:operator pos:line="93" pos:column="68">-</op:operator> <name><name pos:line="93" pos:column="70">v0</name><op:operator pos:line="93" pos:column="72">.</op:operator><name pos:line="93" pos:column="73">X</name></name><op:operator pos:line="93" pos:column="74">)</op:operator> <op:operator pos:line="93" pos:column="76">*</op:operator> <op:operator pos:line="93" pos:column="78">(</op:operator><name><name pos:line="93" pos:column="79">v1</name><op:operator pos:line="93" pos:column="81">.</op:operator><name pos:line="93" pos:column="82">Y</name></name> <op:operator pos:line="93" pos:column="84">-</op:operator> <name><name pos:line="93" pos:column="86">v0</name><op:operator pos:line="93" pos:column="88">.</op:operator><name pos:line="93" pos:column="89">Y</name></name><op:operator pos:line="93" pos:column="90">)</op:operator></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="96" pos:column="17">public</specifier> <specifier pos:line="96" pos:column="24">static</specifier> <name pos:line="96" pos:column="31">bool</name></type> <name pos:line="96" pos:column="36">PolygonContains</name><parameter_list pos:line="96" pos:column="51">(<param><decl><type><name pos:line="96" pos:column="52">this</name> <name><name pos:line="96" pos:column="57">int2</name><index pos:line="96" pos:column="61">[]</index></name></type> <name pos:line="96" pos:column="64">polygon</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="73">int2</name></type> <name pos:line="96" pos:column="78">p</name></decl></param>)</parameter_list>
		<block pos:line="97" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="98" pos:column="25">var</name></type> <name pos:line="98" pos:column="29">windingNumber</name> <init pos:line="98" pos:column="43">= <expr><lit:literal type="number" pos:line="98" pos:column="45">0</lit:literal></expr></init></decl>;</decl_stmt>

			<for pos:line="100" pos:column="25">for (<init><decl><type><name pos:line="100" pos:column="30">var</name></type> <name pos:line="100" pos:column="34">i</name> <init pos:line="100" pos:column="36">= <expr><lit:literal type="number" pos:line="100" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="100" pos:column="41">i</name> <op:operator pos:line="100" pos:column="43">&lt;</op:operator> <name><name pos:line="100" pos:column="45">polygon</name><op:operator pos:line="100" pos:column="52">.</op:operator><name pos:line="100" pos:column="53">Length</name></name></expr>;</condition> <incr><expr><name pos:line="100" pos:column="61">i</name><op:operator pos:line="100" pos:column="62">++</op:operator></expr></incr>)
			<block pos:line="101" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="102" pos:column="33">var</name></type> <name pos:line="102" pos:column="37">tv</name> <init pos:line="102" pos:column="40">= <expr><name><name pos:line="102" pos:column="42">polygon</name><index pos:line="102" pos:column="49">[<expr><name pos:line="102" pos:column="50">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="103" pos:column="33">var</name></type> <name pos:line="103" pos:column="37">nv</name> <init pos:line="103" pos:column="40">= <expr><name><name pos:line="103" pos:column="42">polygon</name><index pos:line="103" pos:column="49">[<expr><op:operator pos:line="103" pos:column="50">(</op:operator><name pos:line="103" pos:column="51">i</name> <op:operator pos:line="103" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="103" pos:column="55">1</lit:literal><op:operator pos:line="103" pos:column="56">)</op:operator> <op:operator pos:line="103" pos:column="58">%</op:operator> <name><name pos:line="103" pos:column="60">polygon</name><op:operator pos:line="103" pos:column="67">.</op:operator><name pos:line="103" pos:column="68">Length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<if pos:line="105" pos:column="33">if <condition pos:line="105" pos:column="36">(<expr><name><name pos:line="105" pos:column="37">tv</name><op:operator pos:line="105" pos:column="39">.</op:operator><name pos:line="105" pos:column="40">Y</name></name> <op:operator pos:line="105" pos:column="42">&lt;=</op:operator> <name><name pos:line="105" pos:column="45">p</name><op:operator pos:line="105" pos:column="46">.</op:operator><name pos:line="105" pos:column="47">Y</name> <type:modifier pos:line="105" pos:column="49">&amp;&amp;</type:modifier></name> <name><name pos:line="105" pos:column="52">nv</name><op:operator pos:line="105" pos:column="54">.</op:operator><name pos:line="105" pos:column="55">Y</name></name> <op:operator pos:line="105" pos:column="57">&gt;</op:operator> <name><name pos:line="105" pos:column="59">p</name><op:operator pos:line="105" pos:column="60">.</op:operator><name pos:line="105" pos:column="61">Y</name> <type:modifier pos:line="105" pos:column="63">&amp;&amp;</type:modifier></name> <call><name pos:line="105" pos:column="66">WindingDirectionTest</name><argument_list pos:line="105" pos:column="86">(<argument><expr><name pos:line="105" pos:column="87">tv</name></expr></argument>, <argument><expr><name pos:line="105" pos:column="91">nv</name></expr></argument>, <argument><expr><name pos:line="105" pos:column="95">p</name></expr></argument>)</argument_list></call> <op:operator pos:line="105" pos:column="98">&gt;</op:operator> <lit:literal type="number" pos:line="105" pos:column="100">0</lit:literal></expr>)</condition><then pos:line="105" pos:column="102">
					<expr_stmt><expr><name pos:line="106" pos:column="41">windingNumber</name><op:operator pos:line="106" pos:column="54">++</op:operator></expr>;</expr_stmt></then>
				<else pos:line="107" pos:column="33">else <if pos:line="107" pos:column="38">if <condition pos:line="107" pos:column="41">(<expr><name><name pos:line="107" pos:column="42">tv</name><op:operator pos:line="107" pos:column="44">.</op:operator><name pos:line="107" pos:column="45">Y</name></name> <op:operator pos:line="107" pos:column="47">&gt;</op:operator> <name><name pos:line="107" pos:column="49">p</name><op:operator pos:line="107" pos:column="50">.</op:operator><name pos:line="107" pos:column="51">Y</name> <type:modifier pos:line="107" pos:column="53">&amp;&amp;</type:modifier></name> <name><name pos:line="107" pos:column="56">nv</name><op:operator pos:line="107" pos:column="58">.</op:operator><name pos:line="107" pos:column="59">Y</name></name> <op:operator pos:line="107" pos:column="61">&lt;=</op:operator> <name><name pos:line="107" pos:column="64">p</name><op:operator pos:line="107" pos:column="65">.</op:operator><name pos:line="107" pos:column="66">Y</name> <type:modifier pos:line="107" pos:column="68">&amp;&amp;</type:modifier></name> <call><name pos:line="107" pos:column="71">WindingDirectionTest</name><argument_list pos:line="107" pos:column="91">(<argument><expr><name pos:line="107" pos:column="92">tv</name></expr></argument>, <argument><expr><name pos:line="107" pos:column="96">nv</name></expr></argument>, <argument><expr><name pos:line="107" pos:column="100">p</name></expr></argument>)</argument_list></call> <op:operator pos:line="107" pos:column="103">&lt;</op:operator> <lit:literal type="number" pos:line="107" pos:column="105">0</lit:literal></expr>)</condition><then pos:line="107" pos:column="107">
					<expr_stmt><expr><name pos:line="108" pos:column="41">windingNumber</name><op:operator pos:line="108" pos:column="54">--</op:operator></expr>;</expr_stmt></then></if></else></if>
			}</block></for>

			<return pos:line="111" pos:column="25">return <expr><name pos:line="111" pos:column="32">windingNumber</name> <op:operator pos:line="111" pos:column="46">!=</op:operator> <lit:literal type="number" pos:line="111" pos:column="49">0</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="114" pos:column="17">public</specifier> <specifier pos:line="114" pos:column="24">static</specifier> <name pos:line="114" pos:column="31">bool</name></type> <name pos:line="114" pos:column="36">HasModifier</name><parameter_list pos:line="114" pos:column="47">(<param><decl><type><name pos:line="114" pos:column="48">this</name> <name pos:line="114" pos:column="53">Modifiers</name></type> <name pos:line="114" pos:column="63">k</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="66">Modifiers</name></type> <name pos:line="114" pos:column="76">mod</name></decl></param>)</parameter_list>
		<block pos:line="115" pos:column="17">{
			<return pos:line="116" pos:column="25">return <expr><op:operator pos:line="116" pos:column="32">(</op:operator><name pos:line="116" pos:column="33">k</name> <op:operator pos:line="116" pos:column="35">&amp;</op:operator> <name pos:line="116" pos:column="37">mod</name><op:operator pos:line="116" pos:column="40">)</op:operator> <op:operator pos:line="116" pos:column="42">==</op:operator> <name pos:line="116" pos:column="45">mod</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="119" pos:column="17">public</specifier> <specifier pos:line="119" pos:column="24">static</specifier> <name pos:line="119" pos:column="31">V</name></type> <name><name pos:line="119" pos:column="33">GetOrAdd</name><argument_list pos:line="119" pos:column="41">&lt;<argument><name pos:line="119" pos:column="42">K</name></argument>, <argument><name pos:line="119" pos:column="45">V</name></argument>&gt;</argument_list></name><parameter_list pos:line="119" pos:column="47">(<param><decl><type><name pos:line="119" pos:column="48">this</name> <name><name pos:line="119" pos:column="53">Dictionary</name><argument_list pos:line="119" pos:column="63">&lt;<argument><name pos:line="119" pos:column="64">K</name></argument>, <argument><name pos:line="119" pos:column="67">V</name></argument>&gt;</argument_list></name></type> <name pos:line="119" pos:column="70">d</name></decl></param>, <param><decl><type><name pos:line="119" pos:column="73">K</name></type> <name pos:line="119" pos:column="75">k</name></decl></param>)</parameter_list>
			<where pos:line="120" pos:column="25">where <name pos:line="120" pos:column="31">V</name> : new()</where>
		<block pos:line="121" pos:column="17">{
			<return pos:line="122" pos:column="25">return <expr><call><name><name pos:line="122" pos:column="32">d</name><op:operator pos:line="122" pos:column="33">.</op:operator><name pos:line="122" pos:column="34">GetOrAdd</name></name><argument_list pos:line="122" pos:column="42">(<argument><expr><name pos:line="122" pos:column="43">k</name></expr></argument>, <argument><expr><lambda><name pos:line="122" pos:column="46">_</name> <op:operator pos:line="122" pos:column="48">=&gt;</op:operator> <op:operator pos:line="122" pos:column="51">new</op:operator> <call><name pos:line="122" pos:column="55">V</name><argument_list pos:line="122" pos:column="56">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="125" pos:column="17">public</specifier> <specifier pos:line="125" pos:column="24">static</specifier> <name pos:line="125" pos:column="31">V</name></type> <name><name pos:line="125" pos:column="33">GetOrAdd</name><argument_list pos:line="125" pos:column="41">&lt;<argument><name pos:line="125" pos:column="42">K</name></argument>, <argument><name pos:line="125" pos:column="45">V</name></argument>&gt;</argument_list></name><parameter_list pos:line="125" pos:column="47">(<param><decl><type><name pos:line="125" pos:column="48">this</name> <name><name pos:line="125" pos:column="53">Dictionary</name><argument_list pos:line="125" pos:column="63">&lt;<argument><name pos:line="125" pos:column="64">K</name></argument>, <argument><name pos:line="125" pos:column="67">V</name></argument>&gt;</argument_list></name></type> <name pos:line="125" pos:column="70">d</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="73">K</name></type> <name pos:line="125" pos:column="75">k</name></decl></param>, <param><decl><type><name><name pos:line="125" pos:column="78">Func</name><argument_list pos:line="125" pos:column="82">&lt;<argument><name pos:line="125" pos:column="83">K</name></argument>, <argument><name pos:line="125" pos:column="86">V</name></argument>&gt;</argument_list></name></type> <name pos:line="125" pos:column="89">createFn</name></decl></param>)</parameter_list>
		<block pos:line="126" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="127" pos:column="25">V</name></type> <name pos:line="127" pos:column="27">ret</name></decl>;</decl_stmt>
			<if pos:line="128" pos:column="25">if <condition pos:line="128" pos:column="28">(<expr><op:operator pos:line="128" pos:column="29">!</op:operator><call><name><name pos:line="128" pos:column="30">d</name><op:operator pos:line="128" pos:column="31">.</op:operator><name pos:line="128" pos:column="32">TryGetValue</name></name><argument_list pos:line="128" pos:column="43">(<argument><expr><name pos:line="128" pos:column="44">k</name></expr></argument>, <argument><expr pos:line="128" pos:column="47">out <name pos:line="128" pos:column="51">ret</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="128" pos:column="56">
				<expr_stmt><expr><call><name><name pos:line="129" pos:column="33">d</name><op:operator pos:line="129" pos:column="34">.</op:operator><name pos:line="129" pos:column="35">Add</name></name><argument_list pos:line="129" pos:column="38">(<argument><expr><name pos:line="129" pos:column="39">k</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="42">ret</name> <op:operator pos:line="129" pos:column="46">=</op:operator> <call><name pos:line="129" pos:column="48">createFn</name><argument_list pos:line="129" pos:column="56">(<argument><expr><name pos:line="129" pos:column="57">k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<return pos:line="130" pos:column="25">return <expr><name pos:line="130" pos:column="32">ret</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="133" pos:column="17">public</specifier> <specifier pos:line="133" pos:column="24">static</specifier> <name pos:line="133" pos:column="31">int</name></type> <name><name pos:line="133" pos:column="35">IndexOf</name><argument_list pos:line="133" pos:column="42">&lt;<argument><name pos:line="133" pos:column="43">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="133" pos:column="45">(<param><decl><type><name pos:line="133" pos:column="46">this</name> <name><name pos:line="133" pos:column="51">T</name><index pos:line="133" pos:column="52">[]</index></name></type> <name pos:line="133" pos:column="55">array</name></decl></param>, <param><decl><type><name pos:line="133" pos:column="62">T</name></type> <name pos:line="133" pos:column="64">value</name></decl></param>)</parameter_list>
		<block pos:line="134" pos:column="17">{
			<return pos:line="135" pos:column="25">return <expr><call><name><name pos:line="135" pos:column="32">Array</name><op:operator pos:line="135" pos:column="37">.</op:operator><name pos:line="135" pos:column="38">IndexOf</name></name><argument_list pos:line="135" pos:column="45">(<argument><expr><name pos:line="135" pos:column="46">array</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="53">value</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="138" pos:column="17">public</specifier> <specifier pos:line="138" pos:column="24">static</specifier> <name pos:line="138" pos:column="31">T</name></type> <name><name pos:line="138" pos:column="33">Random</name><argument_list pos:line="138" pos:column="39">&lt;<argument><name pos:line="138" pos:column="40">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="138" pos:column="42">(<param><decl><type><name pos:line="138" pos:column="43">this</name> <name><name pos:line="138" pos:column="48">IEnumerable</name><argument_list pos:line="138" pos:column="59">&lt;<argument><name pos:line="138" pos:column="60">T</name></argument>&gt;</argument_list></name></type> <name pos:line="138" pos:column="63">ts</name></decl></param>, <param><decl><type><name pos:line="138" pos:column="67">MersenneTwister</name></type> <name pos:line="138" pos:column="83">r</name></decl></param>)</parameter_list>
		<block pos:line="139" pos:column="17">{
			<return pos:line="140" pos:column="25">return <expr><call><name pos:line="140" pos:column="32">Random</name><argument_list pos:line="140" pos:column="38">(<argument><expr><name pos:line="140" pos:column="39">ts</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="43">r</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="140" pos:column="46">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="143" pos:column="17">public</specifier> <specifier pos:line="143" pos:column="24">static</specifier> <name pos:line="143" pos:column="31">T</name></type> <name><name pos:line="143" pos:column="33">RandomOrDefault</name><argument_list pos:line="143" pos:column="48">&lt;<argument><name pos:line="143" pos:column="49">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="143" pos:column="51">(<param><decl><type><name pos:line="143" pos:column="52">this</name> <name><name pos:line="143" pos:column="57">IEnumerable</name><argument_list pos:line="143" pos:column="68">&lt;<argument><name pos:line="143" pos:column="69">T</name></argument>&gt;</argument_list></name></type> <name pos:line="143" pos:column="72">ts</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="76">MersenneTwister</name></type> <name pos:line="143" pos:column="92">r</name></decl></param>)</parameter_list>
		<block pos:line="144" pos:column="17">{
			<return pos:line="145" pos:column="25">return <expr><call><name pos:line="145" pos:column="32">Random</name><argument_list pos:line="145" pos:column="38">(<argument><expr><name pos:line="145" pos:column="39">ts</name></expr></argument>, <argument><expr><name pos:line="145" pos:column="43">r</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="145" pos:column="46">false</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="148" pos:column="17">static</specifier> <name pos:line="148" pos:column="24">T</name></type> <name><name pos:line="148" pos:column="26">Random</name><argument_list pos:line="148" pos:column="32">&lt;<argument><name pos:line="148" pos:column="33">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="148" pos:column="35">(<param><decl><type><name><name pos:line="148" pos:column="36">IEnumerable</name><argument_list pos:line="148" pos:column="47">&lt;<argument><name pos:line="148" pos:column="48">T</name></argument>&gt;</argument_list></name></type> <name pos:line="148" pos:column="51">ts</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="55">MersenneTwister</name></type> <name pos:line="148" pos:column="71">r</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="74">bool</name></type> <name pos:line="148" pos:column="79">throws</name></decl></param>)</parameter_list>
		<block pos:line="149" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="150" pos:column="25">var</name></type> <name pos:line="150" pos:column="29">xs</name> <init pos:line="150" pos:column="32">= <expr><name pos:line="150" pos:column="34">ts</name> <op:operator pos:line="150" pos:column="37">as</op:operator> <name><name pos:line="150" pos:column="40">ICollection</name><argument_list pos:line="150" pos:column="51">&lt;<argument><name pos:line="150" pos:column="52">T</name></argument>&gt;</argument_list></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="151" pos:column="25">xs</name> <op:operator pos:line="151" pos:column="28">=</op:operator> <name pos:line="151" pos:column="30">xs</name> <op:operator pos:line="151" pos:column="33">??</op:operator> <call><name><name pos:line="151" pos:column="36">ts</name><op:operator pos:line="151" pos:column="38">.</op:operator><name pos:line="151" pos:column="39">ToList</name></name><argument_list pos:line="151" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="152" pos:column="25">if <condition pos:line="152" pos:column="28">(<expr><name><name pos:line="152" pos:column="29">xs</name><op:operator pos:line="152" pos:column="31">.</op:operator><name pos:line="152" pos:column="32">Count</name></name> <op:operator pos:line="152" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="152" pos:column="41">0</lit:literal></expr>)</condition><then pos:line="152" pos:column="43">
			<block pos:line="153" pos:column="25">{
				<if pos:line="154" pos:column="33">if <condition pos:line="154" pos:column="36">(<expr><name pos:line="154" pos:column="37">throws</name></expr>)</condition><then pos:line="154" pos:column="44">
					<throw pos:line="155" pos:column="41">throw <expr><op:operator pos:line="155" pos:column="47">new</op:operator> <call><name pos:line="155" pos:column="51">ArgumentException</name><argument_list pos:line="155" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="69">"Collection must not be empty."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="155" pos:column="102">"ts"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then>
				<else pos:line="156" pos:column="33">else
					<return pos:line="157" pos:column="41">return <expr><call><name pos:line="157" pos:column="48">default</name><argument_list pos:line="157" pos:column="55">(<argument><expr><name pos:line="157" pos:column="56">T</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
			}</block></then>
			<else pos:line="159" pos:column="25">else
				<return pos:line="160" pos:column="33">return <expr><call><name><name pos:line="160" pos:column="40">xs</name><op:operator pos:line="160" pos:column="42">.</op:operator><name pos:line="160" pos:column="43">ElementAt</name></name><argument_list pos:line="160" pos:column="52">(<argument><expr><call><name><name pos:line="160" pos:column="53">r</name><op:operator pos:line="160" pos:column="54">.</op:operator><name pos:line="160" pos:column="55">Next</name></name><argument_list pos:line="160" pos:column="59">(<argument><expr><name><name pos:line="160" pos:column="60">xs</name><op:operator pos:line="160" pos:column="62">.</op:operator><name pos:line="160" pos:column="63">Count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
		}</block></function>

		<function><type><specifier pos:line="163" pos:column="17">public</specifier> <specifier pos:line="163" pos:column="24">static</specifier> <name pos:line="163" pos:column="31">float</name></type> <name pos:line="163" pos:column="37">Product</name><parameter_list pos:line="163" pos:column="44">(<param><decl><type><name pos:line="163" pos:column="45">this</name> <name><name pos:line="163" pos:column="50">IEnumerable</name><argument_list pos:line="163" pos:column="61">&lt;<argument><name pos:line="163" pos:column="62">float</name></argument>&gt;</argument_list></name></type> <name pos:line="163" pos:column="69">xs</name></decl></param>)</parameter_list>
		<block pos:line="164" pos:column="17">{
			<return pos:line="165" pos:column="25">return <expr><call><name><name pos:line="165" pos:column="32">xs</name><op:operator pos:line="165" pos:column="34">.</op:operator><name pos:line="165" pos:column="35">Aggregate</name></name><argument_list pos:line="165" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="165" pos:column="45">1f</lit:literal></expr></argument>, <argument><expr><lambda><parameter_list pos:line="165" pos:column="49">(<param><decl><name pos:line="165" pos:column="50">a</name></decl></param>, <param><decl><name pos:line="165" pos:column="53">x</name></decl></param>)</parameter_list> <op:operator pos:line="165" pos:column="56">=&gt;</op:operator> <name pos:line="165" pos:column="59">a</name> <op:operator pos:line="165" pos:column="61">*</op:operator> <name pos:line="165" pos:column="63">x</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="168" pos:column="17">public</specifier> <specifier pos:line="168" pos:column="24">static</specifier> <name><name pos:line="168" pos:column="31">IEnumerable</name><argument_list pos:line="168" pos:column="42">&lt;<argument><name pos:line="168" pos:column="43">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="168" pos:column="46">SymmetricDifference</name><argument_list pos:line="168" pos:column="65">&lt;<argument><name pos:line="168" pos:column="66">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="168" pos:column="68">(<param><decl><type><name pos:line="168" pos:column="69">this</name> <name><name pos:line="168" pos:column="74">IEnumerable</name><argument_list pos:line="168" pos:column="85">&lt;<argument><name pos:line="168" pos:column="86">T</name></argument>&gt;</argument_list></name></type> <name pos:line="168" pos:column="89">xs</name></decl></param>, <param><decl><type><name><name pos:line="168" pos:column="93">IEnumerable</name><argument_list pos:line="168" pos:column="104">&lt;<argument><name pos:line="168" pos:column="105">T</name></argument>&gt;</argument_list></name></type> <name pos:line="168" pos:column="108">ys</name></decl></param>)</parameter_list>
		<block pos:line="169" pos:column="17">{
			<comment type="line" pos:line="170" pos:column="25">// this is probably a shockingly-slow way to do this, but it's concise.</comment>
			<return pos:line="171" pos:column="25">return <expr><call><name><name pos:line="171" pos:column="32">xs</name><op:operator pos:line="171" pos:column="34">.</op:operator><name pos:line="171" pos:column="35">Except</name></name><argument_list pos:line="171" pos:column="41">(<argument><expr><name pos:line="171" pos:column="42">ys</name></expr></argument>)</argument_list></call><op:operator pos:line="171" pos:column="45">.</op:operator><call><name pos:line="171" pos:column="46">Concat</name><argument_list pos:line="171" pos:column="52">(<argument><expr><call><name><name pos:line="171" pos:column="53">ys</name><op:operator pos:line="171" pos:column="55">.</op:operator><name pos:line="171" pos:column="56">Except</name></name><argument_list pos:line="171" pos:column="62">(<argument><expr><name pos:line="171" pos:column="63">xs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="174" pos:column="17">public</specifier> <specifier pos:line="174" pos:column="24">static</specifier> <name><name pos:line="174" pos:column="31">IEnumerable</name><argument_list pos:line="174" pos:column="42">&lt;<argument><name pos:line="174" pos:column="43">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="174" pos:column="46">Iterate</name><argument_list pos:line="174" pos:column="53">&lt;<argument><name pos:line="174" pos:column="54">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="174" pos:column="56">(<param><decl><type><name pos:line="174" pos:column="57">this</name> <name pos:line="174" pos:column="62">T</name></type> <name pos:line="174" pos:column="64">t</name></decl></param>, <param><decl><type><name><name pos:line="174" pos:column="67">Func</name><argument_list pos:line="174" pos:column="71">&lt;<argument><name pos:line="174" pos:column="72">T</name></argument>, <argument><name pos:line="174" pos:column="75">T</name></argument>&gt;</argument_list></name></type> <name pos:line="174" pos:column="78">f</name></decl></param>)</parameter_list>
		<block pos:line="175" pos:column="17">{
			<for pos:line="176" pos:column="25">for (<init pos:line="176" pos:column="30">;</init><condition pos:line="176" pos:column="31">;</condition><incr/>) <block pos:line="176" pos:column="34">{ <return><specifier pos:line="176" pos:column="36">yield</specifier> return <expr><name pos:line="176" pos:column="49">t</name></expr>;</return> <expr_stmt><expr><name pos:line="176" pos:column="52">t</name> <op:operator pos:line="176" pos:column="54">=</op:operator> <call><name pos:line="176" pos:column="56">f</name><argument_list pos:line="176" pos:column="57">(<argument><expr><name pos:line="176" pos:column="58">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for>
		}</block></function>

		<function><type><specifier pos:line="179" pos:column="17">public</specifier> <specifier pos:line="179" pos:column="24">static</specifier> <name pos:line="179" pos:column="31">T</name></type> <name><name pos:line="179" pos:column="33">MinBy</name><argument_list pos:line="179" pos:column="38">&lt;<argument><name pos:line="179" pos:column="39">T</name></argument>, <argument><name pos:line="179" pos:column="42">U</name></argument>&gt;</argument_list></name><parameter_list pos:line="179" pos:column="44">(<param><decl><type><name pos:line="179" pos:column="45">this</name> <name><name pos:line="179" pos:column="50">IEnumerable</name><argument_list pos:line="179" pos:column="61">&lt;<argument><name pos:line="179" pos:column="62">T</name></argument>&gt;</argument_list></name></type> <name pos:line="179" pos:column="65">ts</name></decl></param>, <param><decl><type><name><name pos:line="179" pos:column="69">Func</name><argument_list pos:line="179" pos:column="73">&lt;<argument><name pos:line="179" pos:column="74">T</name></argument>, <argument><name pos:line="179" pos:column="77">U</name></argument>&gt;</argument_list></name></type> <name pos:line="179" pos:column="80">selector</name></decl></param>)</parameter_list>
		<block pos:line="180" pos:column="17">{
			<return pos:line="181" pos:column="25">return <expr><call><name><name pos:line="181" pos:column="32">ts</name><op:operator pos:line="181" pos:column="34">.</op:operator><name pos:line="181" pos:column="35">CompareBy</name></name><argument_list pos:line="181" pos:column="44">(<argument><expr><name pos:line="181" pos:column="45">selector</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="181" pos:column="55">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="181" pos:column="58">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="184" pos:column="17">public</specifier> <specifier pos:line="184" pos:column="24">static</specifier> <name pos:line="184" pos:column="31">T</name></type> <name><name pos:line="184" pos:column="33">MaxBy</name><argument_list pos:line="184" pos:column="38">&lt;<argument><name pos:line="184" pos:column="39">T</name></argument>, <argument><name pos:line="184" pos:column="42">U</name></argument>&gt;</argument_list></name><parameter_list pos:line="184" pos:column="44">(<param><decl><type><name pos:line="184" pos:column="45">this</name> <name><name pos:line="184" pos:column="50">IEnumerable</name><argument_list pos:line="184" pos:column="61">&lt;<argument><name pos:line="184" pos:column="62">T</name></argument>&gt;</argument_list></name></type> <name pos:line="184" pos:column="65">ts</name></decl></param>, <param><decl><type><name><name pos:line="184" pos:column="69">Func</name><argument_list pos:line="184" pos:column="73">&lt;<argument><name pos:line="184" pos:column="74">T</name></argument>, <argument><name pos:line="184" pos:column="77">U</name></argument>&gt;</argument_list></name></type> <name pos:line="184" pos:column="80">selector</name></decl></param>)</parameter_list>
		<block pos:line="185" pos:column="17">{
			<return pos:line="186" pos:column="25">return <expr><call><name><name pos:line="186" pos:column="32">ts</name><op:operator pos:line="186" pos:column="34">.</op:operator><name pos:line="186" pos:column="35">CompareBy</name></name><argument_list pos:line="186" pos:column="44">(<argument><expr><name pos:line="186" pos:column="45">selector</name></expr></argument>, <argument><expr><op:operator pos:line="186" pos:column="55">-</op:operator><lit:literal type="number" pos:line="186" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="186" pos:column="59">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="189" pos:column="17">public</specifier> <specifier pos:line="189" pos:column="24">static</specifier> <name pos:line="189" pos:column="31">T</name></type> <name><name pos:line="189" pos:column="33">MinByOrDefault</name><argument_list pos:line="189" pos:column="47">&lt;<argument><name pos:line="189" pos:column="48">T</name></argument>, <argument><name pos:line="189" pos:column="51">U</name></argument>&gt;</argument_list></name><parameter_list pos:line="189" pos:column="53">(<param><decl><type><name pos:line="189" pos:column="54">this</name> <name><name pos:line="189" pos:column="59">IEnumerable</name><argument_list pos:line="189" pos:column="70">&lt;<argument><name pos:line="189" pos:column="71">T</name></argument>&gt;</argument_list></name></type> <name pos:line="189" pos:column="74">ts</name></decl></param>, <param><decl><type><name><name pos:line="189" pos:column="78">Func</name><argument_list pos:line="189" pos:column="82">&lt;<argument><name pos:line="189" pos:column="83">T</name></argument>, <argument><name pos:line="189" pos:column="86">U</name></argument>&gt;</argument_list></name></type> <name pos:line="189" pos:column="89">selector</name></decl></param>)</parameter_list>
		<block pos:line="190" pos:column="17">{
			<return pos:line="191" pos:column="25">return <expr><call><name><name pos:line="191" pos:column="32">ts</name><op:operator pos:line="191" pos:column="34">.</op:operator><name pos:line="191" pos:column="35">CompareBy</name></name><argument_list pos:line="191" pos:column="44">(<argument><expr><name pos:line="191" pos:column="45">selector</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="191" pos:column="55">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="191" pos:column="58">false</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="194" pos:column="17">public</specifier> <specifier pos:line="194" pos:column="24">static</specifier> <name pos:line="194" pos:column="31">T</name></type> <name><name pos:line="194" pos:column="33">MaxByOrDefault</name><argument_list pos:line="194" pos:column="47">&lt;<argument><name pos:line="194" pos:column="48">T</name></argument>, <argument><name pos:line="194" pos:column="51">U</name></argument>&gt;</argument_list></name><parameter_list pos:line="194" pos:column="53">(<param><decl><type><name pos:line="194" pos:column="54">this</name> <name><name pos:line="194" pos:column="59">IEnumerable</name><argument_list pos:line="194" pos:column="70">&lt;<argument><name pos:line="194" pos:column="71">T</name></argument>&gt;</argument_list></name></type> <name pos:line="194" pos:column="74">ts</name></decl></param>, <param><decl><type><name><name pos:line="194" pos:column="78">Func</name><argument_list pos:line="194" pos:column="82">&lt;<argument><name pos:line="194" pos:column="83">T</name></argument>, <argument><name pos:line="194" pos:column="86">U</name></argument>&gt;</argument_list></name></type> <name pos:line="194" pos:column="89">selector</name></decl></param>)</parameter_list>
		<block pos:line="195" pos:column="17">{
			<return pos:line="196" pos:column="25">return <expr><call><name><name pos:line="196" pos:column="32">ts</name><op:operator pos:line="196" pos:column="34">.</op:operator><name pos:line="196" pos:column="35">CompareBy</name></name><argument_list pos:line="196" pos:column="44">(<argument><expr><name pos:line="196" pos:column="45">selector</name></expr></argument>, <argument><expr><op:operator pos:line="196" pos:column="55">-</op:operator><lit:literal type="number" pos:line="196" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="196" pos:column="59">false</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="199" pos:column="17">static</specifier> <name pos:line="199" pos:column="24">T</name></type> <name><name pos:line="199" pos:column="26">CompareBy</name><argument_list pos:line="199" pos:column="35">&lt;<argument><name pos:line="199" pos:column="36">T</name></argument>, <argument><name pos:line="199" pos:column="39">U</name></argument>&gt;</argument_list></name><parameter_list pos:line="199" pos:column="41">(<param><decl><type><name pos:line="199" pos:column="42">this</name> <name><name pos:line="199" pos:column="47">IEnumerable</name><argument_list pos:line="199" pos:column="58">&lt;<argument><name pos:line="199" pos:column="59">T</name></argument>&gt;</argument_list></name></type> <name pos:line="199" pos:column="62">ts</name></decl></param>, <param><decl><type><name><name pos:line="199" pos:column="66">Func</name><argument_list pos:line="199" pos:column="70">&lt;<argument><name pos:line="199" pos:column="71">T</name></argument>, <argument><name pos:line="199" pos:column="74">U</name></argument>&gt;</argument_list></name></type> <name pos:line="199" pos:column="77">selector</name></decl></param>, <param><decl><type><name pos:line="199" pos:column="87">int</name></type> <name pos:line="199" pos:column="91">modifier</name></decl></param>, <param><decl><type><name pos:line="199" pos:column="101">bool</name></type> <name pos:line="199" pos:column="106">throws</name></decl></param>)</parameter_list>
		<block pos:line="200" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="201" pos:column="25">var</name></type> <name pos:line="201" pos:column="29">comparer</name> <init pos:line="201" pos:column="38">= <expr><name><name><name pos:line="201" pos:column="40">Comparer</name><argument_list pos:line="201" pos:column="48">&lt;<argument><name pos:line="201" pos:column="49">U</name></argument>&gt;</argument_list></name><op:operator pos:line="201" pos:column="51">.</op:operator><name pos:line="201" pos:column="52">Default</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="202" pos:column="25">T</name></type> <name pos:line="202" pos:column="27">t</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="203" pos:column="25">U</name></type> <name pos:line="203" pos:column="27">u</name></decl>;</decl_stmt>
			<using pos:line="204" pos:column="25">using (<decl><type><name pos:line="204" pos:column="32">var</name></type> <name pos:line="204" pos:column="36">e</name> <init pos:line="204" pos:column="38">= <expr><call><name><name pos:line="204" pos:column="40">ts</name><op:operator pos:line="204" pos:column="42">.</op:operator><name pos:line="204" pos:column="43">GetEnumerator</name></name><argument_list pos:line="204" pos:column="56">()</argument_list></call></expr></init></decl>)
			<block pos:line="205" pos:column="25">{
				<if pos:line="206" pos:column="33">if <condition pos:line="206" pos:column="36">(<expr><op:operator pos:line="206" pos:column="37">!</op:operator><call><name><name pos:line="206" pos:column="38">e</name><op:operator pos:line="206" pos:column="39">.</op:operator><name pos:line="206" pos:column="40">MoveNext</name></name><argument_list pos:line="206" pos:column="48">()</argument_list></call></expr>)</condition><then pos:line="206" pos:column="51">
					<if pos:line="207" pos:column="41">if <condition pos:line="207" pos:column="44">(<expr><name pos:line="207" pos:column="45">throws</name></expr>)</condition><then pos:line="207" pos:column="52">
						<throw pos:line="208" pos:column="49">throw <expr><op:operator pos:line="208" pos:column="55">new</op:operator> <call><name pos:line="208" pos:column="59">ArgumentException</name><argument_list pos:line="208" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="77">"Collection must not be empty."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="208" pos:column="110">"ts"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then>
					<else pos:line="209" pos:column="41">else
						<return pos:line="210" pos:column="49">return <expr><call><name pos:line="210" pos:column="56">default</name><argument_list pos:line="210" pos:column="63">(<argument><expr><name pos:line="210" pos:column="64">T</name></expr></argument>)</argument_list></call></expr>;</return></else></if></then></if>
				<expr_stmt><expr><name pos:line="211" pos:column="33">t</name> <op:operator pos:line="211" pos:column="35">=</op:operator> <name><name pos:line="211" pos:column="37">e</name><op:operator pos:line="211" pos:column="38">.</op:operator><name pos:line="211" pos:column="39">Current</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="212" pos:column="33">u</name> <op:operator pos:line="212" pos:column="35">=</op:operator> <call><name pos:line="212" pos:column="37">selector</name><argument_list pos:line="212" pos:column="45">(<argument><expr><name pos:line="212" pos:column="46">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while pos:line="213" pos:column="33">while <condition pos:line="213" pos:column="39">(<expr><call><name><name pos:line="213" pos:column="40">e</name><op:operator pos:line="213" pos:column="41">.</op:operator><name pos:line="213" pos:column="42">MoveNext</name></name><argument_list pos:line="213" pos:column="50">()</argument_list></call></expr>)</condition>
				<block pos:line="214" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="215" pos:column="41">var</name></type> <name pos:line="215" pos:column="45">nextT</name> <init pos:line="215" pos:column="51">= <expr><name><name pos:line="215" pos:column="53">e</name><op:operator pos:line="215" pos:column="54">.</op:operator><name pos:line="215" pos:column="55">Current</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="216" pos:column="41">var</name></type> <name pos:line="216" pos:column="45">nextU</name> <init pos:line="216" pos:column="51">= <expr><call><name pos:line="216" pos:column="53">selector</name><argument_list pos:line="216" pos:column="61">(<argument><expr><name pos:line="216" pos:column="62">nextT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="217" pos:column="41">if <condition pos:line="217" pos:column="44">(<expr><call><name><name pos:line="217" pos:column="45">comparer</name><op:operator pos:line="217" pos:column="53">.</op:operator><name pos:line="217" pos:column="54">Compare</name></name><argument_list pos:line="217" pos:column="61">(<argument><expr><name pos:line="217" pos:column="62">nextU</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="69">u</name></expr></argument>)</argument_list></call> <op:operator pos:line="217" pos:column="72">*</op:operator> <name pos:line="217" pos:column="74">modifier</name> <op:operator pos:line="217" pos:column="83">&lt;</op:operator> <lit:literal type="number" pos:line="217" pos:column="85">0</lit:literal></expr>)</condition><then pos:line="217" pos:column="87">
					<block pos:line="218" pos:column="41">{
						<expr_stmt><expr><name pos:line="219" pos:column="49">t</name> <op:operator pos:line="219" pos:column="51">=</op:operator> <name pos:line="219" pos:column="53">nextT</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="220" pos:column="49">u</name> <op:operator pos:line="220" pos:column="51">=</op:operator> <name pos:line="220" pos:column="53">nextU</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></while>

				<return pos:line="224" pos:column="33">return <expr><name pos:line="224" pos:column="40">t</name></expr>;</return>
			}</block></using>
		}</block></function>

		<function><type><specifier pos:line="228" pos:column="17">public</specifier> <specifier pos:line="228" pos:column="24">static</specifier> <name pos:line="228" pos:column="31">int</name></type> <name pos:line="228" pos:column="35">NextPowerOf2</name><parameter_list pos:line="228" pos:column="47">(<param><decl><type><name pos:line="228" pos:column="48">int</name></type> <name pos:line="228" pos:column="52">v</name></decl></param>)</parameter_list>
		<block pos:line="229" pos:column="17">{
			<expr_stmt><expr><op:operator pos:line="230" pos:column="25">--</op:operator><name pos:line="230" pos:column="27">v</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="231" pos:column="25">v</name> <op:operator pos:line="231" pos:column="27">|=</op:operator> <name pos:line="231" pos:column="30">v</name> <op:operator pos:line="231" pos:column="32">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="231" pos:column="35">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="232" pos:column="25">v</name> <op:operator pos:line="232" pos:column="27">|=</op:operator> <name pos:line="232" pos:column="30">v</name> <op:operator pos:line="232" pos:column="32">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="232" pos:column="35">2</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="233" pos:column="25">v</name> <op:operator pos:line="233" pos:column="27">|=</op:operator> <name pos:line="233" pos:column="30">v</name> <op:operator pos:line="233" pos:column="32">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="233" pos:column="35">4</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="234" pos:column="25">v</name> <op:operator pos:line="234" pos:column="27">|=</op:operator> <name pos:line="234" pos:column="30">v</name> <op:operator pos:line="234" pos:column="32">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="234" pos:column="35">8</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="235" pos:column="25">++</op:operator><name pos:line="235" pos:column="27">v</name></expr>;</expr_stmt>
			<return pos:line="236" pos:column="25">return <expr><name pos:line="236" pos:column="32">v</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="239" pos:column="17">public</specifier> <specifier pos:line="239" pos:column="24">static</specifier> <name pos:line="239" pos:column="31">bool</name></type> <name pos:line="239" pos:column="36">IsPowerOf2</name><parameter_list pos:line="239" pos:column="46">(<param><decl><type><name pos:line="239" pos:column="47">int</name></type> <name pos:line="239" pos:column="51">v</name></decl></param>)</parameter_list>
		<block pos:line="240" pos:column="17">{
			<return pos:line="241" pos:column="25">return <expr><op:operator pos:line="241" pos:column="32">(</op:operator><name pos:line="241" pos:column="33">v</name> <op:operator pos:line="241" pos:column="35">&amp;</op:operator> <op:operator pos:line="241" pos:column="37">(</op:operator><name pos:line="241" pos:column="38">v</name> <op:operator pos:line="241" pos:column="40">-</op:operator> <lit:literal type="number" pos:line="241" pos:column="42">1</lit:literal><op:operator pos:line="241" pos:column="43">)</op:operator><op:operator pos:line="241" pos:column="44">)</op:operator> <op:operator pos:line="241" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="241" pos:column="49">0</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="244" pos:column="17">public</specifier> <specifier pos:line="244" pos:column="24">static</specifier> <name pos:line="244" pos:column="31">Size</name></type> <name pos:line="244" pos:column="36">NextPowerOf2</name><parameter_list pos:line="244" pos:column="48">(<param><decl><type><name pos:line="244" pos:column="49">this</name> <name pos:line="244" pos:column="54">Size</name></type> <name pos:line="244" pos:column="59">s</name></decl></param>)</parameter_list> <block pos:line="244" pos:column="62">{ <return pos:line="244" pos:column="64">return <expr><op:operator pos:line="244" pos:column="71">new</op:operator> <call><name pos:line="244" pos:column="75">Size</name><argument_list pos:line="244" pos:column="79">(<argument><expr><call><name pos:line="244" pos:column="80">NextPowerOf2</name><argument_list pos:line="244" pos:column="92">(<argument><expr><name><name pos:line="244" pos:column="93">s</name><op:operator pos:line="244" pos:column="94">.</op:operator><name pos:line="244" pos:column="95">Width</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="244" pos:column="103">NextPowerOf2</name><argument_list pos:line="244" pos:column="115">(<argument><expr><name><name pos:line="244" pos:column="116">s</name><op:operator pos:line="244" pos:column="117">.</op:operator><name pos:line="244" pos:column="118">Height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<enum><specifier pos:line="246" pos:column="17">public</specifier> enum <macro><name pos:line="246" pos:column="29">ISqrtRoundMode</name></macro> <block pos:line="246" pos:column="44">{ <decl><name pos:line="246" pos:column="46">Floor</name></decl><op:operator pos:line="246" pos:column="51">,</op:operator> <decl><name pos:line="246" pos:column="53">Nearest</name></decl><op:operator pos:line="246" pos:column="60">,</op:operator> <decl><name pos:line="246" pos:column="62">Ceiling</name></decl> }</block>
		<decl pos:line="247" pos:column="17">public static <name pos:line="247" pos:column="31">int</name> <name pos:line="247" pos:column="35">ISqrt</name><argument_list pos:line="247" pos:column="40">(<argument><expr><name pos:line="247" pos:column="41">int</name> <name pos:line="247" pos:column="45">number</name></expr></argument>, <argument><expr><name pos:line="247" pos:column="53">ISqrtRoundMode</name> <name pos:line="247" pos:column="68">round</name> <op:operator pos:line="247" pos:column="74">=</op:operator> <name><name pos:line="247" pos:column="76">ISqrtRoundMode</name><op:operator pos:line="247" pos:column="90">.</op:operator><name pos:line="247" pos:column="91">Floor</name></name></expr></argument>)</argument_list>
		<block pos:line="248" pos:column="17">{
			<if pos:line="249" pos:column="25">if <condition pos:line="249" pos:column="28">(<expr><name pos:line="249" pos:column="29">number</name> <op:operator pos:line="249" pos:column="36">&lt;</op:operator> <lit:literal type="number" pos:line="249" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="249" pos:column="40">
				<throw pos:line="250" pos:column="33">throw <expr><op:operator pos:line="250" pos:column="39">new</op:operator> <call><name pos:line="250" pos:column="43">InvalidOperationException</name><argument_list pos:line="250" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="250" pos:column="69">"Attempted to calculate the square root of a negative integer: {0}"</lit:literal><op:operator pos:line="250" pos:column="136">.</op:operator><call><name pos:line="250" pos:column="137">F</name><argument_list pos:line="250" pos:column="138">(<argument><expr><name pos:line="250" pos:column="139">number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<return pos:line="252" pos:column="25">return <expr><op:operator pos:line="252" pos:column="32">(</op:operator><name pos:line="252" pos:column="33">int</name><op:operator pos:line="252" pos:column="36">)</op:operator><call><name pos:line="252" pos:column="37">ISqrt</name><argument_list pos:line="252" pos:column="42">(<argument><expr><op:operator pos:line="252" pos:column="43">(</op:operator><name pos:line="252" pos:column="44">uint</name><op:operator pos:line="252" pos:column="48">)</op:operator><name pos:line="252" pos:column="49">number</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="57">round</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></decl>

		<decl pos:line="255" pos:column="17">public static <name pos:line="255" pos:column="31">uint</name> <name pos:line="255" pos:column="36">ISqrt</name><argument_list pos:line="255" pos:column="41">(<argument><expr><name pos:line="255" pos:column="42">uint</name> <name pos:line="255" pos:column="47">number</name></expr></argument>, <argument><expr><name pos:line="255" pos:column="55">ISqrtRoundMode</name> <name pos:line="255" pos:column="70">round</name> <op:operator pos:line="255" pos:column="76">=</op:operator> <name><name pos:line="255" pos:column="78">ISqrtRoundMode</name><op:operator pos:line="255" pos:column="92">.</op:operator><name pos:line="255" pos:column="93">Floor</name></name></expr></argument>)</argument_list>
		<block pos:line="256" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="257" pos:column="25">var</name></type> <name pos:line="257" pos:column="29">divisor</name> <init pos:line="257" pos:column="37">= <expr><lit:literal type="number" pos:line="257" pos:column="39">1U</lit:literal> <op:operator pos:line="257" pos:column="42">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="257" pos:column="45">30</lit:literal></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="259" pos:column="25">var</name></type> <name pos:line="259" pos:column="29">root</name> <init pos:line="259" pos:column="34">= <expr><lit:literal type="number" pos:line="259" pos:column="36">0U</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="260" pos:column="25">var</name></type> <name pos:line="260" pos:column="29">remainder</name> <init pos:line="260" pos:column="39">= <expr><name pos:line="260" pos:column="41">number</name></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:line="262" pos:column="25">// Find the highest term in the divisor</comment>
			<while pos:line="263" pos:column="25">while <condition pos:line="263" pos:column="31">(<expr><name pos:line="263" pos:column="32">divisor</name> <op:operator pos:line="263" pos:column="40">&gt;</op:operator> <name pos:line="263" pos:column="42">number</name></expr>)</condition>
				<expr_stmt><expr><name pos:line="264" pos:column="33">divisor</name> <op:operator pos:line="264" pos:column="41">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="264" pos:column="45">2</lit:literal></expr>;</expr_stmt></while>

			<comment type="line" pos:line="266" pos:column="25">// Evaluate the root, two bits at a time</comment>
			<while pos:line="267" pos:column="25">while <condition pos:line="267" pos:column="31">(<expr><name pos:line="267" pos:column="32">divisor</name> <op:operator pos:line="267" pos:column="40">!=</op:operator> <lit:literal type="number" pos:line="267" pos:column="43">0</lit:literal></expr>)</condition>
			<block pos:line="268" pos:column="25">{
				<if pos:line="269" pos:column="33">if <condition pos:line="269" pos:column="36">(<expr><name pos:line="269" pos:column="37">root</name> <op:operator pos:line="269" pos:column="42">+</op:operator> <name pos:line="269" pos:column="44">divisor</name> <op:operator pos:line="269" pos:column="52">&lt;=</op:operator> <name pos:line="269" pos:column="55">remainder</name></expr>)</condition><then pos:line="269" pos:column="65">
				<block pos:line="270" pos:column="33">{
					<expr_stmt><expr><name pos:line="271" pos:column="41">remainder</name> <op:operator pos:line="271" pos:column="51">-=</op:operator> <name pos:line="271" pos:column="54">root</name> <op:operator pos:line="271" pos:column="59">+</op:operator> <name pos:line="271" pos:column="61">divisor</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="272" pos:column="41">root</name> <op:operator pos:line="272" pos:column="46">+=</op:operator> <lit:literal type="number" pos:line="272" pos:column="49">2</lit:literal> <op:operator pos:line="272" pos:column="51">*</op:operator> <name pos:line="272" pos:column="53">divisor</name></expr>;</expr_stmt>
				}</block></then></if>

				<expr_stmt><expr><name pos:line="275" pos:column="33">root</name> <op:operator pos:line="275" pos:column="38">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="275" pos:column="42">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="276" pos:column="33">divisor</name> <op:operator pos:line="276" pos:column="41">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="276" pos:column="45">2</lit:literal></expr>;</expr_stmt>
			}</block></while>

			<comment type="line" pos:line="279" pos:column="25">// Adjust for other rounding modes</comment>
			<if pos:line="280" pos:column="25">if <condition pos:line="280" pos:column="28">(<expr><name pos:line="280" pos:column="29">round</name> <op:operator pos:line="280" pos:column="35">==</op:operator> <name><name pos:line="280" pos:column="38">ISqrtRoundMode</name><op:operator pos:line="280" pos:column="52">.</op:operator><name pos:line="280" pos:column="53">Nearest</name> <type:modifier pos:line="280" pos:column="61">&amp;&amp;</type:modifier></name> <name pos:line="280" pos:column="64">remainder</name> <op:operator pos:line="280" pos:column="74">&gt;</op:operator> <name pos:line="280" pos:column="76">root</name></expr>)</condition><then pos:line="280" pos:column="81">
				<expr_stmt><expr><name pos:line="281" pos:column="33">root</name> <op:operator pos:line="281" pos:column="38">+=</op:operator> <lit:literal type="number" pos:line="281" pos:column="41">1</lit:literal></expr>;</expr_stmt></then>
			<else pos:line="282" pos:column="25">else <if pos:line="282" pos:column="30">if <condition pos:line="282" pos:column="33">(<expr><name pos:line="282" pos:column="34">round</name> <op:operator pos:line="282" pos:column="40">==</op:operator> <name><name pos:line="282" pos:column="43">ISqrtRoundMode</name><op:operator pos:line="282" pos:column="57">.</op:operator><name pos:line="282" pos:column="58">Ceiling</name> <type:modifier pos:line="282" pos:column="66">&amp;&amp;</type:modifier></name> <name pos:line="282" pos:column="69">root</name> <op:operator pos:line="282" pos:column="74">*</op:operator> <name pos:line="282" pos:column="76">root</name> <op:operator pos:line="282" pos:column="81">&lt;</op:operator> <name pos:line="282" pos:column="83">number</name></expr>)</condition><then pos:line="282" pos:column="90">
				<expr_stmt><expr><name pos:line="283" pos:column="33">root</name> <op:operator pos:line="283" pos:column="38">+=</op:operator> <lit:literal type="number" pos:line="283" pos:column="41">1</lit:literal></expr>;</expr_stmt></then></if></else></if>

			<return pos:line="285" pos:column="25">return <expr><name pos:line="285" pos:column="32">root</name></expr>;</return>
		}</block></decl>

		<decl pos:line="288" pos:column="17">public static <name pos:line="288" pos:column="31">long</name> <name pos:line="288" pos:column="36">ISqrt</name><argument_list pos:line="288" pos:column="41">(<argument><expr><name pos:line="288" pos:column="42">long</name> <name pos:line="288" pos:column="47">number</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="55">ISqrtRoundMode</name> <name pos:line="288" pos:column="70">round</name> <op:operator pos:line="288" pos:column="76">=</op:operator> <name><name pos:line="288" pos:column="78">ISqrtRoundMode</name><op:operator pos:line="288" pos:column="92">.</op:operator><name pos:line="288" pos:column="93">Floor</name></name></expr></argument>)</argument_list>
		<block pos:line="289" pos:column="17">{
			<if pos:line="290" pos:column="25">if <condition pos:line="290" pos:column="28">(<expr><name pos:line="290" pos:column="29">number</name> <op:operator pos:line="290" pos:column="36">&lt;</op:operator> <lit:literal type="number" pos:line="290" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="290" pos:column="40">
				<throw pos:line="291" pos:column="33">throw <expr><op:operator pos:line="291" pos:column="39">new</op:operator> <call><name pos:line="291" pos:column="43">InvalidOperationException</name><argument_list pos:line="291" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="291" pos:column="69">"Attempted to calculate the square root of a negative integer: {0}"</lit:literal><op:operator pos:line="291" pos:column="136">.</op:operator><call><name pos:line="291" pos:column="137">F</name><argument_list pos:line="291" pos:column="138">(<argument><expr><name pos:line="291" pos:column="139">number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<return pos:line="293" pos:column="25">return <expr><op:operator pos:line="293" pos:column="32">(</op:operator><name pos:line="293" pos:column="33">long</name><op:operator pos:line="293" pos:column="37">)</op:operator><call><name pos:line="293" pos:column="38">ISqrt</name><argument_list pos:line="293" pos:column="43">(<argument><expr><op:operator pos:line="293" pos:column="44">(</op:operator><name pos:line="293" pos:column="45">ulong</name><op:operator pos:line="293" pos:column="50">)</op:operator><name pos:line="293" pos:column="51">number</name></expr></argument>, <argument><expr><name pos:line="293" pos:column="59">round</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></decl>

		<decl pos:line="296" pos:column="17">public static <name pos:line="296" pos:column="31">ulong</name> <name pos:line="296" pos:column="37">ISqrt</name><argument_list pos:line="296" pos:column="42">(<argument><expr><name pos:line="296" pos:column="43">ulong</name> <name pos:line="296" pos:column="49">number</name></expr></argument>, <argument><expr><name pos:line="296" pos:column="57">ISqrtRoundMode</name> <name pos:line="296" pos:column="72">round</name> <op:operator pos:line="296" pos:column="78">=</op:operator> <name><name pos:line="296" pos:column="80">ISqrtRoundMode</name><op:operator pos:line="296" pos:column="94">.</op:operator><name pos:line="296" pos:column="95">Floor</name></name></expr></argument>)</argument_list>
		<block pos:line="297" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="298" pos:column="25">var</name></type> <name pos:line="298" pos:column="29">divisor</name> <init pos:line="298" pos:column="37">= <expr><lit:literal type="number" pos:line="298" pos:column="39">1UL</lit:literal> <op:operator pos:line="298" pos:column="43">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="298" pos:column="46">62</lit:literal></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="300" pos:column="25">var</name></type> <name pos:line="300" pos:column="29">root</name> <init pos:line="300" pos:column="34">= <expr><lit:literal type="number" pos:line="300" pos:column="36">0UL</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="301" pos:column="25">var</name></type> <name pos:line="301" pos:column="29">remainder</name> <init pos:line="301" pos:column="39">= <expr><name pos:line="301" pos:column="41">number</name></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:line="303" pos:column="25">// Find the highest term in the divisor</comment>
			<while pos:line="304" pos:column="25">while <condition pos:line="304" pos:column="31">(<expr><name pos:line="304" pos:column="32">divisor</name> <op:operator pos:line="304" pos:column="40">&gt;</op:operator> <name pos:line="304" pos:column="42">number</name></expr>)</condition>
				<expr_stmt><expr><name pos:line="305" pos:column="33">divisor</name> <op:operator pos:line="305" pos:column="41">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="305" pos:column="45">2</lit:literal></expr>;</expr_stmt></while>

			<comment type="line" pos:line="307" pos:column="25">// Evaluate the root, two bits at a time</comment>
			<while pos:line="308" pos:column="25">while <condition pos:line="308" pos:column="31">(<expr><name pos:line="308" pos:column="32">divisor</name> <op:operator pos:line="308" pos:column="40">!=</op:operator> <lit:literal type="number" pos:line="308" pos:column="43">0</lit:literal></expr>)</condition>
			<block pos:line="309" pos:column="25">{
				<if pos:line="310" pos:column="33">if <condition pos:line="310" pos:column="36">(<expr><name pos:line="310" pos:column="37">root</name> <op:operator pos:line="310" pos:column="42">+</op:operator> <name pos:line="310" pos:column="44">divisor</name> <op:operator pos:line="310" pos:column="52">&lt;=</op:operator> <name pos:line="310" pos:column="55">remainder</name></expr>)</condition><then pos:line="310" pos:column="65">
				<block pos:line="311" pos:column="33">{
					<expr_stmt><expr><name pos:line="312" pos:column="41">remainder</name> <op:operator pos:line="312" pos:column="51">-=</op:operator> <name pos:line="312" pos:column="54">root</name> <op:operator pos:line="312" pos:column="59">+</op:operator> <name pos:line="312" pos:column="61">divisor</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="313" pos:column="41">root</name> <op:operator pos:line="313" pos:column="46">+=</op:operator> <lit:literal type="number" pos:line="313" pos:column="49">2</lit:literal> <op:operator pos:line="313" pos:column="51">*</op:operator> <name pos:line="313" pos:column="53">divisor</name></expr>;</expr_stmt>
				}</block></then></if>

				<expr_stmt><expr><name pos:line="316" pos:column="33">root</name> <op:operator pos:line="316" pos:column="38">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="316" pos:column="42">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="317" pos:column="33">divisor</name> <op:operator pos:line="317" pos:column="41">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="317" pos:column="45">2</lit:literal></expr>;</expr_stmt>
			}</block></while>

			<comment type="line" pos:line="320" pos:column="25">// Adjust for other rounding modes</comment>
			<if pos:line="321" pos:column="25">if <condition pos:line="321" pos:column="28">(<expr><name pos:line="321" pos:column="29">round</name> <op:operator pos:line="321" pos:column="35">==</op:operator> <name><name pos:line="321" pos:column="38">ISqrtRoundMode</name><op:operator pos:line="321" pos:column="52">.</op:operator><name pos:line="321" pos:column="53">Nearest</name> <type:modifier pos:line="321" pos:column="61">&amp;&amp;</type:modifier></name> <name pos:line="321" pos:column="64">remainder</name> <op:operator pos:line="321" pos:column="74">&gt;</op:operator> <name pos:line="321" pos:column="76">root</name></expr>)</condition><then pos:line="321" pos:column="81">
				<expr_stmt><expr><name pos:line="322" pos:column="33">root</name> <op:operator pos:line="322" pos:column="38">+=</op:operator> <lit:literal type="number" pos:line="322" pos:column="41">1</lit:literal></expr>;</expr_stmt></then>
			<else pos:line="323" pos:column="25">else <if pos:line="323" pos:column="30">if <condition pos:line="323" pos:column="33">(<expr><name pos:line="323" pos:column="34">round</name> <op:operator pos:line="323" pos:column="40">==</op:operator> <name><name pos:line="323" pos:column="43">ISqrtRoundMode</name><op:operator pos:line="323" pos:column="57">.</op:operator><name pos:line="323" pos:column="58">Ceiling</name> <type:modifier pos:line="323" pos:column="66">&amp;&amp;</type:modifier></name> <name pos:line="323" pos:column="69">root</name> <op:operator pos:line="323" pos:column="74">*</op:operator> <name pos:line="323" pos:column="76">root</name> <op:operator pos:line="323" pos:column="81">&lt;</op:operator> <name pos:line="323" pos:column="83">number</name></expr>)</condition><then pos:line="323" pos:column="90">
				<expr_stmt><expr><name pos:line="324" pos:column="33">root</name> <op:operator pos:line="324" pos:column="38">+=</op:operator> <lit:literal type="number" pos:line="324" pos:column="41">1</lit:literal></expr>;</expr_stmt></then></if></else></if>

			<return pos:line="326" pos:column="25">return <expr><name pos:line="326" pos:column="32">root</name></expr>;</return>
		}</block></decl>

		<decl pos:line="329" pos:column="17">public static <name pos:line="329" pos:column="31">string</name> <name><name pos:line="329" pos:column="38">JoinWith</name><argument_list pos:line="329" pos:column="46">&lt;<argument><name pos:line="329" pos:column="47">T</name></argument>&gt;</argument_list></name><argument_list pos:line="329" pos:column="49">(<argument><expr><name pos:line="329" pos:column="50">this</name> <name><name pos:line="329" pos:column="55">IEnumerable</name><argument_list pos:line="329" pos:column="66">&lt;<argument><name pos:line="329" pos:column="67">T</name></argument>&gt;</argument_list></name> <name pos:line="329" pos:column="70">ts</name></expr></argument>, <argument><expr><name pos:line="329" pos:column="74">string</name> <name pos:line="329" pos:column="81">j</name></expr></argument>)</argument_list>
		<block pos:line="330" pos:column="17">{
			<return pos:line="331" pos:column="25">return <expr><call><name><name pos:line="331" pos:column="32">string</name><op:operator pos:line="331" pos:column="38">.</op:operator><name pos:line="331" pos:column="39">Join</name></name><argument_list pos:line="331" pos:column="43">(<argument><expr><name pos:line="331" pos:column="44">j</name></expr></argument>, <argument><expr><name pos:line="331" pos:column="47">ts</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></decl>

		<decl pos:line="334" pos:column="17">public static <name><name pos:line="334" pos:column="31">IEnumerable</name><argument_list pos:line="334" pos:column="42">&lt;<argument><name pos:line="334" pos:column="43">T</name></argument>&gt;</argument_list></name> <name><name pos:line="334" pos:column="46">Append</name><argument_list pos:line="334" pos:column="52">&lt;<argument><name pos:line="334" pos:column="53">T</name></argument>&gt;</argument_list></name><argument_list pos:line="334" pos:column="55">(<argument><expr><name pos:line="334" pos:column="56">this</name> <name><name pos:line="334" pos:column="61">IEnumerable</name><argument_list pos:line="334" pos:column="72">&lt;<argument><name pos:line="334" pos:column="73">T</name></argument>&gt;</argument_list></name> <name pos:line="334" pos:column="76">ts</name></expr></argument>, <argument><expr pos:line="334" pos:column="80">params <name><name pos:line="334" pos:column="87">T</name><index pos:line="334" pos:column="88">[]</index></name> <name pos:line="334" pos:column="91">moreTs</name></expr></argument>)</argument_list>
		<block pos:line="335" pos:column="17">{
			<return pos:line="336" pos:column="25">return <expr><call><name><name pos:line="336" pos:column="32">ts</name><op:operator pos:line="336" pos:column="34">.</op:operator><name pos:line="336" pos:column="35">Concat</name></name><argument_list pos:line="336" pos:column="41">(<argument><expr><name pos:line="336" pos:column="42">moreTs</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></decl>

		<decl pos:line="339" pos:column="17">public static <name><name pos:line="339" pos:column="31">HashSet</name><argument_list pos:line="339" pos:column="38">&lt;<argument><name pos:line="339" pos:column="39">T</name></argument>&gt;</argument_list></name> <name><name pos:line="339" pos:column="42">ToHashSet</name><argument_list pos:line="339" pos:column="51">&lt;<argument><name pos:line="339" pos:column="52">T</name></argument>&gt;</argument_list></name><argument_list pos:line="339" pos:column="54">(<argument><expr><name pos:line="339" pos:column="55">this</name> <name><name pos:line="339" pos:column="60">IEnumerable</name><argument_list pos:line="339" pos:column="71">&lt;<argument><name pos:line="339" pos:column="72">T</name></argument>&gt;</argument_list></name> <name pos:line="339" pos:column="75">source</name></expr></argument>)</argument_list>
		<block pos:line="340" pos:column="17">{
			<return pos:line="341" pos:column="25">return <expr><op:operator pos:line="341" pos:column="32">new</op:operator> <call><name><name pos:line="341" pos:column="36">HashSet</name><argument_list pos:line="341" pos:column="43">&lt;<argument><name pos:line="341" pos:column="44">T</name></argument>&gt;</argument_list></name><argument_list pos:line="341" pos:column="46">(<argument><expr><name pos:line="341" pos:column="47">source</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></decl>

		<decl pos:line="344" pos:column="17">public static <name><name pos:line="344" pos:column="31">Dictionary</name><argument_list pos:line="344" pos:column="41">&lt;<argument><name pos:line="344" pos:column="42">TKey</name></argument>, <argument><name pos:line="344" pos:column="48">TSource</name></argument>&gt;</argument_list></name> <name><name pos:line="344" pos:column="57">ToDictionaryWithConflictLog</name><argument_list pos:line="344" pos:column="84">&lt;<argument><name pos:line="344" pos:column="85">TSource</name></argument>, <argument><name pos:line="344" pos:column="94">TKey</name></argument>&gt;</argument_list></name><argument_list pos:line="344" pos:column="99">(
			<argument><expr><name pos:line="345" pos:column="25">this</name> <name><name pos:line="345" pos:column="30">IEnumerable</name><argument_list pos:line="345" pos:column="41">&lt;<argument><name pos:line="345" pos:column="42">TSource</name></argument>&gt;</argument_list></name> <name pos:line="345" pos:column="51">source</name></expr></argument>, <argument><expr><name><name pos:line="345" pos:column="59">Func</name><argument_list pos:line="345" pos:column="63">&lt;<argument><name pos:line="345" pos:column="64">TSource</name></argument>, <argument><name pos:line="345" pos:column="73">TKey</name></argument>&gt;</argument_list></name> <name pos:line="345" pos:column="79">keySelector</name></expr></argument>,
			<argument><expr><name pos:line="346" pos:column="25">string</name> <name pos:line="346" pos:column="32">debugName</name></expr></argument>, <argument><expr><name><name pos:line="346" pos:column="43">Func</name><argument_list pos:line="346" pos:column="47">&lt;<argument><name pos:line="346" pos:column="48">TKey</name></argument>, <argument><name pos:line="346" pos:column="54">string</name></argument>&gt;</argument_list></name> <name pos:line="346" pos:column="62">logKey</name></expr></argument>, <argument><expr><name><name pos:line="346" pos:column="70">Func</name><argument_list pos:line="346" pos:column="74">&lt;<argument><name pos:line="346" pos:column="75">TSource</name></argument>, <argument><name pos:line="346" pos:column="84">string</name></argument>&gt;</argument_list></name> <name pos:line="346" pos:column="92">logValue</name></expr></argument>)</argument_list>
		<block pos:line="347" pos:column="17">{
			<return pos:line="348" pos:column="25">return <expr><call><name pos:line="348" pos:column="32">ToDictionaryWithConflictLog</name><argument_list pos:line="348" pos:column="59">(<argument><expr><name pos:line="348" pos:column="60">source</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="68">keySelector</name></expr></argument>, <argument><expr><lambda><name pos:line="348" pos:column="81">x</name> <op:operator pos:line="348" pos:column="83">=&gt;</op:operator> <name pos:line="348" pos:column="86">x</name></lambda></expr></argument>, <argument><expr><name pos:line="348" pos:column="89">debugName</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="100">logKey</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="108">logValue</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></decl>

		<decl pos:line="351" pos:column="17">public static <name><name pos:line="351" pos:column="31">Dictionary</name><argument_list pos:line="351" pos:column="41">&lt;<argument><name pos:line="351" pos:column="42">TKey</name></argument>, <argument><name pos:line="351" pos:column="48">TElement</name></argument>&gt;</argument_list></name> <name><name pos:line="351" pos:column="58">ToDictionaryWithConflictLog</name><argument_list pos:line="351" pos:column="85">&lt;<argument><name pos:line="351" pos:column="86">TSource</name></argument>, <argument><name pos:line="351" pos:column="95">TKey</name></argument>, <argument><name pos:line="351" pos:column="101">TElement</name></argument>&gt;</argument_list></name><argument_list pos:line="351" pos:column="110">(
			<argument><expr><name pos:line="352" pos:column="25">this</name> <name><name pos:line="352" pos:column="30">IEnumerable</name><argument_list pos:line="352" pos:column="41">&lt;<argument><name pos:line="352" pos:column="42">TSource</name></argument>&gt;</argument_list></name> <name pos:line="352" pos:column="51">source</name></expr></argument>, <argument><expr><name><name pos:line="352" pos:column="59">Func</name><argument_list pos:line="352" pos:column="63">&lt;<argument><name pos:line="352" pos:column="64">TSource</name></argument>, <argument><name pos:line="352" pos:column="73">TKey</name></argument>&gt;</argument_list></name> <name pos:line="352" pos:column="79">keySelector</name></expr></argument>, <argument><expr><name><name pos:line="352" pos:column="92">Func</name><argument_list pos:line="352" pos:column="96">&lt;<argument><name pos:line="352" pos:column="97">TSource</name></argument>, <argument><name pos:line="352" pos:column="106">TElement</name></argument>&gt;</argument_list></name> <name pos:line="352" pos:column="116">elementSelector</name></expr></argument>,
			<argument><expr><name pos:line="353" pos:column="25">string</name> <name pos:line="353" pos:column="32">debugName</name></expr></argument>, <argument><expr><name><name pos:line="353" pos:column="43">Func</name><argument_list pos:line="353" pos:column="47">&lt;<argument><name pos:line="353" pos:column="48">TKey</name></argument>, <argument><name pos:line="353" pos:column="54">string</name></argument>&gt;</argument_list></name> <name pos:line="353" pos:column="62">logKey</name></expr></argument>, <argument><expr><name><name pos:line="353" pos:column="70">Func</name><argument_list pos:line="353" pos:column="74">&lt;<argument><name pos:line="353" pos:column="75">TElement</name></argument>, <argument><name pos:line="353" pos:column="85">string</name></argument>&gt;</argument_list></name> <name pos:line="353" pos:column="93">logValue</name></expr></argument>)</argument_list>
		<block pos:line="354" pos:column="17">{
			<comment type="line" pos:line="355" pos:column="25">// Fall back on ToString() if null functions are provided:</comment>
			<expr_stmt><expr><name pos:line="356" pos:column="25">logKey</name> <op:operator pos:line="356" pos:column="32">=</op:operator> <name pos:line="356" pos:column="34">logKey</name> <op:operator pos:line="356" pos:column="41">??</op:operator> <op:operator pos:line="356" pos:column="44">(</op:operator><lambda><name pos:line="356" pos:column="45">s</name> <op:operator pos:line="356" pos:column="47">=&gt;</op:operator> <call><name><name pos:line="356" pos:column="50">s</name><op:operator pos:line="356" pos:column="51">.</op:operator><name pos:line="356" pos:column="52">ToString</name></name><argument_list pos:line="356" pos:column="60">()</argument_list></call></lambda><op:operator pos:line="356" pos:column="62">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="357" pos:column="25">logValue</name> <op:operator pos:line="357" pos:column="34">=</op:operator> <name pos:line="357" pos:column="36">logValue</name> <op:operator pos:line="357" pos:column="45">??</op:operator> <op:operator pos:line="357" pos:column="48">(</op:operator><lambda><name pos:line="357" pos:column="49">s</name> <op:operator pos:line="357" pos:column="51">=&gt;</op:operator> <call><name><name pos:line="357" pos:column="54">s</name><op:operator pos:line="357" pos:column="55">.</op:operator><name pos:line="357" pos:column="56">ToString</name></name><argument_list pos:line="357" pos:column="64">()</argument_list></call></lambda><op:operator pos:line="357" pos:column="66">)</op:operator></expr>;</expr_stmt>

			<comment type="line" pos:line="359" pos:column="25">// Try to build a dictionary and log all duplicates found (if any):</comment>
			<decl_stmt><decl><type><name pos:line="360" pos:column="25">var</name></type> <name pos:line="360" pos:column="29">dupKeys</name> <init pos:line="360" pos:column="37">= <expr><op:operator pos:line="360" pos:column="39">new</op:operator> <call><name><name pos:line="360" pos:column="43">Dictionary</name><argument_list pos:line="360" pos:column="53">&lt;<argument><name pos:line="360" pos:column="54">TKey</name></argument>, <argument><name><name pos:line="360" pos:column="60">List</name><argument_list pos:line="360" pos:column="64">&lt;<argument><name pos:line="360" pos:column="65">string</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="360" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="361" pos:column="25">var</name></type> <name pos:line="361" pos:column="29">d</name> <init pos:line="361" pos:column="31">= <expr><op:operator pos:line="361" pos:column="33">new</op:operator> <call><name><name pos:line="361" pos:column="37">Dictionary</name><argument_list pos:line="361" pos:column="47">&lt;<argument><name pos:line="361" pos:column="48">TKey</name></argument>, <argument><name pos:line="361" pos:column="54">TElement</name></argument>&gt;</argument_list></name><argument_list pos:line="361" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="362" pos:column="25">foreach (<init><decl><type><name pos:line="362" pos:column="34">var</name></type> <name pos:line="362" pos:column="38">item</name> <range pos:line="362" pos:column="43">in <expr><name pos:line="362" pos:column="46">source</name></expr></range></decl></init>)
			<block pos:line="363" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="364" pos:column="33">var</name></type> <name pos:line="364" pos:column="37">key</name> <init pos:line="364" pos:column="41">= <expr><call><name pos:line="364" pos:column="43">keySelector</name><argument_list pos:line="364" pos:column="54">(<argument><expr><name pos:line="364" pos:column="55">item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="365" pos:column="33">var</name></type> <name pos:line="365" pos:column="37">element</name> <init pos:line="365" pos:column="45">= <expr><call><name pos:line="365" pos:column="47">elementSelector</name><argument_list pos:line="365" pos:column="62">(<argument><expr><name pos:line="365" pos:column="63">item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="line" pos:line="367" pos:column="33">// Check for a key conflict:</comment>
				<if pos:line="368" pos:column="33">if <condition pos:line="368" pos:column="36">(<expr><call><name><name pos:line="368" pos:column="37">d</name><op:operator pos:line="368" pos:column="38">.</op:operator><name pos:line="368" pos:column="39">ContainsKey</name></name><argument_list pos:line="368" pos:column="50">(<argument><expr><name pos:line="368" pos:column="51">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="368" pos:column="56">
				<block pos:line="369" pos:column="33">{
					<decl_stmt><decl><type><name><name pos:line="370" pos:column="41">List</name><argument_list pos:line="370" pos:column="45">&lt;<argument><name pos:line="370" pos:column="46">string</name></argument>&gt;</argument_list></name></type> <name pos:line="370" pos:column="54">dupKeyMessages</name></decl>;</decl_stmt>
					<if pos:line="371" pos:column="41">if <condition pos:line="371" pos:column="44">(<expr><op:operator pos:line="371" pos:column="45">!</op:operator><call><name><name pos:line="371" pos:column="46">dupKeys</name><op:operator pos:line="371" pos:column="53">.</op:operator><name pos:line="371" pos:column="54">TryGetValue</name></name><argument_list pos:line="371" pos:column="65">(<argument><expr><name pos:line="371" pos:column="66">key</name></expr></argument>, <argument><expr pos:line="371" pos:column="71">out <name pos:line="371" pos:column="75">dupKeyMessages</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="371" pos:column="91">
					<block pos:line="372" pos:column="41">{
						<comment type="line" pos:line="373" pos:column="49">// Log the initial conflicting value already inserted:</comment>
						<expr_stmt><expr><name pos:line="374" pos:column="49">dupKeyMessages</name> <op:operator pos:line="374" pos:column="64">=</op:operator> <op:operator pos:line="374" pos:column="66">new</op:operator> <call><name><name pos:line="374" pos:column="70">List</name><argument_list pos:line="374" pos:column="74">&lt;<argument><name pos:line="374" pos:column="75">string</name></argument>&gt;</argument_list></name><argument_list pos:line="374" pos:column="82">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="375" pos:column="49">dupKeyMessages</name><op:operator pos:line="375" pos:column="63">.</op:operator><name pos:line="375" pos:column="64">Add</name></name><argument_list pos:line="375" pos:column="67">(<argument><expr><call><name pos:line="375" pos:column="68">logValue</name><argument_list pos:line="375" pos:column="76">(<argument><expr><name><name pos:line="375" pos:column="77">d</name><index pos:line="375" pos:column="78">[<expr><name pos:line="375" pos:column="79">key</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="376" pos:column="49">dupKeys</name><op:operator pos:line="376" pos:column="56">.</op:operator><name pos:line="376" pos:column="57">Add</name></name><argument_list pos:line="376" pos:column="60">(<argument><expr><name pos:line="376" pos:column="61">key</name></expr></argument>, <argument><expr><name pos:line="376" pos:column="66">dupKeyMessages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>

					<comment type="line" pos:line="379" pos:column="41">// Log this conflicting value:</comment>
					<expr_stmt><expr><call><name><name pos:line="380" pos:column="41">dupKeyMessages</name><op:operator pos:line="380" pos:column="55">.</op:operator><name pos:line="380" pos:column="56">Add</name></name><argument_list pos:line="380" pos:column="59">(<argument><expr><call><name pos:line="380" pos:column="60">logValue</name><argument_list pos:line="380" pos:column="68">(<argument><expr><name pos:line="380" pos:column="69">element</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="381" pos:column="41">continue;</continue>
				}</block></then></if>

				<expr_stmt><expr><call><name><name pos:line="384" pos:column="33">d</name><op:operator pos:line="384" pos:column="34">.</op:operator><name pos:line="384" pos:column="35">Add</name></name><argument_list pos:line="384" pos:column="38">(<argument><expr><name pos:line="384" pos:column="39">key</name></expr></argument>, <argument><expr><name pos:line="384" pos:column="44">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>

			<comment type="line" pos:line="387" pos:column="25">// If any duplicates were found, throw a descriptive error</comment>
			<if pos:line="388" pos:column="25">if <condition pos:line="388" pos:column="28">(<expr><name><name pos:line="388" pos:column="29">dupKeys</name><op:operator pos:line="388" pos:column="36">.</op:operator><name pos:line="388" pos:column="37">Count</name></name> <op:operator pos:line="388" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="388" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="388" pos:column="47">
			<block pos:line="389" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="390" pos:column="33">var</name></type> <name pos:line="390" pos:column="37">badKeysFormatted</name> <init pos:line="390" pos:column="54">= <expr><call><name><name pos:line="390" pos:column="56">string</name><op:operator pos:line="390" pos:column="62">.</op:operator><name pos:line="390" pos:column="63">Join</name></name><argument_list pos:line="390" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="390" pos:column="68">", "</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="390" pos:column="74">dupKeys</name><op:operator pos:line="390" pos:column="81">.</op:operator><name pos:line="390" pos:column="82">Select</name></name><argument_list pos:line="390" pos:column="88">(<argument><expr><lambda><name pos:line="390" pos:column="89">p</name> <op:operator pos:line="390" pos:column="91">=&gt;</op:operator> <lit:literal type="string" pos:line="390" pos:column="94">"{0}: [{1}]"</lit:literal><op:operator pos:line="390" pos:column="106">.</op:operator><call><name pos:line="390" pos:column="107">F</name><argument_list pos:line="390" pos:column="108">(<argument><expr><call><name pos:line="390" pos:column="109">logKey</name><argument_list pos:line="390" pos:column="115">(<argument><expr><name><name pos:line="390" pos:column="116">p</name><op:operator pos:line="390" pos:column="117">.</op:operator><name pos:line="390" pos:column="118">Key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="390" pos:column="124">string</name><op:operator pos:line="390" pos:column="130">.</op:operator><name pos:line="390" pos:column="131">Join</name></name><argument_list pos:line="390" pos:column="135">(<argument><expr><lit:literal type="string" pos:line="390" pos:column="136">","</lit:literal></expr></argument>, <argument><expr><name><name pos:line="390" pos:column="141">p</name><op:operator pos:line="390" pos:column="142">.</op:operator><name pos:line="390" pos:column="143">Value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="391" pos:column="33">var</name></type> <name pos:line="391" pos:column="37">msg</name> <init pos:line="391" pos:column="41">= <expr><lit:literal type="string" pos:line="391" pos:column="43">"{0}, duplicate values found for the following keys: {1}"</lit:literal><op:operator pos:line="391" pos:column="100">.</op:operator><call><name pos:line="391" pos:column="101">F</name><argument_list pos:line="391" pos:column="102">(<argument><expr><name pos:line="391" pos:column="103">debugName</name></expr></argument>, <argument><expr><name pos:line="391" pos:column="114">badKeysFormatted</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<throw pos:line="392" pos:column="33">throw <expr><op:operator pos:line="392" pos:column="39">new</op:operator> <call><name pos:line="392" pos:column="43">ArgumentException</name><argument_list pos:line="392" pos:column="60">(<argument><expr><name pos:line="392" pos:column="61">msg</name></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></then></if>

			<comment type="line" pos:line="395" pos:column="25">// Return the dictionary we built:</comment>
			<return pos:line="396" pos:column="25">return <expr><name pos:line="396" pos:column="32">d</name></expr>;</return>
		}</block></decl>

		<decl pos:line="399" pos:column="17">public static <name pos:line="399" pos:column="31">Color</name> <name pos:line="399" pos:column="37">ColorLerp</name><argument_list pos:line="399" pos:column="46">(<argument><expr><name pos:line="399" pos:column="47">float</name> <name pos:line="399" pos:column="53">t</name></expr></argument>, <argument><expr><name pos:line="399" pos:column="56">Color</name> <name pos:line="399" pos:column="62">c1</name></expr></argument>, <argument><expr><name pos:line="399" pos:column="66">Color</name> <name pos:line="399" pos:column="72">c2</name></expr></argument>)</argument_list>
		<block pos:line="400" pos:column="17">{
			<return pos:line="401" pos:column="25">return <expr><call><name><name pos:line="401" pos:column="32">Color</name><op:operator pos:line="401" pos:column="37">.</op:operator><name pos:line="401" pos:column="38">FromArgb</name></name><argument_list pos:line="401" pos:column="46">(
				<argument><expr><call pos:line="402" pos:column="33">(<name pos:line="402" pos:column="34">int</name>)<argument_list pos:line="402" pos:column="38">(<argument><expr><name pos:line="402" pos:column="39">t</name> <op:operator pos:line="402" pos:column="41">*</op:operator> <name><name pos:line="402" pos:column="43">c2</name><op:operator pos:line="402" pos:column="45">.</op:operator><name pos:line="402" pos:column="46">A</name></name> <op:operator pos:line="402" pos:column="48">+</op:operator> <op:operator pos:line="402" pos:column="50">(</op:operator><lit:literal type="number" pos:line="402" pos:column="51">1</lit:literal> <op:operator pos:line="402" pos:column="53">-</op:operator> <name pos:line="402" pos:column="55">t</name><op:operator pos:line="402" pos:column="56">)</op:operator> <op:operator pos:line="402" pos:column="58">*</op:operator> <name><name pos:line="402" pos:column="60">c1</name><op:operator pos:line="402" pos:column="62">.</op:operator><name pos:line="402" pos:column="63">A</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call pos:line="403" pos:column="33">(<name pos:line="403" pos:column="34">int</name>)<argument_list pos:line="403" pos:column="38">(<argument><expr><name pos:line="403" pos:column="39">t</name> <op:operator pos:line="403" pos:column="41">*</op:operator> <name><name pos:line="403" pos:column="43">c2</name><op:operator pos:line="403" pos:column="45">.</op:operator><name pos:line="403" pos:column="46">R</name></name> <op:operator pos:line="403" pos:column="48">+</op:operator> <op:operator pos:line="403" pos:column="50">(</op:operator><lit:literal type="number" pos:line="403" pos:column="51">1</lit:literal> <op:operator pos:line="403" pos:column="53">-</op:operator> <name pos:line="403" pos:column="55">t</name><op:operator pos:line="403" pos:column="56">)</op:operator> <op:operator pos:line="403" pos:column="58">*</op:operator> <name><name pos:line="403" pos:column="60">c1</name><op:operator pos:line="403" pos:column="62">.</op:operator><name pos:line="403" pos:column="63">R</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call pos:line="404" pos:column="33">(<name pos:line="404" pos:column="34">int</name>)<argument_list pos:line="404" pos:column="38">(<argument><expr><name pos:line="404" pos:column="39">t</name> <op:operator pos:line="404" pos:column="41">*</op:operator> <name><name pos:line="404" pos:column="43">c2</name><op:operator pos:line="404" pos:column="45">.</op:operator><name pos:line="404" pos:column="46">G</name></name> <op:operator pos:line="404" pos:column="48">+</op:operator> <op:operator pos:line="404" pos:column="50">(</op:operator><lit:literal type="number" pos:line="404" pos:column="51">1</lit:literal> <op:operator pos:line="404" pos:column="53">-</op:operator> <name pos:line="404" pos:column="55">t</name><op:operator pos:line="404" pos:column="56">)</op:operator> <op:operator pos:line="404" pos:column="58">*</op:operator> <name><name pos:line="404" pos:column="60">c1</name><op:operator pos:line="404" pos:column="62">.</op:operator><name pos:line="404" pos:column="63">G</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call pos:line="405" pos:column="33">(<name pos:line="405" pos:column="34">int</name>)<argument_list pos:line="405" pos:column="38">(<argument><expr><name pos:line="405" pos:column="39">t</name> <op:operator pos:line="405" pos:column="41">*</op:operator> <name><name pos:line="405" pos:column="43">c2</name><op:operator pos:line="405" pos:column="45">.</op:operator><name pos:line="405" pos:column="46">B</name></name> <op:operator pos:line="405" pos:column="48">+</op:operator> <op:operator pos:line="405" pos:column="50">(</op:operator><lit:literal type="number" pos:line="405" pos:column="51">1</lit:literal> <op:operator pos:line="405" pos:column="53">-</op:operator> <name pos:line="405" pos:column="55">t</name><op:operator pos:line="405" pos:column="56">)</op:operator> <op:operator pos:line="405" pos:column="58">*</op:operator> <name><name pos:line="405" pos:column="60">c1</name><op:operator pos:line="405" pos:column="62">.</op:operator><name pos:line="405" pos:column="63">B</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></decl>

		<decl pos:line="408" pos:column="17">public static <name pos:line="408" pos:column="31">T</name>[] <name><name pos:line="408" pos:column="35">MakeArray</name><argument_list pos:line="408" pos:column="44">&lt;<argument><name pos:line="408" pos:column="45">T</name></argument>&gt;</argument_list></name><argument_list pos:line="408" pos:column="47">(<argument><expr><name pos:line="408" pos:column="48">int</name> <name pos:line="408" pos:column="52">count</name></expr></argument>, <argument><expr><name><name pos:line="408" pos:column="59">Func</name><argument_list pos:line="408" pos:column="63">&lt;<argument><name pos:line="408" pos:column="64">int</name></argument>, <argument><name pos:line="408" pos:column="69">T</name></argument>&gt;</argument_list></name> <name pos:line="408" pos:column="72">f</name></expr></argument>)</argument_list>
		<block pos:line="409" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="410" pos:column="25">var</name></type> <name pos:line="410" pos:column="29">result</name> <init pos:line="410" pos:column="36">= <expr><op:operator pos:line="410" pos:column="38">new</op:operator> <name><name pos:line="410" pos:column="42">T</name><index pos:line="410" pos:column="43">[<expr><name pos:line="410" pos:column="44">count</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for pos:line="411" pos:column="25">for (<init><decl><type><name pos:line="411" pos:column="30">var</name></type> <name pos:line="411" pos:column="34">i</name> <init pos:line="411" pos:column="36">= <expr><lit:literal type="number" pos:line="411" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="411" pos:column="41">i</name> <op:operator pos:line="411" pos:column="43">&lt;</op:operator> <name pos:line="411" pos:column="45">count</name></expr>;</condition> <incr><expr><name pos:line="411" pos:column="52">i</name><op:operator pos:line="411" pos:column="53">++</op:operator></expr></incr>)
				<expr_stmt><expr><name><name pos:line="412" pos:column="33">result</name><index pos:line="412" pos:column="39">[<expr><name pos:line="412" pos:column="40">i</name></expr>]</index></name> <op:operator pos:line="412" pos:column="43">=</op:operator> <call><name pos:line="412" pos:column="45">f</name><argument_list pos:line="412" pos:column="46">(<argument><expr><name pos:line="412" pos:column="47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

			<return pos:line="414" pos:column="25">return <expr><name pos:line="414" pos:column="32">result</name></expr>;</return>
		}</block></decl>

		<decl pos:line="417" pos:column="17">public static <name pos:line="417" pos:column="31">T</name>[</decl><op:operator pos:line="417" pos:column="33">,</op:operator>] <macro><name pos:line="417" pos:column="36">ResizeArray</name></macro><expr_stmt><expr><op:operator pos:line="417" pos:column="47">&lt;</op:operator><name pos:line="417" pos:column="48">T</name><op:operator pos:line="417" pos:column="49">&gt;</op:operator><op:operator pos:line="417" pos:column="50">(</op:operator><name><name pos:line="417" pos:column="51">T</name><index pos:line="417" pos:column="52">[,]</index></name> <name pos:line="417" pos:column="56">ts</name><op:operator pos:line="417" pos:column="58">,</op:operator> <name pos:line="417" pos:column="60">T</name> <name pos:line="417" pos:column="62">t</name><op:operator pos:line="417" pos:column="63">,</op:operator> <name pos:line="417" pos:column="65">int</name> <name pos:line="417" pos:column="69">width</name><op:operator pos:line="417" pos:column="74">,</op:operator> <name pos:line="417" pos:column="76">int</name> <name pos:line="417" pos:column="80">height</name><op:operator pos:line="417" pos:column="86">)</op:operator>
		<block pos:line="418" pos:column="17">{
			<expr><name pos:line="419" pos:column="25">var</name> <name pos:line="419" pos:column="29">result</name> <op:operator pos:line="419" pos:column="36">=</op:operator> <op:operator pos:line="419" pos:column="38">new</op:operator> <name><name pos:line="419" pos:column="42">T</name><index pos:line="419" pos:column="43">[<expr><name pos:line="419" pos:column="44">width</name></expr>, <expr><name pos:line="419" pos:column="51">height</name></expr>]</index></name></expr>;
			<for pos:line="420" pos:column="25">for (<init><decl><type><name pos:line="420" pos:column="30">var</name></type> <name pos:line="420" pos:column="34">i</name> <init pos:line="420" pos:column="36">= <expr><lit:literal type="number" pos:line="420" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="420" pos:column="41">i</name> <op:operator pos:line="420" pos:column="43">&lt;</op:operator> <name pos:line="420" pos:column="45">width</name></expr>;</condition> <incr><expr><name pos:line="420" pos:column="52">i</name><op:operator pos:line="420" pos:column="53">++</op:operator></expr></incr>)
			<block pos:line="421" pos:column="25">{
				<for pos:line="422" pos:column="33">for (<init><decl><type><name pos:line="422" pos:column="38">var</name></type> <name pos:line="422" pos:column="42">j</name> <init pos:line="422" pos:column="44">= <expr><lit:literal type="number" pos:line="422" pos:column="46">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="422" pos:column="49">j</name> <op:operator pos:line="422" pos:column="51">&lt;</op:operator> <name pos:line="422" pos:column="53">height</name></expr>;</condition> <incr><expr><name pos:line="422" pos:column="61">j</name><op:operator pos:line="422" pos:column="62">++</op:operator></expr></incr>)
				<block pos:line="423" pos:column="33">{
					<comment type="line" pos:line="424" pos:column="41">// Workaround for broken ternary operators in certain versions of mono</comment>
					<comment type="line" pos:line="425" pos:column="41">// (3.10 and certain versions of the 3.8 series): https://bugzilla.xamarin.com/show_bug.cgi?id=23319</comment>
					<if pos:line="426" pos:column="41">if <condition pos:line="426" pos:column="44">(<expr><name pos:line="426" pos:column="45">i</name> <op:operator pos:line="426" pos:column="47">&lt;=</op:operator> <call><name><name pos:line="426" pos:column="50">ts</name><op:operator pos:line="426" pos:column="52">.</op:operator><name pos:line="426" pos:column="53">GetUpperBound</name></name><argument_list pos:line="426" pos:column="66">(<argument><expr><lit:literal type="number" pos:line="426" pos:column="67">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="426" pos:column="70">&amp;&amp;</op:operator> <name pos:line="426" pos:column="73">j</name> <op:operator pos:line="426" pos:column="75">&lt;=</op:operator> <call><name><name pos:line="426" pos:column="78">ts</name><op:operator pos:line="426" pos:column="80">.</op:operator><name pos:line="426" pos:column="81">GetUpperBound</name></name><argument_list pos:line="426" pos:column="94">(<argument><expr><lit:literal type="number" pos:line="426" pos:column="95">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="426" pos:column="98">
						<expr_stmt><expr><name><name pos:line="427" pos:column="49">result</name><index pos:line="427" pos:column="55">[<expr><name pos:line="427" pos:column="56">i</name></expr>, <expr><name pos:line="427" pos:column="59">j</name></expr>]</index></name> <op:operator pos:line="427" pos:column="62">=</op:operator> <name><name pos:line="427" pos:column="64">ts</name><index pos:line="427" pos:column="66">[<expr><name pos:line="427" pos:column="67">i</name></expr>, <expr><name pos:line="427" pos:column="70">j</name></expr>]</index></name></expr>;</expr_stmt></then>
					<else pos:line="428" pos:column="41">else
						<expr_stmt><expr><name><name pos:line="429" pos:column="49">result</name><index pos:line="429" pos:column="55">[<expr><name pos:line="429" pos:column="56">i</name></expr>, <expr><name pos:line="429" pos:column="59">j</name></expr>]</index></name> <op:operator pos:line="429" pos:column="62">=</op:operator> <name pos:line="429" pos:column="64">t</name></expr>;</expr_stmt></else></if>
				<expr_stmt/></block></for></block></for>}</block></expr></expr_stmt></enum>
			}</block></class>

			<return pos:line="433" pos:column="25">return <expr><name pos:line="433" pos:column="32">result</name></expr>;</return>
		}</block></namespace>

		<function><type><specifier pos:line="436" pos:column="17">public</specifier> <specifier pos:line="436" pos:column="24">static</specifier> <name pos:line="436" pos:column="31">Rectangle</name></type> <name pos:line="436" pos:column="41">Bounds</name><parameter_list pos:line="436" pos:column="47">(<param><decl><type><name pos:line="436" pos:column="48">this</name> <name pos:line="436" pos:column="53">Bitmap</name></type> <name pos:line="436" pos:column="60">b</name></decl></param>)</parameter_list> <block pos:line="436" pos:column="63">{ <return pos:line="436" pos:column="65">return <expr><op:operator pos:line="436" pos:column="72">new</op:operator> <call><name pos:line="436" pos:column="76">Rectangle</name><argument_list pos:line="436" pos:column="85">(<argument><expr><lit:literal type="number" pos:line="436" pos:column="86">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="436" pos:column="89">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="436" pos:column="92">b</name><op:operator pos:line="436" pos:column="93">.</op:operator><name pos:line="436" pos:column="94">Width</name></name></expr></argument>, <argument><expr><name><name pos:line="436" pos:column="101">b</name><op:operator pos:line="436" pos:column="102">.</op:operator><name pos:line="436" pos:column="103">Height</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="438" pos:column="17">public</specifier> <specifier pos:line="438" pos:column="24">static</specifier> <name pos:line="438" pos:column="31">Bitmap</name></type> <name pos:line="438" pos:column="38">CloneWith32bbpArgbPixelFormat</name><parameter_list pos:line="438" pos:column="67">(<param><decl><type><name pos:line="438" pos:column="68">this</name> <name pos:line="438" pos:column="73">Bitmap</name></type> <name pos:line="438" pos:column="80">original</name></decl></param>)</parameter_list>
		<block pos:line="439" pos:column="17">{
			<comment type="line" pos:line="440" pos:column="25">// Note: We would use original.Clone(original.Bounds(), PixelFormat.Format32bppArgb)</comment>
			<comment type="line" pos:line="441" pos:column="25">// but this doesn't work on mono.</comment>
			<decl_stmt><decl><type><name pos:line="442" pos:column="25">var</name></type> <name pos:line="442" pos:column="29">clone</name> <init pos:line="442" pos:column="35">= <expr><op:operator pos:line="442" pos:column="37">new</op:operator> <call><name pos:line="442" pos:column="41">Bitmap</name><argument_list pos:line="442" pos:column="47">(<argument><expr><name><name pos:line="442" pos:column="48">original</name><op:operator pos:line="442" pos:column="56">.</op:operator><name pos:line="442" pos:column="57">Width</name></name></expr></argument>, <argument><expr><name><name pos:line="442" pos:column="64">original</name><op:operator pos:line="442" pos:column="72">.</op:operator><name pos:line="442" pos:column="73">Height</name></name></expr></argument>, <argument><expr><name><name pos:line="442" pos:column="81">PixelFormat</name><op:operator pos:line="442" pos:column="92">.</op:operator><name pos:line="442" pos:column="93">Format32bppArgb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<try pos:line="443" pos:column="25">try
			<block pos:line="444" pos:column="25">{
				<using pos:line="445" pos:column="33">using (<decl><type><name pos:line="445" pos:column="40">var</name></type> <name pos:line="445" pos:column="44">g</name> <init pos:line="445" pos:column="46">= <expr><call><name><name pos:line="445" pos:column="48">System</name><op:operator pos:line="445" pos:column="54">.</op:operator><name pos:line="445" pos:column="55">Drawing</name><op:operator pos:line="445" pos:column="62">.</op:operator><name pos:line="445" pos:column="63">Graphics</name><op:operator pos:line="445" pos:column="71">.</op:operator><name pos:line="445" pos:column="72">FromImage</name></name><argument_list pos:line="445" pos:column="81">(<argument><expr><name pos:line="445" pos:column="82">clone</name></expr></argument>)</argument_list></call></expr></init></decl>)
					<expr_stmt><expr><call><name><name pos:line="446" pos:column="41">g</name><op:operator pos:line="446" pos:column="42">.</op:operator><name pos:line="446" pos:column="43">DrawImage</name></name><argument_list pos:line="446" pos:column="52">(<argument><expr><name pos:line="446" pos:column="53">original</name></expr></argument>, <argument><expr><call><name><name pos:line="446" pos:column="63">original</name><op:operator pos:line="446" pos:column="71">.</op:operator><name pos:line="446" pos:column="72">Bounds</name></name><argument_list pos:line="446" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></using>
			}</block>
			<catch pos:line="448" pos:column="25">catch <parameter_list pos:line="448" pos:column="31">(<param><decl><type><name pos:line="448" pos:column="32">Exception</name></type></decl></param>)</parameter_list>
			<block pos:line="449" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="450" pos:column="33">clone</name><op:operator pos:line="450" pos:column="38">.</op:operator><name pos:line="450" pos:column="39">Dispose</name></name><argument_list pos:line="450" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
				<throw pos:line="451" pos:column="33">throw;</throw>
			}</block></catch></try>

			<return pos:line="454" pos:column="25">return <expr><name pos:line="454" pos:column="32">clone</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="457" pos:column="17">public</specifier> <specifier pos:line="457" pos:column="24">static</specifier> <name pos:line="457" pos:column="31">int</name></type> <name pos:line="457" pos:column="35">ToBits</name><parameter_list pos:line="457" pos:column="41">(<param><decl><type><name pos:line="457" pos:column="42">this</name> <name><name pos:line="457" pos:column="47">IEnumerable</name><argument_list pos:line="457" pos:column="58">&lt;<argument><name pos:line="457" pos:column="59">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="457" pos:column="65">bits</name></decl></param>)</parameter_list>
		<block pos:line="458" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="459" pos:column="25">var</name></type> <name pos:line="459" pos:column="29">i</name> <init pos:line="459" pos:column="31">= <expr><lit:literal type="number" pos:line="459" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="460" pos:column="25">var</name></type> <name pos:line="460" pos:column="29">result</name> <init pos:line="460" pos:column="36">= <expr><lit:literal type="number" pos:line="460" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
			<foreach pos:line="461" pos:column="25">foreach (<init><decl><type><name pos:line="461" pos:column="34">var</name></type> <name pos:line="461" pos:column="38">b</name> <range pos:line="461" pos:column="40">in <expr><name pos:line="461" pos:column="43">bits</name></expr></range></decl></init>)
				<if pos:line="462" pos:column="33">if <condition pos:line="462" pos:column="36">(<expr><name pos:line="462" pos:column="37">b</name></expr>)</condition><then pos:line="462" pos:column="39">
					<expr_stmt><expr><name pos:line="463" pos:column="41">result</name> <op:operator pos:line="463" pos:column="48">|=</op:operator> <lit:literal type="number" pos:line="463" pos:column="51">1</lit:literal> <op:operator pos:line="463" pos:column="53">&lt;&lt;</op:operator> <name pos:line="463" pos:column="56">i</name><op:operator pos:line="463" pos:column="57">++</op:operator></expr>;</expr_stmt></then>
				<else pos:line="464" pos:column="33">else
					<expr_stmt><expr><name pos:line="465" pos:column="41">i</name><op:operator pos:line="465" pos:column="42">++</op:operator></expr>;</expr_stmt></else></if></foreach>
			<if pos:line="466" pos:column="25">if <condition pos:line="466" pos:column="28">(<expr><name pos:line="466" pos:column="29">i</name> <op:operator pos:line="466" pos:column="31">&gt;</op:operator> <lit:literal type="number" pos:line="466" pos:column="33">33</lit:literal></expr>)</condition><then pos:line="466" pos:column="36">
				<throw pos:line="467" pos:column="33">throw <expr><op:operator pos:line="467" pos:column="39">new</op:operator> <call><name pos:line="467" pos:column="43">InvalidOperationException</name><argument_list pos:line="467" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="467" pos:column="69">"ToBits only accepts up to 32 values."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
			<return pos:line="468" pos:column="25">return <expr><name pos:line="468" pos:column="32">result</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="471" pos:column="17">public</specifier> <specifier pos:line="471" pos:column="24">static</specifier> <name pos:line="471" pos:column="31">int</name></type> <name pos:line="471" pos:column="35">ParseIntegerInvariant</name><parameter_list pos:line="471" pos:column="56">(<param><decl><type><name pos:line="471" pos:column="57">string</name></type> <name pos:line="471" pos:column="64">s</name></decl></param>)</parameter_list>
		<block pos:line="472" pos:column="17">{
			<return pos:line="473" pos:column="25">return <expr><call><name><name pos:line="473" pos:column="32">int</name><op:operator pos:line="473" pos:column="35">.</op:operator><name pos:line="473" pos:column="36">Parse</name></name><argument_list pos:line="473" pos:column="41">(<argument><expr><name pos:line="473" pos:column="42">s</name></expr></argument>, <argument><expr><name><name pos:line="473" pos:column="45">NumberStyles</name><op:operator pos:line="473" pos:column="57">.</op:operator><name pos:line="473" pos:column="58">Integer</name></name></expr></argument>, <argument><expr><name><name pos:line="473" pos:column="67">NumberFormatInfo</name><op:operator pos:line="473" pos:column="83">.</op:operator><name pos:line="473" pos:column="84">InvariantInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="476" pos:column="17">public</specifier> <specifier pos:line="476" pos:column="24">static</specifier> <name pos:line="476" pos:column="31">bool</name></type> <name pos:line="476" pos:column="36">TryParseIntegerInvariant</name><parameter_list pos:line="476" pos:column="60">(<param><decl><type><name pos:line="476" pos:column="61">string</name></type> <name pos:line="476" pos:column="68">s</name></decl></param>, <param><decl><type><specifier pos:line="476" pos:column="71">out</specifier> <name pos:line="476" pos:column="75">int</name></type> <name pos:line="476" pos:column="79">i</name></decl></param>)</parameter_list>
		<block pos:line="477" pos:column="17">{
			<return pos:line="478" pos:column="25">return <expr><call><name><name pos:line="478" pos:column="32">int</name><op:operator pos:line="478" pos:column="35">.</op:operator><name pos:line="478" pos:column="36">TryParse</name></name><argument_list pos:line="478" pos:column="44">(<argument><expr><name pos:line="478" pos:column="45">s</name></expr></argument>, <argument><expr><name><name pos:line="478" pos:column="48">NumberStyles</name><op:operator pos:line="478" pos:column="60">.</op:operator><name pos:line="478" pos:column="61">Integer</name></name></expr></argument>, <argument><expr><name><name pos:line="478" pos:column="70">NumberFormatInfo</name><op:operator pos:line="478" pos:column="86">.</op:operator><name pos:line="478" pos:column="87">InvariantInfo</name></name></expr></argument>, <argument><expr pos:line="478" pos:column="102">out <name pos:line="478" pos:column="106">i</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="481" pos:column="17">public</specifier> <specifier pos:line="481" pos:column="24">static</specifier> <name pos:line="481" pos:column="31">bool</name></type> <name pos:line="481" pos:column="36">IsTraitEnabled</name><parameter_list pos:line="481" pos:column="50">(<param><decl><type><name pos:line="481" pos:column="51">this</name> <name pos:line="481" pos:column="56">object</name></type> <name pos:line="481" pos:column="63">trait</name></decl></param>)</parameter_list>
		<block pos:line="482" pos:column="17">{
			<return pos:line="483" pos:column="25">return <expr><name pos:line="483" pos:column="32">trait</name> <op:operator pos:line="483" pos:column="38">as</op:operator> <name pos:line="483" pos:column="41">IDisabledTrait</name> <op:operator pos:line="483" pos:column="56">==</op:operator> <name pos:line="483" pos:column="59">null</name> <op:operator pos:line="483" pos:column="64">||</op:operator> <op:operator pos:line="483" pos:column="67">!</op:operator><op:operator pos:line="483" pos:column="68">(</op:operator><name pos:line="483" pos:column="69">trait</name> <op:operator pos:line="483" pos:column="75">as</op:operator> <name pos:line="483" pos:column="78">IDisabledTrait</name><op:operator pos:line="483" pos:column="92">)</op:operator><op:operator pos:line="483" pos:column="93">.</op:operator><name pos:line="483" pos:column="94">IsTraitDisabled</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="486" pos:column="17">public</specifier> <specifier pos:line="486" pos:column="24">static</specifier> <name pos:line="486" pos:column="31">bool</name></type> <name><name pos:line="486" pos:column="36">IsTraitEnabled</name><argument_list pos:line="486" pos:column="50">&lt;<argument><name pos:line="486" pos:column="51">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="486" pos:column="53">(<param><decl><type><name pos:line="486" pos:column="54">T</name></type> <name pos:line="486" pos:column="56">t</name></decl></param>)</parameter_list>
		<block pos:line="487" pos:column="17">{
			<return pos:line="488" pos:column="25">return <expr><call><name pos:line="488" pos:column="32">IsTraitEnabled</name><argument_list pos:line="488" pos:column="46">(<argument><expr><name pos:line="488" pos:column="47">t</name> <op:operator pos:line="488" pos:column="49">as</op:operator> <name pos:line="488" pos:column="52">object</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>
	}

	public <class><specifier pos:line="492" pos:column="16">static</specifier> class <name><name pos:line="492" pos:column="29">Enum</name><argument_list pos:line="492" pos:column="33">&lt;<argument><name pos:line="492" pos:column="34">T</name></argument>&gt;</argument_list></name>
	<block pos:line="493" pos:column="9">{
		<function><type><specifier pos:line="494" pos:column="17">public</specifier> <specifier pos:line="494" pos:column="24">static</specifier> <name pos:line="494" pos:column="31">T</name></type> <name pos:line="494" pos:column="33">Parse</name><parameter_list pos:line="494" pos:column="38">(<param><decl><type><name pos:line="494" pos:column="39">string</name></type> <name pos:line="494" pos:column="46">s</name></decl></param>)</parameter_list> <block pos:line="494" pos:column="49">{ <return pos:line="494" pos:column="51">return <expr><op:operator pos:line="494" pos:column="58">(</op:operator><name pos:line="494" pos:column="59">T</name><op:operator pos:line="494" pos:column="60">)</op:operator><call><name><name pos:line="494" pos:column="61">Enum</name><op:operator pos:line="494" pos:column="65">.</op:operator><name pos:line="494" pos:column="66">Parse</name></name><argument_list pos:line="494" pos:column="71">(<argument><expr><call><name pos:line="494" pos:column="72">typeof</name><argument_list pos:line="494" pos:column="78">(<argument><expr><name pos:line="494" pos:column="79">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="494" pos:column="83">s</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="495" pos:column="17">public</specifier> <specifier pos:line="495" pos:column="24">static</specifier> <name pos:line="495" pos:column="31">T</name><index pos:line="495" pos:column="32">[]</index></type> <name pos:line="495" pos:column="35">GetValues</name><parameter_list pos:line="495" pos:column="44">()</parameter_list> <block pos:line="495" pos:column="47">{ <return pos:line="495" pos:column="49">return <expr><op:operator pos:line="495" pos:column="56">(</op:operator><name><name pos:line="495" pos:column="57">T</name><index pos:line="495" pos:column="58">[]</index></name><op:operator pos:line="495" pos:column="60">)</op:operator><call><name><name pos:line="495" pos:column="61">Enum</name><op:operator pos:line="495" pos:column="65">.</op:operator><name pos:line="495" pos:column="66">GetValues</name></name><argument_list pos:line="495" pos:column="75">(<argument><expr><call><name pos:line="495" pos:column="76">typeof</name><argument_list pos:line="495" pos:column="82">(<argument><expr><name pos:line="495" pos:column="83">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="497" pos:column="17">public</specifier> <specifier pos:line="497" pos:column="24">static</specifier> <name pos:line="497" pos:column="31">bool</name></type> <name pos:line="497" pos:column="36">TryParse</name><parameter_list pos:line="497" pos:column="44">(<param><decl><type><name pos:line="497" pos:column="45">string</name></type> <name pos:line="497" pos:column="52">s</name></decl></param>, <param><decl><type><name pos:line="497" pos:column="55">bool</name></type> <name pos:line="497" pos:column="60">ignoreCase</name></decl></param>, <param><decl><type><specifier pos:line="497" pos:column="72">out</specifier> <name pos:line="497" pos:column="76">T</name></type> <name pos:line="497" pos:column="78">value</name></decl></param>)</parameter_list>
		<block pos:line="498" pos:column="17">{
			<comment type="line" pos:line="499" pos:column="25">// The string may be a comma delimited list of values</comment>
			<decl_stmt><decl><type><name pos:line="500" pos:column="25">var</name></type> <name pos:line="500" pos:column="29">names</name> <init pos:line="500" pos:column="35">= <expr><name pos:line="500" pos:column="37">ignoreCase</name> <op:operator pos:line="500" pos:column="48">?</op:operator> <call><name><name pos:line="500" pos:column="50">Enum</name><op:operator pos:line="500" pos:column="54">.</op:operator><name pos:line="500" pos:column="55">GetNames</name></name><argument_list pos:line="500" pos:column="63">(<argument><expr><call><name pos:line="500" pos:column="64">typeof</name><argument_list pos:line="500" pos:column="70">(<argument><expr><name pos:line="500" pos:column="71">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="500" pos:column="74">.</op:operator><call><name pos:line="500" pos:column="75">Select</name><argument_list pos:line="500" pos:column="81">(<argument><expr><lambda><name pos:line="500" pos:column="82">x</name> <op:operator pos:line="500" pos:column="84">=&gt;</op:operator> <call><name><name pos:line="500" pos:column="87">x</name><op:operator pos:line="500" pos:column="88">.</op:operator><name pos:line="500" pos:column="89">ToLowerInvariant</name></name><argument_list pos:line="500" pos:column="105">()</argument_list></call></lambda></expr></argument>)</argument_list></call> <op:operator pos:line="500" pos:column="109">:</op:operator> <call><name><name pos:line="500" pos:column="111">Enum</name><op:operator pos:line="500" pos:column="115">.</op:operator><name pos:line="500" pos:column="116">GetNames</name></name><argument_list pos:line="500" pos:column="124">(<argument><expr><call><name pos:line="500" pos:column="125">typeof</name><argument_list pos:line="500" pos:column="131">(<argument><expr><name pos:line="500" pos:column="132">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="501" pos:column="25">var</name></type> <name pos:line="501" pos:column="29">values</name> <init pos:line="501" pos:column="36">= <expr><name pos:line="501" pos:column="38">ignoreCase</name> <op:operator pos:line="501" pos:column="49">?</op:operator> <call><name><name pos:line="501" pos:column="51">s</name><op:operator pos:line="501" pos:column="52">.</op:operator><name pos:line="501" pos:column="53">Split</name></name><argument_list pos:line="501" pos:column="58">(<argument><expr><lit:literal type="char" pos:line="501" pos:column="59">','</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="501" pos:column="63">.</op:operator><call><name pos:line="501" pos:column="64">Select</name><argument_list pos:line="501" pos:column="70">(<argument><expr><lambda><name pos:line="501" pos:column="71">x</name> <op:operator pos:line="501" pos:column="73">=&gt;</op:operator> <call><name><name pos:line="501" pos:column="76">x</name><op:operator pos:line="501" pos:column="77">.</op:operator><name pos:line="501" pos:column="78">Trim</name></name><argument_list pos:line="501" pos:column="82">()</argument_list></call><op:operator pos:line="501" pos:column="84">.</op:operator><call><name pos:line="501" pos:column="85">ToLowerInvariant</name><argument_list pos:line="501" pos:column="101">()</argument_list></call></lambda></expr></argument>)</argument_list></call> <op:operator pos:line="501" pos:column="105">:</op:operator> <call><name><name pos:line="501" pos:column="107">s</name><op:operator pos:line="501" pos:column="108">.</op:operator><name pos:line="501" pos:column="109">Split</name></name><argument_list pos:line="501" pos:column="114">(<argument><expr><lit:literal type="char" pos:line="501" pos:column="115">','</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="501" pos:column="119">.</op:operator><call><name pos:line="501" pos:column="120">Select</name><argument_list pos:line="501" pos:column="126">(<argument><expr><lambda><name pos:line="501" pos:column="127">x</name> <op:operator pos:line="501" pos:column="129">=&gt;</op:operator> <call><name><name pos:line="501" pos:column="132">x</name><op:operator pos:line="501" pos:column="133">.</op:operator><name pos:line="501" pos:column="134">Trim</name></name><argument_list pos:line="501" pos:column="138">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="503" pos:column="25">if <condition pos:line="503" pos:column="28">(<expr><call><name><name pos:line="503" pos:column="29">values</name><op:operator pos:line="503" pos:column="35">.</op:operator><name pos:line="503" pos:column="36">Any</name></name><argument_list pos:line="503" pos:column="39">(<argument><expr><lambda><name pos:line="503" pos:column="40">x</name> <op:operator pos:line="503" pos:column="42">=&gt;</op:operator> <op:operator pos:line="503" pos:column="45">!</op:operator><call><name><name pos:line="503" pos:column="46">names</name><op:operator pos:line="503" pos:column="51">.</op:operator><name pos:line="503" pos:column="52">Contains</name></name><argument_list pos:line="503" pos:column="60">(<argument><expr><name pos:line="503" pos:column="61">x</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="503" pos:column="65">
			<block pos:line="504" pos:column="25">{
				<expr_stmt><expr><name pos:line="505" pos:column="33">value</name> <op:operator pos:line="505" pos:column="39">=</op:operator> <call><name pos:line="505" pos:column="41">default</name><argument_list pos:line="505" pos:column="48">(<argument><expr><name pos:line="505" pos:column="49">T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="506" pos:column="33">return <expr><lit:literal type="boolean" pos:line="506" pos:column="40">false</lit:literal></expr>;</return>
			}</block></then></if>

			<expr_stmt><expr><name pos:line="509" pos:column="25">value</name> <op:operator pos:line="509" pos:column="31">=</op:operator> <op:operator pos:line="509" pos:column="33">(</op:operator><name pos:line="509" pos:column="34">T</name><op:operator pos:line="509" pos:column="35">)</op:operator><call><name><name pos:line="509" pos:column="36">Enum</name><op:operator pos:line="509" pos:column="40">.</op:operator><name pos:line="509" pos:column="41">Parse</name></name><argument_list pos:line="509" pos:column="46">(<argument><expr><call><name pos:line="509" pos:column="47">typeof</name><argument_list pos:line="509" pos:column="53">(<argument><expr><name pos:line="509" pos:column="54">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="509" pos:column="58">s</name></expr></argument>, <argument><expr><name pos:line="509" pos:column="61">ignoreCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:line="511" pos:column="25">return <expr><lit:literal type="boolean" pos:line="511" pos:column="32">true</lit:literal></expr>;</return>
		}</block></function>
	}</block></class>
}
</unit>
