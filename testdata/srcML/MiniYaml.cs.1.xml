<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\MiniYaml.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">IO</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">OpenRA</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">FileSystem</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name pos:line="17" pos:column="11">OpenRA</name>
<block pos:line="18" pos:column="1">{
	<using pos:line="19" pos:column="9">using <name pos:line="19" pos:column="15">MiniYamlNodes</name> <init pos:line="19" pos:column="29">= <expr><name><name pos:line="19" pos:column="31">List</name><argument_list pos:line="19" pos:column="35">&lt;<argument><name pos:line="19" pos:column="36">MiniYamlNode</name></argument>&gt;</argument_list></name></expr></init>;</using>

	<class><specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">static</specifier> class <name pos:line="21" pos:column="29">MiniYamlExts</name>
	<block pos:line="22" pos:column="9">{
		<function><type><specifier pos:line="23" pos:column="17">public</specifier> <specifier pos:line="23" pos:column="24">static</specifier> <name pos:line="23" pos:column="31">void</name></type> <name pos:line="23" pos:column="36">WriteToFile</name><parameter_list pos:line="23" pos:column="47">(<param><decl><type><name pos:line="23" pos:column="48">this</name> <name pos:line="23" pos:column="53">MiniYamlNodes</name></type> <name pos:line="23" pos:column="67">y</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="70">string</name></type> <name pos:line="23" pos:column="77">filename</name></decl></param>)</parameter_list>
		<block pos:line="24" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="25" pos:column="25">File</name><op:operator pos:line="25" pos:column="29">.</op:operator><name pos:line="25" pos:column="30">WriteAllLines</name></name><argument_list pos:line="25" pos:column="43">(<argument><expr><name pos:line="25" pos:column="44">filename</name></expr></argument>, <argument><expr><call><name><name pos:line="25" pos:column="54">y</name><op:operator pos:line="25" pos:column="55">.</op:operator><name pos:line="25" pos:column="56">ToLines</name></name><argument_list pos:line="25" pos:column="63">(<argument><expr><lit:literal type="boolean" pos:line="25" pos:column="64">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="69">.</op:operator><call><name pos:line="25" pos:column="70">Select</name><argument_list pos:line="25" pos:column="76">(<argument><expr><lambda><name pos:line="25" pos:column="77">x</name> <op:operator pos:line="25" pos:column="79">=&gt;</op:operator> <call><name><name pos:line="25" pos:column="82">x</name><op:operator pos:line="25" pos:column="83">.</op:operator><name pos:line="25" pos:column="84">TrimEnd</name></name><argument_list pos:line="25" pos:column="91">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="94">.</op:operator><call><name pos:line="25" pos:column="95">ToArray</name><argument_list pos:line="25" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="28" pos:column="17">public</specifier> <specifier pos:line="28" pos:column="24">static</specifier> <name pos:line="28" pos:column="31">string</name></type> <name pos:line="28" pos:column="38">WriteToString</name><parameter_list pos:line="28" pos:column="51">(<param><decl><type><name pos:line="28" pos:column="52">this</name> <name pos:line="28" pos:column="57">MiniYamlNodes</name></type> <name pos:line="28" pos:column="71">y</name></decl></param>)</parameter_list>
		<block pos:line="29" pos:column="17">{
			<return pos:line="30" pos:column="25">return <expr><call><name><name pos:line="30" pos:column="32">y</name><op:operator pos:line="30" pos:column="33">.</op:operator><name pos:line="30" pos:column="34">ToLines</name></name><argument_list pos:line="30" pos:column="41">(<argument><expr><lit:literal type="boolean" pos:line="30" pos:column="42">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="30" pos:column="47">.</op:operator><call><name pos:line="30" pos:column="48">Select</name><argument_list pos:line="30" pos:column="54">(<argument><expr><lambda><name pos:line="30" pos:column="55">x</name> <op:operator pos:line="30" pos:column="57">=&gt;</op:operator> <call><name><name pos:line="30" pos:column="60">x</name><op:operator pos:line="30" pos:column="61">.</op:operator><name pos:line="30" pos:column="62">TrimEnd</name></name><argument_list pos:line="30" pos:column="69">()</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="30" pos:column="72">.</op:operator><call><name pos:line="30" pos:column="73">JoinWith</name><argument_list pos:line="30" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="82">"\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="33" pos:column="17">public</specifier> <specifier pos:line="33" pos:column="24">static</specifier> <name><name pos:line="33" pos:column="31">IEnumerable</name><argument_list pos:line="33" pos:column="42">&lt;<argument><name pos:line="33" pos:column="43">string</name></argument>&gt;</argument_list></name></type> <name pos:line="33" pos:column="51">ToLines</name><parameter_list pos:line="33" pos:column="58">(<param><decl><type><name pos:line="33" pos:column="59">this</name> <name pos:line="33" pos:column="64">MiniYamlNodes</name></type> <name pos:line="33" pos:column="78">y</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="81">bool</name></type> <name pos:line="33" pos:column="86">lowest</name></decl></param>)</parameter_list>
		<block pos:line="34" pos:column="17">{
			<foreach pos:line="35" pos:column="25">foreach (<init><decl><type><name pos:line="35" pos:column="34">var</name></type> <name pos:line="35" pos:column="38">kv</name> <range pos:line="35" pos:column="41">in <expr><name pos:line="35" pos:column="44">y</name></expr></range></decl></init>)
			<block pos:line="36" pos:column="25">{
				<foreach pos:line="37" pos:column="33">foreach (<init><decl><type><name pos:line="37" pos:column="42">var</name></type> <name pos:line="37" pos:column="46">line</name> <range pos:line="37" pos:column="51">in <expr><call><name><name pos:line="37" pos:column="54">kv</name><op:operator pos:line="37" pos:column="56">.</op:operator><name pos:line="37" pos:column="57">Value</name><op:operator pos:line="37" pos:column="62">.</op:operator><name pos:line="37" pos:column="63">ToLines</name></name><argument_list pos:line="37" pos:column="70">(<argument><expr><name><name pos:line="37" pos:column="71">kv</name><op:operator pos:line="37" pos:column="73">.</op:operator><name pos:line="37" pos:column="74">Key</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)
					<return><specifier pos:line="38" pos:column="41">yield</specifier> return <expr><name pos:line="38" pos:column="54">line</name></expr>;</return></foreach>
				<if pos:line="39" pos:column="33">if <condition pos:line="39" pos:column="36">(<expr><name pos:line="39" pos:column="37">lowest</name></expr>)</condition><then pos:line="39" pos:column="44">
					<return><specifier pos:line="40" pos:column="41">yield</specifier> return <expr><lit:literal type="string" pos:line="40" pos:column="54">""</lit:literal></expr>;</return></then></if>
			}</block></foreach>
		}</block></function>
	}</block></class>

	<class><specifier pos:line="45" pos:column="9">public</specifier> class <name pos:line="45" pos:column="22">MiniYamlNode</name>
	<block pos:line="46" pos:column="9">{
		<struct><specifier pos:line="47" pos:column="17">public</specifier> struct <name pos:line="47" pos:column="31">SourceLocation</name>
		<block pos:line="48" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="49" pos:column="25">public</specifier> <name pos:line="49" pos:column="32">string</name></type> <name pos:line="49" pos:column="39">Filename</name></decl>;</decl_stmt> <decl_stmt><decl><type><specifier pos:line="49" pos:column="49">public</specifier> <name pos:line="49" pos:column="56">int</name></type> <name pos:line="49" pos:column="60">Line</name></decl>;</decl_stmt>
			<function><type><specifier pos:line="50" pos:column="25">public</specifier> <specifier pos:line="50" pos:column="32">override</specifier> <name pos:line="50" pos:column="41">string</name></type> <name pos:line="50" pos:column="48">ToString</name><parameter_list pos:line="50" pos:column="56">()</parameter_list> <block pos:line="50" pos:column="59">{ <return pos:line="50" pos:column="61">return <expr><lit:literal type="string" pos:line="50" pos:column="68">"{0}:{1}"</lit:literal><op:operator pos:line="50" pos:column="77">.</op:operator><call><name pos:line="50" pos:column="78">F</name><argument_list pos:line="50" pos:column="79">(<argument><expr><name pos:line="50" pos:column="80">Filename</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="90">Line</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		}</block></struct>

		<decl_stmt><decl><type><specifier pos:line="53" pos:column="17">public</specifier> <name pos:line="53" pos:column="24">SourceLocation</name></type> <name pos:line="53" pos:column="39">Location</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="54" pos:column="17">public</specifier> <name pos:line="54" pos:column="24">string</name></type> <name pos:line="54" pos:column="31">Key</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="55" pos:column="17">public</specifier> <name pos:line="55" pos:column="24">MiniYaml</name></type> <name pos:line="55" pos:column="33">Value</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="57" pos:column="17">public</specifier> <name pos:line="57" pos:column="24">MiniYamlNode</name><parameter_list pos:line="57" pos:column="36">(<param><decl><type><name pos:line="57" pos:column="37">string</name></type> <name pos:line="57" pos:column="44">k</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="47">MiniYaml</name></type> <name pos:line="57" pos:column="56">v</name></decl></param>)</parameter_list>
		<block pos:line="58" pos:column="17">{
			<expr_stmt><expr><name pos:line="59" pos:column="25">Key</name> <op:operator pos:line="59" pos:column="29">=</op:operator> <name pos:line="59" pos:column="31">k</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="60" pos:column="25">Value</name> <op:operator pos:line="60" pos:column="31">=</op:operator> <name pos:line="60" pos:column="33">v</name></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="63" pos:column="17">public</specifier> <name pos:line="63" pos:column="24">MiniYamlNode</name><parameter_list pos:line="63" pos:column="36">(<param><decl><type><name pos:line="63" pos:column="37">string</name></type> <name pos:line="63" pos:column="44">k</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="47">MiniYaml</name></type> <name pos:line="63" pos:column="56">v</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="59">SourceLocation</name></type> <name pos:line="63" pos:column="74">loc</name></decl></param>)</parameter_list>
			<member_list pos:line="64" pos:column="25">: <call><name pos:line="64" pos:column="27">this</name><argument_list pos:line="64" pos:column="31">(<argument><expr><name pos:line="64" pos:column="32">k</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="35">v</name></expr></argument>)</argument_list></call>
		</member_list><block pos:line="65" pos:column="17">{
			<expr_stmt><expr><name pos:line="66" pos:column="25">Location</name> <op:operator pos:line="66" pos:column="34">=</op:operator> <name pos:line="66" pos:column="36">loc</name></expr>;</expr_stmt>
		}</block></constructor>

		<constructor><specifier pos:line="69" pos:column="17">public</specifier> <name pos:line="69" pos:column="24">MiniYamlNode</name><parameter_list pos:line="69" pos:column="36">(<param><decl><type><name pos:line="69" pos:column="37">string</name></type> <name pos:line="69" pos:column="44">k</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="47">string</name></type> <name pos:line="69" pos:column="54">v</name></decl></param>)</parameter_list>
			<member_list pos:line="70" pos:column="25">: <call><name pos:line="70" pos:column="27">this</name><argument_list pos:line="70" pos:column="31">(<argument><expr><name pos:line="70" pos:column="32">k</name></expr></argument>, <argument><expr><name pos:line="70" pos:column="35">v</name></expr></argument>, <argument><expr><name pos:line="70" pos:column="38">null</name></expr></argument>)</argument_list></call> </member_list><block pos:line="70" pos:column="44">{ }</block></constructor>

		<constructor><specifier pos:line="72" pos:column="17">public</specifier> <name pos:line="72" pos:column="24">MiniYamlNode</name><parameter_list pos:line="72" pos:column="36">(<param><decl><type><name pos:line="72" pos:column="37">string</name></type> <name pos:line="72" pos:column="44">k</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="47">string</name></type> <name pos:line="72" pos:column="54">v</name></decl></param>, <param><decl><type><name><name pos:line="72" pos:column="57">List</name><argument_list pos:line="72" pos:column="61">&lt;<argument><name pos:line="72" pos:column="62">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="76">n</name></decl></param>)</parameter_list>
			<member_list pos:line="73" pos:column="25">: <call><name pos:line="73" pos:column="27">this</name><argument_list pos:line="73" pos:column="31">(<argument><expr><name pos:line="73" pos:column="32">k</name></expr></argument>, <argument><expr><op:operator pos:line="73" pos:column="35">new</op:operator> <call><name pos:line="73" pos:column="39">MiniYaml</name><argument_list pos:line="73" pos:column="47">(<argument><expr><name pos:line="73" pos:column="48">v</name></expr></argument>, <argument><expr><name pos:line="73" pos:column="51">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_list><block pos:line="73" pos:column="55">{ }</block></constructor>

		<constructor><specifier pos:line="75" pos:column="17">public</specifier> <name pos:line="75" pos:column="24">MiniYamlNode</name><parameter_list pos:line="75" pos:column="36">(<param><decl><type><name pos:line="75" pos:column="37">string</name></type> <name pos:line="75" pos:column="44">k</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="47">string</name></type> <name pos:line="75" pos:column="54">v</name></decl></param>, <param><decl><type><name><name pos:line="75" pos:column="57">List</name><argument_list pos:line="75" pos:column="61">&lt;<argument><name pos:line="75" pos:column="62">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="75" pos:column="76">n</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="79">SourceLocation</name></type> <name pos:line="75" pos:column="94">loc</name></decl></param>)</parameter_list>
			<member_list pos:line="76" pos:column="25">: <call><name pos:line="76" pos:column="27">this</name><argument_list pos:line="76" pos:column="31">(<argument><expr><name pos:line="76" pos:column="32">k</name></expr></argument>, <argument><expr><op:operator pos:line="76" pos:column="35">new</op:operator> <call><name pos:line="76" pos:column="39">MiniYaml</name><argument_list pos:line="76" pos:column="47">(<argument><expr><name pos:line="76" pos:column="48">v</name></expr></argument>, <argument><expr><name pos:line="76" pos:column="51">n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="76" pos:column="55">loc</name></expr></argument>)</argument_list></call> </member_list><block pos:line="76" pos:column="60">{ }</block></constructor>

		<function><type><specifier pos:line="78" pos:column="17">public</specifier> <specifier pos:line="78" pos:column="24">override</specifier> <name pos:line="78" pos:column="33">string</name></type> <name pos:line="78" pos:column="40">ToString</name><parameter_list pos:line="78" pos:column="48">()</parameter_list>
		<block pos:line="79" pos:column="17">{
			<return pos:line="80" pos:column="25">return <expr><lit:literal type="string" pos:line="80" pos:column="32">"{{YamlNode: {0} @ {1}}}"</lit:literal><op:operator pos:line="80" pos:column="57">.</op:operator><call><name pos:line="80" pos:column="58">F</name><argument_list pos:line="80" pos:column="59">(<argument><expr><name pos:line="80" pos:column="60">Key</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="65">Location</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>
	}</block></class>

	<class><specifier pos:line="84" pos:column="9">public</specifier> class <name pos:line="84" pos:column="22">MiniYaml</name>
	<block pos:line="85" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="86" pos:column="17">const</specifier> <name pos:line="86" pos:column="23">int</name></type> <name pos:line="86" pos:column="27">SpacesPerLevel</name> <init pos:line="86" pos:column="42">= <expr><lit:literal type="number" pos:line="86" pos:column="44">4</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="87" pos:column="17">static</specifier> <specifier pos:line="87" pos:column="24">readonly</specifier> <name><name pos:line="87" pos:column="33">Func</name><argument_list pos:line="87" pos:column="37">&lt;<argument><name pos:line="87" pos:column="38">string</name></argument>, <argument><name pos:line="87" pos:column="46">string</name></argument>&gt;</argument_list></name></type> <name pos:line="87" pos:column="54">StringIdentity</name> <init pos:line="87" pos:column="69">= <expr><lambda><name pos:line="87" pos:column="71">s</name> <op:operator pos:line="87" pos:column="73">=&gt;</op:operator> <name pos:line="87" pos:column="76">s</name></lambda></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="88" pos:column="17">static</specifier> <specifier pos:line="88" pos:column="24">readonly</specifier> <name><name pos:line="88" pos:column="33">Func</name><argument_list pos:line="88" pos:column="37">&lt;<argument><name pos:line="88" pos:column="38">MiniYaml</name></argument>, <argument><name pos:line="88" pos:column="48">MiniYaml</name></argument>&gt;</argument_list></name></type> <name pos:line="88" pos:column="58">MiniYamlIdentity</name> <init pos:line="88" pos:column="75">= <expr><lambda><name pos:line="88" pos:column="77">my</name> <op:operator pos:line="88" pos:column="80">=&gt;</op:operator> <name pos:line="88" pos:column="83">my</name></lambda></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="89" pos:column="17">public</specifier> <name pos:line="89" pos:column="24">string</name></type> <name pos:line="89" pos:column="31">Value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="90" pos:column="17">public</specifier> <name><name pos:line="90" pos:column="24">List</name><argument_list pos:line="90" pos:column="28">&lt;<argument><name pos:line="90" pos:column="29">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="43">Nodes</name></decl>;</decl_stmt>

		<function><type><specifier pos:line="92" pos:column="17">public</specifier> <name><name pos:line="92" pos:column="24">Dictionary</name><argument_list pos:line="92" pos:column="34">&lt;<argument><name pos:line="92" pos:column="35">string</name></argument>, <argument><name pos:line="92" pos:column="43">MiniYaml</name></argument>&gt;</argument_list></name></type> <name pos:line="92" pos:column="53">ToDictionary</name><parameter_list pos:line="92" pos:column="65">()</parameter_list>
		<block pos:line="93" pos:column="17">{
			<return pos:line="94" pos:column="25">return <expr><call><name pos:line="94" pos:column="32">ToDictionary</name><argument_list pos:line="94" pos:column="44">(<argument><expr><name pos:line="94" pos:column="45">MiniYamlIdentity</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="97" pos:column="17">public</specifier> <name><name pos:line="97" pos:column="24">Dictionary</name><argument_list pos:line="97" pos:column="34">&lt;<argument><name pos:line="97" pos:column="35">string</name></argument>, <argument><name pos:line="97" pos:column="43">TElement</name></argument>&gt;</argument_list></name></type> <name><name pos:line="97" pos:column="53">ToDictionary</name><argument_list pos:line="97" pos:column="65">&lt;<argument><name pos:line="97" pos:column="66">TElement</name></argument>&gt;</argument_list></name><parameter_list pos:line="97" pos:column="75">(<param><decl><type><name><name pos:line="97" pos:column="76">Func</name><argument_list pos:line="97" pos:column="80">&lt;<argument><name pos:line="97" pos:column="81">MiniYaml</name></argument>, <argument><name pos:line="97" pos:column="91">TElement</name></argument>&gt;</argument_list></name></type> <name pos:line="97" pos:column="101">elementSelector</name></decl></param>)</parameter_list>
		<block pos:line="98" pos:column="17">{
			<return pos:line="99" pos:column="25">return <expr><call><name pos:line="99" pos:column="32">ToDictionary</name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">StringIdentity</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="61">elementSelector</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="102" pos:column="17">public</specifier> <name><name pos:line="102" pos:column="24">Dictionary</name><argument_list pos:line="102" pos:column="34">&lt;<argument><name pos:line="102" pos:column="35">TKey</name></argument>, <argument><name pos:line="102" pos:column="41">TElement</name></argument>&gt;</argument_list></name></type> <name><name pos:line="102" pos:column="51">ToDictionary</name><argument_list pos:line="102" pos:column="63">&lt;<argument><name pos:line="102" pos:column="64">TKey</name></argument>, <argument><name pos:line="102" pos:column="70">TElement</name></argument>&gt;</argument_list></name><parameter_list pos:line="102" pos:column="79">(
			<param><decl><type><name><name pos:line="103" pos:column="25">Func</name><argument_list pos:line="103" pos:column="29">&lt;<argument><name pos:line="103" pos:column="30">string</name></argument>, <argument><name pos:line="103" pos:column="38">TKey</name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="44">keySelector</name></decl></param>, <param><decl><type><name><name pos:line="103" pos:column="57">Func</name><argument_list pos:line="103" pos:column="61">&lt;<argument><name pos:line="103" pos:column="62">MiniYaml</name></argument>, <argument><name pos:line="103" pos:column="72">TElement</name></argument>&gt;</argument_list></name></type> <name pos:line="103" pos:column="82">elementSelector</name></decl></param>)</parameter_list>
		<block pos:line="104" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="105" pos:column="25">var</name></type> <name pos:line="105" pos:column="29">ret</name> <init pos:line="105" pos:column="33">= <expr><op:operator pos:line="105" pos:column="35">new</op:operator> <call><name><name pos:line="105" pos:column="39">Dictionary</name><argument_list pos:line="105" pos:column="49">&lt;<argument><name pos:line="105" pos:column="50">TKey</name></argument>, <argument><name pos:line="105" pos:column="56">TElement</name></argument>&gt;</argument_list></name><argument_list pos:line="105" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="106" pos:column="25">foreach (<init><decl><type><name pos:line="106" pos:column="34">var</name></type> <name pos:line="106" pos:column="38">y</name> <range pos:line="106" pos:column="40">in <expr><name pos:line="106" pos:column="43">Nodes</name></expr></range></decl></init>)
			<block pos:line="107" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="108" pos:column="33">var</name></type> <name pos:line="108" pos:column="37">key</name> <init pos:line="108" pos:column="41">= <expr><call><name pos:line="108" pos:column="43">keySelector</name><argument_list pos:line="108" pos:column="54">(<argument><expr><name><name pos:line="108" pos:column="55">y</name><op:operator pos:line="108" pos:column="56">.</op:operator><name pos:line="108" pos:column="57">Key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="109" pos:column="33">var</name></type> <name pos:line="109" pos:column="37">element</name> <init pos:line="109" pos:column="45">= <expr><call><name pos:line="109" pos:column="47">elementSelector</name><argument_list pos:line="109" pos:column="62">(<argument><expr><name><name pos:line="109" pos:column="63">y</name><op:operator pos:line="109" pos:column="64">.</op:operator><name pos:line="109" pos:column="65">Value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<try pos:line="110" pos:column="33">try
				<block pos:line="111" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="112" pos:column="41">ret</name><op:operator pos:line="112" pos:column="44">.</op:operator><name pos:line="112" pos:column="45">Add</name></name><argument_list pos:line="112" pos:column="48">(<argument><expr><name pos:line="112" pos:column="49">key</name></expr></argument>, <argument><expr><name pos:line="112" pos:column="54">element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block>
				<catch pos:line="114" pos:column="33">catch <parameter_list pos:line="114" pos:column="39">(<param><decl><type><name pos:line="114" pos:column="40">ArgumentException</name></type> <name pos:line="114" pos:column="58">ex</name></decl></param>)</parameter_list>
				<block pos:line="115" pos:column="33">{
					<throw pos:line="116" pos:column="41">throw <expr><op:operator pos:line="116" pos:column="47">new</op:operator> <call><name pos:line="116" pos:column="51">InvalidDataException</name><argument_list pos:line="116" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="72">"Duplicate key '{0}' in {1}"</lit:literal><op:operator pos:line="116" pos:column="100">.</op:operator><call><name pos:line="116" pos:column="101">F</name><argument_list pos:line="116" pos:column="102">(<argument><expr><name><name pos:line="116" pos:column="103">y</name><op:operator pos:line="116" pos:column="104">.</op:operator><name pos:line="116" pos:column="105">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="110">y</name><op:operator pos:line="116" pos:column="111">.</op:operator><name pos:line="116" pos:column="112">Location</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="116" pos:column="123">ex</name></expr></argument>)</argument_list></call></expr>;</throw>
				}</block></catch></try>
			}</block></foreach>

			<return pos:line="120" pos:column="25">return <expr><name pos:line="120" pos:column="32">ret</name></expr>;</return>
		}</block></function>

		<constructor><specifier pos:line="123" pos:column="17">public</specifier> <name pos:line="123" pos:column="24">MiniYaml</name><parameter_list pos:line="123" pos:column="32">(<param><decl><type><name pos:line="123" pos:column="33">string</name></type> <name pos:line="123" pos:column="40">value</name></decl></param>)</parameter_list> <member_list pos:line="123" pos:column="47">: <call><name pos:line="123" pos:column="49">this</name><argument_list pos:line="123" pos:column="53">(<argument><expr><name pos:line="123" pos:column="54">value</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="61">null</name></expr></argument>)</argument_list></call> </member_list><block pos:line="123" pos:column="67">{ }</block></constructor>

		<constructor><specifier pos:line="125" pos:column="17">public</specifier> <name pos:line="125" pos:column="24">MiniYaml</name><parameter_list pos:line="125" pos:column="32">(<param><decl><type><name pos:line="125" pos:column="33">string</name></type> <name pos:line="125" pos:column="40">value</name></decl></param>, <param><decl><type><name><name pos:line="125" pos:column="47">List</name><argument_list pos:line="125" pos:column="51">&lt;<argument><name pos:line="125" pos:column="52">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="125" pos:column="66">nodes</name></decl></param>)</parameter_list>
		<block pos:line="126" pos:column="17">{
			<expr_stmt><expr><name pos:line="127" pos:column="25">Value</name> <op:operator pos:line="127" pos:column="31">=</op:operator> <name pos:line="127" pos:column="33">value</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="128" pos:column="25">Nodes</name> <op:operator pos:line="128" pos:column="31">=</op:operator> <name pos:line="128" pos:column="33">nodes</name> <op:operator pos:line="128" pos:column="39">??</op:operator> <op:operator pos:line="128" pos:column="42">new</op:operator> <call><name><name pos:line="128" pos:column="46">List</name><argument_list pos:line="128" pos:column="50">&lt;<argument><name pos:line="128" pos:column="51">MiniYamlNode</name></argument>&gt;</argument_list></name><argument_list pos:line="128" pos:column="64">()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><specifier pos:line="131" pos:column="17">public</specifier> <specifier pos:line="131" pos:column="24">static</specifier> <name pos:line="131" pos:column="31">MiniYaml</name></type> <name><name pos:line="131" pos:column="40">FromDictionary</name><argument_list pos:line="131" pos:column="54">&lt;<argument><name pos:line="131" pos:column="55">K</name></argument>, <argument><name pos:line="131" pos:column="58">V</name></argument>&gt;</argument_list></name><parameter_list pos:line="131" pos:column="60">(<param><decl><type><name><name pos:line="131" pos:column="61">Dictionary</name><argument_list pos:line="131" pos:column="71">&lt;<argument><name pos:line="131" pos:column="72">K</name></argument>, <argument><name pos:line="131" pos:column="75">V</name></argument>&gt;</argument_list></name></type> <name pos:line="131" pos:column="78">dict</name></decl></param>)</parameter_list>
		<block pos:line="132" pos:column="17">{
			<return pos:line="133" pos:column="25">return <expr><op:operator pos:line="133" pos:column="32">new</op:operator> <call><name pos:line="133" pos:column="36">MiniYaml</name><argument_list pos:line="133" pos:column="44">(<argument><expr><name pos:line="133" pos:column="45">null</name></expr></argument>, <argument><expr><call><name><name pos:line="133" pos:column="51">dict</name><op:operator pos:line="133" pos:column="55">.</op:operator><name pos:line="133" pos:column="56">Select</name></name><argument_list pos:line="133" pos:column="62">(<argument><expr><lambda><name pos:line="133" pos:column="63">x</name> <op:operator pos:line="133" pos:column="65">=&gt;</op:operator> <op:operator pos:line="133" pos:column="68">new</op:operator> <call><name pos:line="133" pos:column="72">MiniYamlNode</name><argument_list pos:line="133" pos:column="84">(<argument><expr><call><name><name pos:line="133" pos:column="85">x</name><op:operator pos:line="133" pos:column="86">.</op:operator><name pos:line="133" pos:column="87">Key</name><op:operator pos:line="133" pos:column="90">.</op:operator><name pos:line="133" pos:column="91">ToString</name></name><argument_list pos:line="133" pos:column="99">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="133" pos:column="103">new</op:operator> <call><name pos:line="133" pos:column="107">MiniYaml</name><argument_list pos:line="133" pos:column="115">(<argument><expr><call><name><name pos:line="133" pos:column="116">x</name><op:operator pos:line="133" pos:column="117">.</op:operator><name pos:line="133" pos:column="118">Value</name><op:operator pos:line="133" pos:column="123">.</op:operator><name pos:line="133" pos:column="124">ToString</name></name><argument_list pos:line="133" pos:column="132">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="133" pos:column="137">.</op:operator><call><name pos:line="133" pos:column="138">ToList</name><argument_list pos:line="133" pos:column="144">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="136" pos:column="17">public</specifier> <specifier pos:line="136" pos:column="24">static</specifier> <name pos:line="136" pos:column="31">MiniYaml</name></type> <name><name pos:line="136" pos:column="40">FromList</name><argument_list pos:line="136" pos:column="48">&lt;<argument><name pos:line="136" pos:column="49">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="136" pos:column="51">(<param><decl><type><name><name pos:line="136" pos:column="52">List</name><argument_list pos:line="136" pos:column="56">&lt;<argument><name pos:line="136" pos:column="57">T</name></argument>&gt;</argument_list></name></type> <name pos:line="136" pos:column="60">list</name></decl></param>)</parameter_list>
		<block pos:line="137" pos:column="17">{
			<return pos:line="138" pos:column="25">return <expr><op:operator pos:line="138" pos:column="32">new</op:operator> <call><name pos:line="138" pos:column="36">MiniYaml</name><argument_list pos:line="138" pos:column="44">(<argument><expr><name pos:line="138" pos:column="45">null</name></expr></argument>, <argument><expr><call><name><name pos:line="138" pos:column="51">list</name><op:operator pos:line="138" pos:column="55">.</op:operator><name pos:line="138" pos:column="56">Select</name></name><argument_list pos:line="138" pos:column="62">(<argument><expr><lambda><name pos:line="138" pos:column="63">x</name> <op:operator pos:line="138" pos:column="65">=&gt;</op:operator> <op:operator pos:line="138" pos:column="68">new</op:operator> <call><name pos:line="138" pos:column="72">MiniYamlNode</name><argument_list pos:line="138" pos:column="84">(<argument><expr><call><name><name pos:line="138" pos:column="85">x</name><op:operator pos:line="138" pos:column="86">.</op:operator><name pos:line="138" pos:column="87">ToString</name></name><argument_list pos:line="138" pos:column="95">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="138" pos:column="99">new</op:operator> <call><name pos:line="138" pos:column="103">MiniYaml</name><argument_list pos:line="138" pos:column="111">(<argument><expr><name pos:line="138" pos:column="112">null</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="138" pos:column="119">.</op:operator><call><name pos:line="138" pos:column="120">ToList</name><argument_list pos:line="138" pos:column="126">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="141" pos:column="17">public</specifier> <specifier pos:line="141" pos:column="24">static</specifier> <name><name pos:line="141" pos:column="31">List</name><argument_list pos:line="141" pos:column="35">&lt;<argument><name pos:line="141" pos:column="36">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="141" pos:column="50">NodesOrEmpty</name><parameter_list pos:line="141" pos:column="62">(<param><decl><type><name pos:line="141" pos:column="63">MiniYaml</name></type> <name pos:line="141" pos:column="72">y</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="75">string</name></type> <name pos:line="141" pos:column="82">s</name></decl></param>)</parameter_list>
		<block pos:line="142" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="143" pos:column="25">var</name></type> <name pos:line="143" pos:column="29">nd</name> <init pos:line="143" pos:column="32">= <expr><call><name><name pos:line="143" pos:column="34">y</name><op:operator pos:line="143" pos:column="35">.</op:operator><name pos:line="143" pos:column="36">ToDictionary</name></name><argument_list pos:line="143" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:line="144" pos:column="25">return <expr><call><name><name pos:line="144" pos:column="32">nd</name><op:operator pos:line="144" pos:column="34">.</op:operator><name pos:line="144" pos:column="35">ContainsKey</name></name><argument_list pos:line="144" pos:column="46">(<argument><expr><name pos:line="144" pos:column="47">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="144" pos:column="50">?</op:operator> <name><name pos:line="144" pos:column="52">nd</name><index pos:line="144" pos:column="54">[<expr><name pos:line="144" pos:column="55">s</name></expr>]</index></name><op:operator pos:line="144" pos:column="57">.</op:operator><name pos:line="144" pos:column="58">Nodes</name> <op:operator pos:line="144" pos:column="64">:</op:operator> <op:operator pos:line="144" pos:column="66">new</op:operator> <call><name><name pos:line="144" pos:column="70">List</name><argument_list pos:line="144" pos:column="74">&lt;<argument><name pos:line="144" pos:column="75">MiniYamlNode</name></argument>&gt;</argument_list></name><argument_list pos:line="144" pos:column="88">()</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="147" pos:column="17">static</specifier> <name><name pos:line="147" pos:column="24">List</name><argument_list pos:line="147" pos:column="28">&lt;<argument><name pos:line="147" pos:column="29">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="147" pos:column="43">FromLines</name><parameter_list pos:line="147" pos:column="52">(<param><decl><type><name><name pos:line="147" pos:column="53">IEnumerable</name><argument_list pos:line="147" pos:column="64">&lt;<argument><name pos:line="147" pos:column="65">string</name></argument>&gt;</argument_list></name></type> <name pos:line="147" pos:column="73">lines</name></decl></param>, <param><decl><type><name pos:line="147" pos:column="80">string</name></type> <name pos:line="147" pos:column="87">filename</name></decl></param>)</parameter_list>
		<block pos:line="148" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="149" pos:column="25">var</name></type> <name pos:line="149" pos:column="29">levels</name> <init pos:line="149" pos:column="36">= <expr><op:operator pos:line="149" pos:column="38">new</op:operator> <call><name><name pos:line="149" pos:column="42">List</name><argument_list pos:line="149" pos:column="46">&lt;<argument><name><name pos:line="149" pos:column="47">List</name><argument_list pos:line="149" pos:column="51">&lt;<argument><name pos:line="149" pos:column="52">MiniYamlNode</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="149" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="150" pos:column="25">levels</name><op:operator pos:line="150" pos:column="31">.</op:operator><name pos:line="150" pos:column="32">Add</name></name><argument_list pos:line="150" pos:column="35">(<argument><expr><op:operator pos:line="150" pos:column="36">new</op:operator> <call><name><name pos:line="150" pos:column="40">List</name><argument_list pos:line="150" pos:column="44">&lt;<argument><name pos:line="150" pos:column="45">MiniYamlNode</name></argument>&gt;</argument_list></name><argument_list pos:line="150" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="152" pos:column="25">var</name></type> <name pos:line="152" pos:column="29">lineNo</name> <init pos:line="152" pos:column="36">= <expr><lit:literal type="number" pos:line="152" pos:column="38">0</lit:literal></expr></init></decl>;</decl_stmt>
			<foreach pos:line="153" pos:column="25">foreach (<init><decl><type><name pos:line="153" pos:column="34">var</name></type> <name pos:line="153" pos:column="38">ll</name> <range pos:line="153" pos:column="41">in <expr><name pos:line="153" pos:column="44">lines</name></expr></range></decl></init>)
			<block pos:line="154" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="155" pos:column="33">var</name></type> <name pos:line="155" pos:column="37">line</name> <init pos:line="155" pos:column="42">= <expr><name pos:line="155" pos:column="44">ll</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><op:operator pos:line="156" pos:column="33">++</op:operator><name pos:line="156" pos:column="35">lineNo</name></expr>;</expr_stmt>

				<decl_stmt><decl><type><name pos:line="158" pos:column="33">var</name></type> <name pos:line="158" pos:column="37">commentIndex</name> <init pos:line="158" pos:column="50">= <expr><call><name><name pos:line="158" pos:column="52">line</name><op:operator pos:line="158" pos:column="56">.</op:operator><name pos:line="158" pos:column="57">IndexOf</name></name><argument_list pos:line="158" pos:column="64">(<argument><expr><lit:literal type="char" pos:line="158" pos:column="65">'#'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="159" pos:column="33">if <condition pos:line="159" pos:column="36">(<expr><name pos:line="159" pos:column="37">commentIndex</name> <op:operator pos:line="159" pos:column="50">!=</op:operator> <op:operator pos:line="159" pos:column="53">-</op:operator><lit:literal type="number" pos:line="159" pos:column="54">1</lit:literal></expr>)</condition><then pos:line="159" pos:column="56">
					<expr_stmt><expr><name pos:line="160" pos:column="41">line</name> <op:operator pos:line="160" pos:column="46">=</op:operator> <call><name><name pos:line="160" pos:column="48">line</name><op:operator pos:line="160" pos:column="52">.</op:operator><name pos:line="160" pos:column="53">Substring</name></name><argument_list pos:line="160" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="160" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><name pos:line="160" pos:column="66">commentIndex</name></expr></argument>)</argument_list></call><op:operator pos:line="160" pos:column="79">.</op:operator><call><name pos:line="160" pos:column="80">TrimEnd</name><argument_list pos:line="160" pos:column="87">(<argument><expr><lit:literal type="char" pos:line="160" pos:column="88">' '</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="160" pos:column="93">'\t'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<if pos:line="161" pos:column="33">if <condition pos:line="161" pos:column="36">(<expr><name><name pos:line="161" pos:column="37">line</name><op:operator pos:line="161" pos:column="41">.</op:operator><name pos:line="161" pos:column="42">Length</name></name> <op:operator pos:line="161" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="161" pos:column="52">0</lit:literal></expr>)</condition><then pos:line="161" pos:column="54">
					<continue pos:line="162" pos:column="41">continue;</continue></then></if>
				<decl_stmt><decl><type><name pos:line="163" pos:column="33">var</name></type> <name pos:line="163" pos:column="37">cp</name> <init pos:line="163" pos:column="40">= <expr><lit:literal type="number" pos:line="163" pos:column="42">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="164" pos:column="33">var</name></type> <name pos:line="164" pos:column="37">level</name> <init pos:line="164" pos:column="43">= <expr><lit:literal type="number" pos:line="164" pos:column="45">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="165" pos:column="33">var</name></type> <name pos:line="165" pos:column="37">spaces</name> <init pos:line="165" pos:column="44">= <expr><lit:literal type="number" pos:line="165" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="166" pos:column="33">var</name></type> <name pos:line="166" pos:column="37">textStart</name> <init pos:line="166" pos:column="47">= <expr><lit:literal type="boolean" pos:line="166" pos:column="49">false</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="167" pos:column="33">var</name></type> <name pos:line="167" pos:column="37">c</name> <init pos:line="167" pos:column="39">= <expr><name><name pos:line="167" pos:column="41">line</name><index pos:line="167" pos:column="45">[<expr><name pos:line="167" pos:column="46">cp</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<while pos:line="168" pos:column="33">while <condition pos:line="168" pos:column="39">(<expr><op:operator pos:line="168" pos:column="40">!</op:operator><op:operator pos:line="168" pos:column="41">(</op:operator><name pos:line="168" pos:column="42">c</name> <op:operator pos:line="168" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="47">'\n'</lit:literal> <op:operator pos:line="168" pos:column="52">||</op:operator> <name pos:line="168" pos:column="55">c</name> <op:operator pos:line="168" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="60">'\r'</lit:literal><op:operator pos:line="168" pos:column="64">)</op:operator> <op:operator pos:line="168" pos:column="66">&amp;&amp;</op:operator> <name pos:line="168" pos:column="69">cp</name> <op:operator pos:line="168" pos:column="72">&lt;</op:operator> <name><name pos:line="168" pos:column="74">line</name><op:operator pos:line="168" pos:column="78">.</op:operator><name pos:line="168" pos:column="79">Length</name> <type:modifier pos:line="168" pos:column="86">&amp;&amp;</type:modifier></name> <op:operator pos:line="168" pos:column="89">!</op:operator><name pos:line="168" pos:column="90">textStart</name></expr>)</condition>
				<block pos:line="169" pos:column="33">{
					<expr_stmt><expr><name pos:line="170" pos:column="41">c</name> <op:operator pos:line="170" pos:column="43">=</op:operator> <name><name pos:line="170" pos:column="45">line</name><index pos:line="170" pos:column="49">[<expr><name pos:line="170" pos:column="50">cp</name></expr>]</index></name></expr>;</expr_stmt>
					<switch pos:line="171" pos:column="41">switch <condition pos:line="171" pos:column="48">(<expr><name pos:line="171" pos:column="49">c</name></expr>)</condition>
					<block pos:line="172" pos:column="41">{
					    <case pos:line="173" pos:column="45">case <expr><lit:literal type="char" pos:line="173" pos:column="50">' '</lit:literal></expr>:
							<expr_stmt><expr><name pos:line="174" pos:column="57">spaces</name><op:operator pos:line="174" pos:column="63">++</op:operator></expr>;</expr_stmt>
							<if pos:line="175" pos:column="57">if <condition pos:line="175" pos:column="60">(<expr><name pos:line="175" pos:column="61">spaces</name> <op:operator pos:line="175" pos:column="68">&gt;=</op:operator> <name pos:line="175" pos:column="71">SpacesPerLevel</name></expr>)</condition><then pos:line="175" pos:column="86">
							<block pos:line="176" pos:column="57">{
								<expr_stmt><expr><name pos:line="177" pos:column="65">spaces</name> <op:operator pos:line="177" pos:column="72">=</op:operator> <lit:literal type="number" pos:line="177" pos:column="74">0</lit:literal></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="178" pos:column="65">level</name><op:operator pos:line="178" pos:column="70">++</op:operator></expr>;</expr_stmt>
							}</block></then></if>

							<expr_stmt><expr><name pos:line="181" pos:column="57">cp</name><op:operator pos:line="181" pos:column="59">++</op:operator></expr>;</expr_stmt>
							<break pos:line="182" pos:column="57">break;</break>
						</case><case pos:line="183" pos:column="49">case <expr><lit:literal type="char" pos:line="183" pos:column="54">'\t'</lit:literal></expr>:
							<expr_stmt><expr><name pos:line="184" pos:column="57">level</name><op:operator pos:line="184" pos:column="62">++</op:operator></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="185" pos:column="57">cp</name><op:operator pos:line="185" pos:column="59">++</op:operator></expr>;</expr_stmt>
							<break pos:line="186" pos:column="57">break;</break>
						</case><default pos:line="187" pos:column="49">default:
							<expr_stmt><expr><name pos:line="188" pos:column="57">textStart</name> <op:operator pos:line="188" pos:column="67">=</op:operator> <lit:literal type="boolean" pos:line="188" pos:column="69">true</lit:literal></expr>;</expr_stmt>
							<break pos:line="189" pos:column="57">break;</break>
					</default>}</block></switch>
				}</block></while>

				<decl_stmt><decl><type><name pos:line="193" pos:column="33">var</name></type> <name pos:line="193" pos:column="37">t</name> <init pos:line="193" pos:column="39">= <expr><call><name><name pos:line="193" pos:column="41">line</name><op:operator pos:line="193" pos:column="45">.</op:operator><name pos:line="193" pos:column="46">Substring</name></name><argument_list pos:line="193" pos:column="55">(<argument><expr><name pos:line="193" pos:column="56">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="194" pos:column="33">if <condition pos:line="194" pos:column="36">(<expr><name><name pos:line="194" pos:column="37">t</name><op:operator pos:line="194" pos:column="38">.</op:operator><name pos:line="194" pos:column="39">Length</name></name> <op:operator pos:line="194" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="194" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="194" pos:column="51">
					<continue pos:line="195" pos:column="41">continue;</continue></then></if>
				<decl_stmt><decl><type><name pos:line="196" pos:column="33">var</name></type> <name pos:line="196" pos:column="37">location</name> <init pos:line="196" pos:column="46">= <expr><op:operator pos:line="196" pos:column="48">new</op:operator> <name><name pos:line="196" pos:column="52">MiniYamlNode</name><op:operator pos:line="196" pos:column="64">.</op:operator><name pos:line="196" pos:column="65">SourceLocation</name></name> <block pos:line="196" pos:column="80">{ <expr><name pos:line="196" pos:column="82">Filename</name> <op:operator pos:line="196" pos:column="91">=</op:operator> <name pos:line="196" pos:column="93">filename</name></expr>, <expr><name pos:line="196" pos:column="103">Line</name> <op:operator pos:line="196" pos:column="108">=</op:operator> <name pos:line="196" pos:column="110">lineNo</name></expr> }</block></expr></init></decl>;</decl_stmt>

				<if pos:line="198" pos:column="33">if <condition pos:line="198" pos:column="36">(<expr><name><name pos:line="198" pos:column="37">levels</name><op:operator pos:line="198" pos:column="43">.</op:operator><name pos:line="198" pos:column="44">Count</name></name> <op:operator pos:line="198" pos:column="50">&lt;=</op:operator> <name pos:line="198" pos:column="53">level</name></expr>)</condition><then pos:line="198" pos:column="59">
					<throw pos:line="199" pos:column="41">throw <expr><op:operator pos:line="199" pos:column="47">new</op:operator> <call><name pos:line="199" pos:column="51">YamlException</name><argument_list pos:line="199" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="199" pos:column="65">"Bad indent in miniyaml at {0}"</lit:literal><op:operator pos:line="199" pos:column="96">.</op:operator><call><name pos:line="199" pos:column="97">F</name><argument_list pos:line="199" pos:column="98">(<argument><expr><name pos:line="199" pos:column="99">location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
				<while pos:line="200" pos:column="33">while <condition pos:line="200" pos:column="39">(<expr><name><name pos:line="200" pos:column="40">levels</name><op:operator pos:line="200" pos:column="46">.</op:operator><name pos:line="200" pos:column="47">Count</name></name> <op:operator pos:line="200" pos:column="53">&gt;</op:operator> <name pos:line="200" pos:column="55">level</name> <op:operator pos:line="200" pos:column="61">+</op:operator> <lit:literal type="number" pos:line="200" pos:column="63">1</lit:literal></expr>)</condition>
					<expr_stmt><expr><call><name><name pos:line="201" pos:column="41">levels</name><op:operator pos:line="201" pos:column="47">.</op:operator><name pos:line="201" pos:column="48">RemoveAt</name></name><argument_list pos:line="201" pos:column="56">(<argument><expr><name><name pos:line="201" pos:column="57">levels</name><op:operator pos:line="201" pos:column="63">.</op:operator><name pos:line="201" pos:column="64">Count</name></name> <op:operator pos:line="201" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="201" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>

				<decl_stmt><decl><type><name pos:line="203" pos:column="33">var</name></type> <name pos:line="203" pos:column="37">d</name> <init pos:line="203" pos:column="39">= <expr><op:operator pos:line="203" pos:column="41">new</op:operator> <call><name><name pos:line="203" pos:column="45">List</name><argument_list pos:line="203" pos:column="49">&lt;<argument><name pos:line="203" pos:column="50">MiniYamlNode</name></argument>&gt;</argument_list></name><argument_list pos:line="203" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="204" pos:column="33">var</name></type> <name pos:line="204" pos:column="37">rhs</name> <init pos:line="204" pos:column="41">= <expr><call><name pos:line="204" pos:column="43">SplitAtColon</name><argument_list pos:line="204" pos:column="55">(<argument><expr pos:line="204" pos:column="56">ref <name pos:line="204" pos:column="60">t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="205" pos:column="33">levels</name><index pos:line="205" pos:column="39">[<expr><name pos:line="205" pos:column="40">level</name></expr>]</index></name><op:operator pos:line="205" pos:column="46">.</op:operator><call><name pos:line="205" pos:column="47">Add</name><argument_list pos:line="205" pos:column="50">(<argument><expr><op:operator pos:line="205" pos:column="51">new</op:operator> <call><name pos:line="205" pos:column="55">MiniYamlNode</name><argument_list pos:line="205" pos:column="67">(<argument><expr><name pos:line="205" pos:column="68">t</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="71">rhs</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="76">d</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="79">location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><name pos:line="207" pos:column="33">levels</name><op:operator pos:line="207" pos:column="39">.</op:operator><name pos:line="207" pos:column="40">Add</name></name><argument_list pos:line="207" pos:column="43">(<argument><expr><name pos:line="207" pos:column="44">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>

			<return pos:line="210" pos:column="25">return <expr><name><name pos:line="210" pos:column="32">levels</name><index pos:line="210" pos:column="38">[<expr><lit:literal type="number" pos:line="210" pos:column="39">0</lit:literal></expr>]</index></name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="213" pos:column="17">static</specifier> <name pos:line="213" pos:column="24">string</name></type> <name pos:line="213" pos:column="31">SplitAtColon</name><parameter_list pos:line="213" pos:column="43">(<param><decl><type><specifier pos:line="213" pos:column="44">ref</specifier> <name pos:line="213" pos:column="48">string</name></type> <name pos:line="213" pos:column="55">t</name></decl></param>)</parameter_list>
		<block pos:line="214" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="215" pos:column="25">var</name></type> <name pos:line="215" pos:column="29">colon</name> <init pos:line="215" pos:column="35">= <expr><call><name><name pos:line="215" pos:column="37">t</name><op:operator pos:line="215" pos:column="38">.</op:operator><name pos:line="215" pos:column="39">IndexOf</name></name><argument_list pos:line="215" pos:column="46">(<argument><expr><lit:literal type="char" pos:line="215" pos:column="47">':'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="216" pos:column="25">if <condition pos:line="216" pos:column="28">(<expr><name pos:line="216" pos:column="29">colon</name> <op:operator pos:line="216" pos:column="35">==</op:operator> <op:operator pos:line="216" pos:column="38">-</op:operator><lit:literal type="number" pos:line="216" pos:column="39">1</lit:literal></expr>)</condition><then pos:line="216" pos:column="41">
				<return pos:line="217" pos:column="33">return <expr><name pos:line="217" pos:column="40">null</name></expr>;</return></then></if>
			<decl_stmt><decl><type><name pos:line="218" pos:column="25">var</name></type> <name pos:line="218" pos:column="29">ret</name> <init pos:line="218" pos:column="33">= <expr><call><name><name pos:line="218" pos:column="35">t</name><op:operator pos:line="218" pos:column="36">.</op:operator><name pos:line="218" pos:column="37">Substring</name></name><argument_list pos:line="218" pos:column="46">(<argument><expr><name pos:line="218" pos:column="47">colon</name> <op:operator pos:line="218" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="218" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="218" pos:column="57">.</op:operator><call><name pos:line="218" pos:column="58">Trim</name><argument_list pos:line="218" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="219" pos:column="25">if <condition pos:line="219" pos:column="28">(<expr><name><name pos:line="219" pos:column="29">ret</name><op:operator pos:line="219" pos:column="32">.</op:operator><name pos:line="219" pos:column="33">Length</name></name> <op:operator pos:line="219" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="219" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="219" pos:column="45">
				<expr_stmt><expr><name pos:line="220" pos:column="33">ret</name> <op:operator pos:line="220" pos:column="37">=</op:operator> <name pos:line="220" pos:column="39">null</name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="221" pos:column="25">t</name> <op:operator pos:line="221" pos:column="27">=</op:operator> <call><name><name pos:line="221" pos:column="29">t</name><op:operator pos:line="221" pos:column="30">.</op:operator><name pos:line="221" pos:column="31">Substring</name></name><argument_list pos:line="221" pos:column="40">(<argument><expr><lit:literal type="number" pos:line="221" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><name pos:line="221" pos:column="44">colon</name></expr></argument>)</argument_list></call><op:operator pos:line="221" pos:column="50">.</op:operator><call><name pos:line="221" pos:column="51">Trim</name><argument_list pos:line="221" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="222" pos:column="25">return <expr><name pos:line="222" pos:column="32">ret</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="225" pos:column="17">public</specifier> <specifier pos:line="225" pos:column="24">static</specifier> <name><name pos:line="225" pos:column="31">List</name><argument_list pos:line="225" pos:column="35">&lt;<argument><name pos:line="225" pos:column="36">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="225" pos:column="50">FromFileInPackage</name><parameter_list pos:line="225" pos:column="67">(<param><decl><type><name pos:line="225" pos:column="68">string</name></type> <name pos:line="225" pos:column="75">path</name></decl></param>)</parameter_list>
		<block pos:line="226" pos:column="17">{
			<using pos:line="227" pos:column="25">using (<decl><type><name pos:line="227" pos:column="32">var</name></type> <name pos:line="227" pos:column="36">stream</name> <init pos:line="227" pos:column="43">= <expr><call><name><name pos:line="227" pos:column="45">GlobalFileSystem</name><op:operator pos:line="227" pos:column="61">.</op:operator><name pos:line="227" pos:column="62">Open</name></name><argument_list pos:line="227" pos:column="66">(<argument><expr><name pos:line="227" pos:column="67">path</name></expr></argument>)</argument_list></call></expr></init></decl>)
				<return pos:line="228" pos:column="33">return <expr><call><name pos:line="228" pos:column="40">FromLines</name><argument_list pos:line="228" pos:column="49">(<argument><expr><call><name><name pos:line="228" pos:column="50">stream</name><op:operator pos:line="228" pos:column="56">.</op:operator><name pos:line="228" pos:column="57">ReadAllLines</name></name><argument_list pos:line="228" pos:column="69">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="228" pos:column="73">path</name></expr></argument>)</argument_list></call></expr>;</return></using>
		}</block></function>

		<function><type><specifier pos:line="231" pos:column="17">public</specifier> <specifier pos:line="231" pos:column="24">static</specifier> <name><name pos:line="231" pos:column="31">Dictionary</name><argument_list pos:line="231" pos:column="41">&lt;<argument><name pos:line="231" pos:column="42">string</name></argument>, <argument><name pos:line="231" pos:column="50">MiniYaml</name></argument>&gt;</argument_list></name></type> <name pos:line="231" pos:column="60">DictFromFile</name><parameter_list pos:line="231" pos:column="72">(<param><decl><type><name pos:line="231" pos:column="73">string</name></type> <name pos:line="231" pos:column="80">path</name></decl></param>)</parameter_list>
		<block pos:line="232" pos:column="17">{
			<return pos:line="233" pos:column="25">return <expr><call><name pos:line="233" pos:column="32">FromFile</name><argument_list pos:line="233" pos:column="40">(<argument><expr><name pos:line="233" pos:column="41">path</name></expr></argument>)</argument_list></call><op:operator pos:line="233" pos:column="46">.</op:operator><call><name pos:line="233" pos:column="47">ToDictionary</name><argument_list pos:line="233" pos:column="59">(<argument><expr><lambda><name pos:line="233" pos:column="60">x</name> <op:operator pos:line="233" pos:column="62">=&gt;</op:operator> <name><name pos:line="233" pos:column="65">x</name><op:operator pos:line="233" pos:column="66">.</op:operator><name pos:line="233" pos:column="67">Key</name></name></lambda></expr></argument>, <argument><expr><lambda><name pos:line="233" pos:column="72">x</name> <op:operator pos:line="233" pos:column="74">=&gt;</op:operator> <name><name pos:line="233" pos:column="77">x</name><op:operator pos:line="233" pos:column="78">.</op:operator><name pos:line="233" pos:column="79">Value</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="236" pos:column="17">public</specifier> <specifier pos:line="236" pos:column="24">static</specifier> <name><name pos:line="236" pos:column="31">Dictionary</name><argument_list pos:line="236" pos:column="41">&lt;<argument><name pos:line="236" pos:column="42">string</name></argument>, <argument><name pos:line="236" pos:column="50">MiniYaml</name></argument>&gt;</argument_list></name></type> <name pos:line="236" pos:column="60">DictFromStream</name><parameter_list pos:line="236" pos:column="74">(<param><decl><type><name pos:line="236" pos:column="75">Stream</name></type> <name pos:line="236" pos:column="82">stream</name></decl></param>)</parameter_list>
		<block pos:line="237" pos:column="17">{
			<return pos:line="238" pos:column="25">return <expr><call><name pos:line="238" pos:column="32">FromStream</name><argument_list pos:line="238" pos:column="42">(<argument><expr><name pos:line="238" pos:column="43">stream</name></expr></argument>)</argument_list></call><op:operator pos:line="238" pos:column="50">.</op:operator><call><name pos:line="238" pos:column="51">ToDictionary</name><argument_list pos:line="238" pos:column="63">(<argument><expr><lambda><name pos:line="238" pos:column="64">x</name> <op:operator pos:line="238" pos:column="66">=&gt;</op:operator> <name><name pos:line="238" pos:column="69">x</name><op:operator pos:line="238" pos:column="70">.</op:operator><name pos:line="238" pos:column="71">Key</name></name></lambda></expr></argument>, <argument><expr><lambda><name pos:line="238" pos:column="76">x</name> <op:operator pos:line="238" pos:column="78">=&gt;</op:operator> <name><name pos:line="238" pos:column="81">x</name><op:operator pos:line="238" pos:column="82">.</op:operator><name pos:line="238" pos:column="83">Value</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="241" pos:column="17">public</specifier> <specifier pos:line="241" pos:column="24">static</specifier> <name><name pos:line="241" pos:column="31">List</name><argument_list pos:line="241" pos:column="35">&lt;<argument><name pos:line="241" pos:column="36">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="241" pos:column="50">FromFile</name><parameter_list pos:line="241" pos:column="58">(<param><decl><type><name pos:line="241" pos:column="59">string</name></type> <name pos:line="241" pos:column="66">path</name></decl></param>)</parameter_list>
		<block pos:line="242" pos:column="17">{
			<return pos:line="243" pos:column="25">return <expr><call><name pos:line="243" pos:column="32">FromLines</name><argument_list pos:line="243" pos:column="41">(<argument><expr><call><name><name pos:line="243" pos:column="42">File</name><op:operator pos:line="243" pos:column="46">.</op:operator><name pos:line="243" pos:column="47">ReadAllLines</name></name><argument_list pos:line="243" pos:column="59">(<argument><expr><name pos:line="243" pos:column="60">path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="243" pos:column="67">path</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="246" pos:column="17">public</specifier> <specifier pos:line="246" pos:column="24">static</specifier> <name><name pos:line="246" pos:column="31">List</name><argument_list pos:line="246" pos:column="35">&lt;<argument><name pos:line="246" pos:column="36">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="246" pos:column="50">FromStream</name><parameter_list pos:line="246" pos:column="60">(<param><decl><type><name pos:line="246" pos:column="61">Stream</name></type> <name pos:line="246" pos:column="68">s</name></decl></param>, <param><decl><type><name pos:line="246" pos:column="71">string</name></type> <name pos:line="246" pos:column="78">fileName</name> <init pos:line="246" pos:column="87">= <expr><lit:literal type="string" pos:line="246" pos:column="89">"&lt;no filename available&gt;"</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="247" pos:column="17">{
			<using pos:line="248" pos:column="25">using (<decl><type><name pos:line="248" pos:column="32">var</name></type> <name pos:line="248" pos:column="36">reader</name> <init pos:line="248" pos:column="43">= <expr><op:operator pos:line="248" pos:column="45">new</op:operator> <call><name pos:line="248" pos:column="49">StreamReader</name><argument_list pos:line="248" pos:column="61">(<argument><expr><name pos:line="248" pos:column="62">s</name></expr></argument>)</argument_list></call></expr></init></decl>)
				<return pos:line="249" pos:column="33">return <expr><call><name pos:line="249" pos:column="40">FromString</name><argument_list pos:line="249" pos:column="50">(<argument><expr><call><name><name pos:line="249" pos:column="51">reader</name><op:operator pos:line="249" pos:column="57">.</op:operator><name pos:line="249" pos:column="58">ReadToEnd</name></name><argument_list pos:line="249" pos:column="67">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="249" pos:column="71">fileName</name></expr></argument>)</argument_list></call></expr>;</return></using>
		}</block></function>

		<function><type><specifier pos:line="252" pos:column="17">public</specifier> <specifier pos:line="252" pos:column="24">static</specifier> <name><name pos:line="252" pos:column="31">List</name><argument_list pos:line="252" pos:column="35">&lt;<argument><name pos:line="252" pos:column="36">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="252" pos:column="50">FromString</name><parameter_list pos:line="252" pos:column="60">(<param><decl><type><name pos:line="252" pos:column="61">string</name></type> <name pos:line="252" pos:column="68">text</name></decl></param>, <param><decl><type><name pos:line="252" pos:column="74">string</name></type> <name pos:line="252" pos:column="81">fileName</name> <init pos:line="252" pos:column="90">= <expr><lit:literal type="string" pos:line="252" pos:column="92">"&lt;no filename available&gt;"</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="253" pos:column="17">{
			<return pos:line="254" pos:column="25">return <expr><call><name pos:line="254" pos:column="32">FromLines</name><argument_list pos:line="254" pos:column="41">(<argument><expr><call><name><name pos:line="254" pos:column="42">text</name><op:operator pos:line="254" pos:column="46">.</op:operator><name pos:line="254" pos:column="47">Split</name></name><argument_list pos:line="254" pos:column="52">(<argument><expr><op:operator pos:line="254" pos:column="53">new</op:operator><index pos:line="254" pos:column="56">[]</index> <block pos:line="254" pos:column="59">{ <expr><lit:literal type="string" pos:line="254" pos:column="61">"\r\n"</lit:literal></expr><op:operator pos:line="254" pos:column="67">,</op:operator> <expr><lit:literal type="string" pos:line="254" pos:column="69">"\n"</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="254" pos:column="77">StringSplitOptions</name><op:operator pos:line="254" pos:column="95">.</op:operator><name pos:line="254" pos:column="96">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="254" pos:column="117">fileName</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="257" pos:column="17">public</specifier> <specifier pos:line="257" pos:column="24">static</specifier> <name><name pos:line="257" pos:column="31">List</name><argument_list pos:line="257" pos:column="35">&lt;<argument><name pos:line="257" pos:column="36">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="257" pos:column="50">MergeStrict</name><parameter_list pos:line="257" pos:column="61">(<param><decl><type><name><name pos:line="257" pos:column="62">List</name><argument_list pos:line="257" pos:column="66">&lt;<argument><name pos:line="257" pos:column="67">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="257" pos:column="81">a</name></decl></param>, <param><decl><type><name><name pos:line="257" pos:column="84">List</name><argument_list pos:line="257" pos:column="88">&lt;<argument><name pos:line="257" pos:column="89">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="257" pos:column="103">b</name></decl></param>)</parameter_list>
		<block pos:line="258" pos:column="17">{
			<return pos:line="259" pos:column="25">return <expr><call><name pos:line="259" pos:column="32">Merge</name><argument_list pos:line="259" pos:column="37">(<argument><expr><name pos:line="259" pos:column="38">a</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="41">b</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="259" pos:column="44">false</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="262" pos:column="17">public</specifier> <specifier pos:line="262" pos:column="24">static</specifier> <name><name pos:line="262" pos:column="31">List</name><argument_list pos:line="262" pos:column="35">&lt;<argument><name pos:line="262" pos:column="36">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="262" pos:column="50">MergeLiberal</name><parameter_list pos:line="262" pos:column="62">(<param><decl><type><name><name pos:line="262" pos:column="63">List</name><argument_list pos:line="262" pos:column="67">&lt;<argument><name pos:line="262" pos:column="68">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="262" pos:column="82">a</name></decl></param>, <param><decl><type><name><name pos:line="262" pos:column="85">List</name><argument_list pos:line="262" pos:column="89">&lt;<argument><name pos:line="262" pos:column="90">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="262" pos:column="104">b</name></decl></param>)</parameter_list>
		<block pos:line="263" pos:column="17">{
			<return pos:line="264" pos:column="25">return <expr><call><name pos:line="264" pos:column="32">Merge</name><argument_list pos:line="264" pos:column="37">(<argument><expr><name pos:line="264" pos:column="38">a</name></expr></argument>, <argument><expr><name pos:line="264" pos:column="41">b</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="264" pos:column="44">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="267" pos:column="17">static</specifier> <name><name pos:line="267" pos:column="24">List</name><argument_list pos:line="267" pos:column="28">&lt;<argument><name pos:line="267" pos:column="29">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="267" pos:column="43">Merge</name><parameter_list pos:line="267" pos:column="48">(<param><decl><type><name><name pos:line="267" pos:column="49">List</name><argument_list pos:line="267" pos:column="53">&lt;<argument><name pos:line="267" pos:column="54">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="267" pos:column="68">a</name></decl></param>, <param><decl><type><name><name pos:line="267" pos:column="71">List</name><argument_list pos:line="267" pos:column="75">&lt;<argument><name pos:line="267" pos:column="76">MiniYamlNode</name></argument>&gt;</argument_list></name></type> <name pos:line="267" pos:column="90">b</name></decl></param>, <param><decl><type><name pos:line="267" pos:column="93">bool</name></type> <name pos:line="267" pos:column="98">allowUnresolvedRemoves</name> <init pos:line="267" pos:column="121">= <expr><lit:literal type="boolean" pos:line="267" pos:column="123">false</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="268" pos:column="17">{
			<if pos:line="269" pos:column="25">if <condition pos:line="269" pos:column="28">(<expr><name><name pos:line="269" pos:column="29">a</name><op:operator pos:line="269" pos:column="30">.</op:operator><name pos:line="269" pos:column="31">Count</name></name> <op:operator pos:line="269" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="269" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="269" pos:column="42">
				<return pos:line="270" pos:column="33">return <expr><name pos:line="270" pos:column="40">b</name></expr>;</return></then></if>
			<if pos:line="271" pos:column="25">if <condition pos:line="271" pos:column="28">(<expr><name><name pos:line="271" pos:column="29">b</name><op:operator pos:line="271" pos:column="30">.</op:operator><name pos:line="271" pos:column="31">Count</name></name> <op:operator pos:line="271" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="271" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="271" pos:column="42">
				<return pos:line="272" pos:column="33">return <expr><name pos:line="272" pos:column="40">a</name></expr>;</return></then></if>

			<decl_stmt><decl><type><name pos:line="274" pos:column="25">var</name></type> <name pos:line="274" pos:column="29">ret</name> <init pos:line="274" pos:column="33">= <expr><op:operator pos:line="274" pos:column="35">new</op:operator> <call><name><name pos:line="274" pos:column="39">List</name><argument_list pos:line="274" pos:column="43">&lt;<argument><name pos:line="274" pos:column="44">MiniYamlNode</name></argument>&gt;</argument_list></name><argument_list pos:line="274" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="276" pos:column="25">var</name></type> <name pos:line="276" pos:column="29">dictA</name> <init pos:line="276" pos:column="35">= <expr><call><name><name pos:line="276" pos:column="37">a</name><op:operator pos:line="276" pos:column="38">.</op:operator><name pos:line="276" pos:column="39">ToDictionaryWithConflictLog</name></name><argument_list pos:line="276" pos:column="66">(<argument><expr><lambda><name pos:line="276" pos:column="67">x</name> <op:operator pos:line="276" pos:column="69">=&gt;</op:operator> <name><name pos:line="276" pos:column="72">x</name><op:operator pos:line="276" pos:column="73">.</op:operator><name pos:line="276" pos:column="74">Key</name></name></lambda></expr></argument>, <argument><expr><lit:literal type="string" pos:line="276" pos:column="79">"MiniYaml.Merge"</lit:literal></expr></argument>, <argument><expr><name pos:line="276" pos:column="97">null</name></expr></argument>, <argument><expr><lambda><name pos:line="276" pos:column="103">x</name> <op:operator pos:line="276" pos:column="105">=&gt;</op:operator> <lit:literal type="string" pos:line="276" pos:column="108">"{0} (at {1})"</lit:literal><op:operator pos:line="276" pos:column="122">.</op:operator><call><name pos:line="276" pos:column="123">F</name><argument_list pos:line="276" pos:column="124">(<argument><expr><name><name pos:line="276" pos:column="125">x</name><op:operator pos:line="276" pos:column="126">.</op:operator><name pos:line="276" pos:column="127">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="276" pos:column="132">x</name><op:operator pos:line="276" pos:column="133">.</op:operator><name pos:line="276" pos:column="134">Location</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="277" pos:column="25">var</name></type> <name pos:line="277" pos:column="29">dictB</name> <init pos:line="277" pos:column="35">= <expr><call><name><name pos:line="277" pos:column="37">b</name><op:operator pos:line="277" pos:column="38">.</op:operator><name pos:line="277" pos:column="39">ToDictionaryWithConflictLog</name></name><argument_list pos:line="277" pos:column="66">(<argument><expr><lambda><name pos:line="277" pos:column="67">x</name> <op:operator pos:line="277" pos:column="69">=&gt;</op:operator> <name><name pos:line="277" pos:column="72">x</name><op:operator pos:line="277" pos:column="73">.</op:operator><name pos:line="277" pos:column="74">Key</name></name></lambda></expr></argument>, <argument><expr><lit:literal type="string" pos:line="277" pos:column="79">"MiniYaml.Merge"</lit:literal></expr></argument>, <argument><expr><name pos:line="277" pos:column="97">null</name></expr></argument>, <argument><expr><lambda><name pos:line="277" pos:column="103">x</name> <op:operator pos:line="277" pos:column="105">=&gt;</op:operator> <lit:literal type="string" pos:line="277" pos:column="108">"{0} (at {1})"</lit:literal><op:operator pos:line="277" pos:column="122">.</op:operator><call><name pos:line="277" pos:column="123">F</name><argument_list pos:line="277" pos:column="124">(<argument><expr><name><name pos:line="277" pos:column="125">x</name><op:operator pos:line="277" pos:column="126">.</op:operator><name pos:line="277" pos:column="127">Key</name></name></expr></argument>, <argument><expr><name><name pos:line="277" pos:column="132">x</name><op:operator pos:line="277" pos:column="133">.</op:operator><name pos:line="277" pos:column="134">Location</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="278" pos:column="25">var</name></type> <name pos:line="278" pos:column="29">allKeys</name> <init pos:line="278" pos:column="37">= <expr><call><name><name pos:line="278" pos:column="39">dictA</name><op:operator pos:line="278" pos:column="44">.</op:operator><name pos:line="278" pos:column="45">Keys</name><op:operator pos:line="278" pos:column="49">.</op:operator><name pos:line="278" pos:column="50">Union</name></name><argument_list pos:line="278" pos:column="55">(<argument><expr><name><name pos:line="278" pos:column="56">dictB</name><op:operator pos:line="278" pos:column="61">.</op:operator><name pos:line="278" pos:column="62">Keys</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="280" pos:column="25">var</name></type> <name pos:line="280" pos:column="29">keys</name> <init pos:line="280" pos:column="34">= <expr><call><name><name pos:line="280" pos:column="36">allKeys</name><op:operator pos:line="280" pos:column="43">.</op:operator><name pos:line="280" pos:column="44">Where</name></name><argument_list pos:line="280" pos:column="49">(<argument><expr><lambda><name pos:line="280" pos:column="50">x</name> <op:operator pos:line="280" pos:column="52">=&gt;</op:operator> <name><name pos:line="280" pos:column="55">x</name><op:operator pos:line="280" pos:column="56">.</op:operator><name pos:line="280" pos:column="57">Length</name></name> <op:operator pos:line="280" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="280" pos:column="67">0</lit:literal> <op:operator pos:line="280" pos:column="69">||</op:operator> <name><name pos:line="280" pos:column="72">x</name><index pos:line="280" pos:column="73">[<expr><lit:literal type="number" pos:line="280" pos:column="74">0</lit:literal></expr>]</index></name> <op:operator pos:line="280" pos:column="77">!=</op:operator> <lit:literal type="char" pos:line="280" pos:column="80">'-'</lit:literal></lambda></expr></argument>)</argument_list></call><op:operator pos:line="280" pos:column="84">.</op:operator><call><name pos:line="280" pos:column="85">ToList</name><argument_list pos:line="280" pos:column="91">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="281" pos:column="25">var</name></type> <name pos:line="281" pos:column="29">removeKeys</name> <init pos:line="281" pos:column="40">= <expr><call><name><name pos:line="281" pos:column="42">allKeys</name><op:operator pos:line="281" pos:column="49">.</op:operator><name pos:line="281" pos:column="50">Where</name></name><argument_list pos:line="281" pos:column="55">(<argument><expr><lambda><name pos:line="281" pos:column="56">x</name> <op:operator pos:line="281" pos:column="58">=&gt;</op:operator> <name><name pos:line="281" pos:column="61">x</name><op:operator pos:line="281" pos:column="62">.</op:operator><name pos:line="281" pos:column="63">Length</name></name> <op:operator pos:line="281" pos:column="70">&gt;</op:operator> <lit:literal type="number" pos:line="281" pos:column="72">0</lit:literal> <op:operator pos:line="281" pos:column="74">&amp;&amp;</op:operator> <name><name pos:line="281" pos:column="77">x</name><index pos:line="281" pos:column="78">[<expr><lit:literal type="number" pos:line="281" pos:column="79">0</lit:literal></expr>]</index></name> <op:operator pos:line="281" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="281" pos:column="85">'-'</lit:literal></lambda></expr></argument>)</argument_list></call>
				<op:operator pos:line="282" pos:column="33">.</op:operator><call><name pos:line="282" pos:column="34">Select</name><argument_list pos:line="282" pos:column="40">(<argument><expr><lambda><name pos:line="282" pos:column="41">k</name> <op:operator pos:line="282" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="282" pos:column="46">k</name><op:operator pos:line="282" pos:column="47">.</op:operator><name pos:line="282" pos:column="48">Substring</name></name><argument_list pos:line="282" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="282" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="282" pos:column="61">.</op:operator><call><name pos:line="282" pos:column="62">ToHashSet</name><argument_list pos:line="282" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<foreach pos:line="284" pos:column="25">foreach (<init><decl><type><name pos:line="284" pos:column="34">var</name></type> <name pos:line="284" pos:column="38">key</name> <range pos:line="284" pos:column="42">in <expr><name pos:line="284" pos:column="45">keys</name></expr></range></decl></init>)
			<block pos:line="285" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="286" pos:column="33">MiniYamlNode</name></type> <name pos:line="286" pos:column="46">aa</name></decl><op:operator pos:line="286" pos:column="48">,</op:operator> <decl><type ref="prev"/><name pos:line="286" pos:column="50">bb</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="287" pos:column="33">dictA</name><op:operator pos:line="287" pos:column="38">.</op:operator><name pos:line="287" pos:column="39">TryGetValue</name></name><argument_list pos:line="287" pos:column="50">(<argument><expr><name pos:line="287" pos:column="51">key</name></expr></argument>, <argument><expr pos:line="287" pos:column="56">out <name pos:line="287" pos:column="60">aa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="288" pos:column="33">dictB</name><op:operator pos:line="288" pos:column="38">.</op:operator><name pos:line="288" pos:column="39">TryGetValue</name></name><argument_list pos:line="288" pos:column="50">(<argument><expr><name pos:line="288" pos:column="51">key</name></expr></argument>, <argument><expr pos:line="288" pos:column="56">out <name pos:line="288" pos:column="60">bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if pos:line="290" pos:column="33">if <condition pos:line="290" pos:column="36">(<expr><call><name><name pos:line="290" pos:column="37">removeKeys</name><op:operator pos:line="290" pos:column="47">.</op:operator><name pos:line="290" pos:column="48">Contains</name></name><argument_list pos:line="290" pos:column="56">(<argument><expr><name pos:line="290" pos:column="57">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="290" pos:column="62">
					<expr_stmt><expr><call><name><name pos:line="291" pos:column="41">removeKeys</name><op:operator pos:line="291" pos:column="51">.</op:operator><name pos:line="291" pos:column="52">Remove</name></name><argument_list pos:line="291" pos:column="58">(<argument><expr><name pos:line="291" pos:column="59">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="292" pos:column="33">else
				<block pos:line="293" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="294" pos:column="41">var</name></type> <name pos:line="294" pos:column="45">loc</name> <init pos:line="294" pos:column="49">= <expr><name pos:line="294" pos:column="51">aa</name> <op:operator pos:line="294" pos:column="54">==</op:operator> <name pos:line="294" pos:column="57">null</name> <op:operator pos:line="294" pos:column="62">?</op:operator> <call><name pos:line="294" pos:column="64">default</name><argument_list pos:line="294" pos:column="71">(<argument><expr><name><name pos:line="294" pos:column="72">MiniYamlNode</name><op:operator pos:line="294" pos:column="84">.</op:operator><name pos:line="294" pos:column="85">SourceLocation</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="294" pos:column="101">:</op:operator> <name><name pos:line="294" pos:column="103">aa</name><op:operator pos:line="294" pos:column="105">.</op:operator><name pos:line="294" pos:column="106">Location</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="295" pos:column="41">var</name></type> <name pos:line="295" pos:column="45">merged</name> <init pos:line="295" pos:column="52">= <expr><op:operator pos:line="295" pos:column="54">(</op:operator><name pos:line="295" pos:column="55">aa</name> <op:operator pos:line="295" pos:column="58">==</op:operator> <name pos:line="295" pos:column="61">null</name> <op:operator pos:line="295" pos:column="66">||</op:operator> <name pos:line="295" pos:column="69">bb</name> <op:operator pos:line="295" pos:column="72">==</op:operator> <name pos:line="295" pos:column="75">null</name><op:operator pos:line="295" pos:column="79">)</op:operator> <op:operator pos:line="295" pos:column="81">?</op:operator> <name pos:line="295" pos:column="83">aa</name> <op:operator pos:line="295" pos:column="86">??</op:operator> <name pos:line="295" pos:column="89">bb</name> <op:operator pos:line="295" pos:column="92">:</op:operator> <op:operator pos:line="295" pos:column="94">new</op:operator> <call><name pos:line="295" pos:column="98">MiniYamlNode</name><argument_list pos:line="295" pos:column="110">(<argument><expr><name pos:line="295" pos:column="111">key</name></expr></argument>, <argument><expr><call><name pos:line="295" pos:column="116">Merge</name><argument_list pos:line="295" pos:column="121">(<argument><expr><name><name pos:line="295" pos:column="122">aa</name><op:operator pos:line="295" pos:column="124">.</op:operator><name pos:line="295" pos:column="125">Value</name></name></expr></argument>, <argument><expr><name><name pos:line="295" pos:column="132">bb</name><op:operator pos:line="295" pos:column="134">.</op:operator><name pos:line="295" pos:column="135">Value</name></name></expr></argument>, <argument><expr><name pos:line="295" pos:column="142">allowUnresolvedRemoves</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="295" pos:column="167">loc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="296" pos:column="41">ret</name><op:operator pos:line="296" pos:column="44">.</op:operator><name pos:line="296" pos:column="45">Add</name></name><argument_list pos:line="296" pos:column="48">(<argument><expr><name pos:line="296" pos:column="49">merged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></foreach>

			<if pos:line="300" pos:column="25">if <condition pos:line="300" pos:column="28">(<expr><call><name><name pos:line="300" pos:column="29">removeKeys</name><op:operator pos:line="300" pos:column="39">.</op:operator><name pos:line="300" pos:column="40">Any</name></name><argument_list pos:line="300" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="300" pos:column="46">
			<block pos:line="301" pos:column="25">{
				<if pos:line="302" pos:column="33">if <condition pos:line="302" pos:column="36">(<expr><name pos:line="302" pos:column="37">allowUnresolvedRemoves</name></expr>)</condition><then pos:line="302" pos:column="60">
				<block pos:line="303" pos:column="33">{
					<comment type="line" pos:line="304" pos:column="41">// Add the removal nodes back for the next pass to deal with</comment>
					<foreach pos:line="305" pos:column="41">foreach (<init><decl><type><name pos:line="305" pos:column="50">var</name></type> <name pos:line="305" pos:column="54">k</name> <range pos:line="305" pos:column="56">in <expr><name pos:line="305" pos:column="59">removeKeys</name></expr></range></decl></init>)
					<block pos:line="306" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="307" pos:column="49">var</name></type> <name pos:line="307" pos:column="53">key</name> <init pos:line="307" pos:column="57">= <expr><lit:literal type="string" pos:line="307" pos:column="59">"-"</lit:literal> <op:operator pos:line="307" pos:column="63">+</op:operator> <name pos:line="307" pos:column="65">k</name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="308" pos:column="49">MiniYamlNode</name></type> <name pos:line="308" pos:column="62">rem</name></decl>;</decl_stmt>
						<if pos:line="309" pos:column="49">if <condition pos:line="309" pos:column="52">(<expr><op:operator pos:line="309" pos:column="53">!</op:operator><call><name><name pos:line="309" pos:column="54">dictA</name><op:operator pos:line="309" pos:column="59">.</op:operator><name pos:line="309" pos:column="60">TryGetValue</name></name><argument_list pos:line="309" pos:column="71">(<argument><expr><name pos:line="309" pos:column="72">key</name></expr></argument>, <argument><expr pos:line="309" pos:column="77">out <name pos:line="309" pos:column="81">rem</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="309" pos:column="86">
							<expr_stmt><expr><name pos:line="310" pos:column="57">rem</name> <op:operator pos:line="310" pos:column="61">=</op:operator> <name><name pos:line="310" pos:column="63">dictB</name><index pos:line="310" pos:column="68">[<expr><name pos:line="310" pos:column="69">key</name></expr>]</index></name></expr>;</expr_stmt></then></if>
						<expr_stmt><expr><call><name><name pos:line="311" pos:column="49">ret</name><op:operator pos:line="311" pos:column="52">.</op:operator><name pos:line="311" pos:column="53">Add</name></name><argument_list pos:line="311" pos:column="56">(<argument><expr><name pos:line="311" pos:column="57">rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></foreach>
				}</block></then>
				<else pos:line="314" pos:column="33">else
					<throw pos:line="315" pos:column="41">throw <expr><op:operator pos:line="315" pos:column="47">new</op:operator> <call><name pos:line="315" pos:column="51">YamlException</name><argument_list pos:line="315" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="315" pos:column="65">"Bogus yaml removals: {0}"</lit:literal><op:operator pos:line="315" pos:column="91">.</op:operator><call><name pos:line="315" pos:column="92">F</name><argument_list pos:line="315" pos:column="93">(<argument><expr><call><name><name pos:line="315" pos:column="94">removeKeys</name><op:operator pos:line="315" pos:column="104">.</op:operator><name pos:line="315" pos:column="105">JoinWith</name></name><argument_list pos:line="315" pos:column="113">(<argument><expr><lit:literal type="string" pos:line="315" pos:column="114">", "</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></else></if>
			}</block></then></if>

			<return pos:line="318" pos:column="25">return <expr><name pos:line="318" pos:column="32">ret</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="321" pos:column="17">public</specifier> <specifier pos:line="321" pos:column="24">static</specifier> <name pos:line="321" pos:column="31">MiniYaml</name></type> <name pos:line="321" pos:column="40">MergeLiberal</name><parameter_list pos:line="321" pos:column="52">(<param><decl><type><name pos:line="321" pos:column="53">MiniYaml</name></type> <name pos:line="321" pos:column="62">a</name></decl></param>, <param><decl><type><name pos:line="321" pos:column="65">MiniYaml</name></type> <name pos:line="321" pos:column="74">b</name></decl></param>)</parameter_list>
		<block pos:line="322" pos:column="17">{
			<return pos:line="323" pos:column="25">return <expr><call><name pos:line="323" pos:column="32">Merge</name><argument_list pos:line="323" pos:column="37">(<argument><expr><name pos:line="323" pos:column="38">a</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="41">b</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="323" pos:column="44">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="326" pos:column="17">public</specifier> <specifier pos:line="326" pos:column="24">static</specifier> <name pos:line="326" pos:column="31">MiniYaml</name></type> <name pos:line="326" pos:column="40">MergeStrict</name><parameter_list pos:line="326" pos:column="51">(<param><decl><type><name pos:line="326" pos:column="52">MiniYaml</name></type> <name pos:line="326" pos:column="61">a</name></decl></param>, <param><decl><type><name pos:line="326" pos:column="64">MiniYaml</name></type> <name pos:line="326" pos:column="73">b</name></decl></param>)</parameter_list>
		<block pos:line="327" pos:column="17">{
			<return pos:line="328" pos:column="25">return <expr><call><name pos:line="328" pos:column="32">Merge</name><argument_list pos:line="328" pos:column="37">(<argument><expr><name pos:line="328" pos:column="38">a</name></expr></argument>, <argument><expr><name pos:line="328" pos:column="41">b</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="328" pos:column="44">false</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="331" pos:column="17">static</specifier> <name pos:line="331" pos:column="24">MiniYaml</name></type> <name pos:line="331" pos:column="33">Merge</name><parameter_list pos:line="331" pos:column="38">(<param><decl><type><name pos:line="331" pos:column="39">MiniYaml</name></type> <name pos:line="331" pos:column="48">a</name></decl></param>, <param><decl><type><name pos:line="331" pos:column="51">MiniYaml</name></type> <name pos:line="331" pos:column="60">b</name></decl></param>, <param><decl><type><name pos:line="331" pos:column="63">bool</name></type> <name pos:line="331" pos:column="68">allowUnresolvedRemoves</name></decl></param>)</parameter_list>
		<block pos:line="332" pos:column="17">{
			<if pos:line="333" pos:column="25">if <condition pos:line="333" pos:column="28">(<expr><name pos:line="333" pos:column="29">a</name> <op:operator pos:line="333" pos:column="31">==</op:operator> <name pos:line="333" pos:column="34">null</name></expr>)</condition><then pos:line="333" pos:column="39">
				<return pos:line="334" pos:column="33">return <expr><name pos:line="334" pos:column="40">b</name></expr>;</return></then></if>
			<if pos:line="335" pos:column="25">if <condition pos:line="335" pos:column="28">(<expr><name pos:line="335" pos:column="29">b</name> <op:operator pos:line="335" pos:column="31">==</op:operator> <name pos:line="335" pos:column="34">null</name></expr>)</condition><then pos:line="335" pos:column="39">
				<return pos:line="336" pos:column="33">return <expr><name pos:line="336" pos:column="40">a</name></expr>;</return></then></if>

			<return pos:line="338" pos:column="25">return <expr><op:operator pos:line="338" pos:column="32">new</op:operator> <call><name pos:line="338" pos:column="36">MiniYaml</name><argument_list pos:line="338" pos:column="44">(<argument><expr><name><name pos:line="338" pos:column="45">a</name><op:operator pos:line="338" pos:column="46">.</op:operator><name pos:line="338" pos:column="47">Value</name></name> <op:operator pos:line="338" pos:column="53">??</op:operator> <name><name pos:line="338" pos:column="56">b</name><op:operator pos:line="338" pos:column="57">.</op:operator><name pos:line="338" pos:column="58">Value</name></name></expr></argument>, <argument><expr><call><name pos:line="338" pos:column="65">Merge</name><argument_list pos:line="338" pos:column="70">(<argument><expr><name><name pos:line="338" pos:column="71">a</name><op:operator pos:line="338" pos:column="72">.</op:operator><name pos:line="338" pos:column="73">Nodes</name></name></expr></argument>, <argument><expr><name><name pos:line="338" pos:column="80">b</name><op:operator pos:line="338" pos:column="81">.</op:operator><name pos:line="338" pos:column="82">Nodes</name></name></expr></argument>, <argument><expr><name pos:line="338" pos:column="89">allowUnresolvedRemoves</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="341" pos:column="17">public</specifier> <name><name pos:line="341" pos:column="24">IEnumerable</name><argument_list pos:line="341" pos:column="35">&lt;<argument><name pos:line="341" pos:column="36">string</name></argument>&gt;</argument_list></name></type> <name pos:line="341" pos:column="44">ToLines</name><parameter_list pos:line="341" pos:column="51">(<param><decl><type><name pos:line="341" pos:column="52">string</name></type> <name pos:line="341" pos:column="59">name</name></decl></param>)</parameter_list>
		<block pos:line="342" pos:column="17">{
			<return><specifier pos:line="343" pos:column="25">yield</specifier> return <expr><name pos:line="343" pos:column="38">name</name> <op:operator pos:line="343" pos:column="43">+</op:operator> <lit:literal type="string" pos:line="343" pos:column="45">": "</lit:literal> <op:operator pos:line="343" pos:column="50">+</op:operator> <name pos:line="343" pos:column="52">Value</name></expr>;</return>
			<if pos:line="344" pos:column="25">if <condition pos:line="344" pos:column="28">(<expr><name pos:line="344" pos:column="29">Nodes</name> <op:operator pos:line="344" pos:column="35">!=</op:operator> <name pos:line="344" pos:column="38">null</name></expr>)</condition><then pos:line="344" pos:column="43">
				<foreach pos:line="345" pos:column="33">foreach (<init><decl><type><name pos:line="345" pos:column="42">var</name></type> <name pos:line="345" pos:column="46">line</name> <range pos:line="345" pos:column="51">in <expr><call><name><name pos:line="345" pos:column="54">Nodes</name><op:operator pos:line="345" pos:column="59">.</op:operator><name pos:line="345" pos:column="60">ToLines</name></name><argument_list pos:line="345" pos:column="67">(<argument><expr><lit:literal type="boolean" pos:line="345" pos:column="68">false</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>)
					<return><specifier pos:line="346" pos:column="41">yield</specifier> return <expr><lit:literal type="string" pos:line="346" pos:column="54">"\t"</lit:literal> <op:operator pos:line="346" pos:column="59">+</op:operator> <name pos:line="346" pos:column="61">line</name></expr>;</return></foreach></then></if>
		}</block></function>
	}</block></class>

	<class><attribute pos:line="350" pos:column="9">[<expr><name pos:line="350" pos:column="10">Serializable</name></expr>]</attribute>
	<specifier pos:line="351" pos:column="9">public</specifier> class <name pos:line="351" pos:column="22">YamlException</name> <super pos:line="351" pos:column="36">: <name pos:line="351" pos:column="38">Exception</name></super>
	<block pos:line="352" pos:column="9">{
		<constructor><specifier pos:line="353" pos:column="17">public</specifier> <name pos:line="353" pos:column="24">YamlException</name><parameter_list pos:line="353" pos:column="37">(<param><decl><type><name pos:line="353" pos:column="38">string</name></type> <name pos:line="353" pos:column="45">s</name></decl></param>)</parameter_list> <member_list pos:line="353" pos:column="48">: <call><name pos:line="353" pos:column="50">base</name><argument_list pos:line="353" pos:column="54">(<argument><expr><name pos:line="353" pos:column="55">s</name></expr></argument>)</argument_list></call> </member_list><block pos:line="353" pos:column="58">{ }</block></constructor>
	}</block></class>
}</block></namespace>
</unit>
