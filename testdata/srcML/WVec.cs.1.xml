<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\WVec.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">Eluant</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Eluant</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">ObjectBinding</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">OpenRA</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Scripting</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">OpenRA</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Support</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name pos:line="17" pos:column="11">OpenRA</name>
<block pos:line="18" pos:column="1">{
	<struct><specifier pos:line="19" pos:column="9">public</specifier> struct <name pos:line="19" pos:column="23">WVec</name> <super pos:line="19" pos:column="28">: <name pos:line="19" pos:column="30">IScriptBindable</name>, <name pos:line="19" pos:column="47">ILuaAdditionBinding</name>, <name pos:line="19" pos:column="68">ILuaSubtractionBinding</name>, <name pos:line="19" pos:column="92">ILuaUnaryMinusBinding</name>, <name pos:line="19" pos:column="115">ILuaEqualityBinding</name>, <name pos:line="19" pos:column="136">ILuaTableBinding</name>, <name><name pos:line="19" pos:column="154">IEquatable</name><argument_list pos:line="19" pos:column="164">&lt;<argument><name pos:line="19" pos:column="165">WVec</name></argument>&gt;</argument_list></name></super>
	<block pos:line="20" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="21" pos:column="17">public</specifier> <specifier pos:line="21" pos:column="24">readonly</specifier> <name pos:line="21" pos:column="33">int</name></type> <name pos:line="21" pos:column="37">X</name></decl><op:operator pos:line="21" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="21" pos:column="40">Y</name></decl><op:operator pos:line="21" pos:column="41">,</op:operator> <decl><type ref="prev"/><name pos:line="21" pos:column="43">Z</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="23" pos:column="17">public</specifier> <name pos:line="23" pos:column="24">WVec</name><parameter_list pos:line="23" pos:column="28">(<param><decl><type><name pos:line="23" pos:column="29">int</name></type> <name pos:line="23" pos:column="33">x</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="36">int</name></type> <name pos:line="23" pos:column="40">y</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="43">int</name></type> <name pos:line="23" pos:column="47">z</name></decl></param>)</parameter_list> <block pos:line="23" pos:column="50">{ <expr_stmt><expr><name pos:line="23" pos:column="52">X</name> <op:operator pos:line="23" pos:column="54">=</op:operator> <name pos:line="23" pos:column="56">x</name></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="23" pos:column="59">Y</name> <op:operator pos:line="23" pos:column="61">=</op:operator> <name pos:line="23" pos:column="63">y</name></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="23" pos:column="66">Z</name> <op:operator pos:line="23" pos:column="68">=</op:operator> <name pos:line="23" pos:column="70">z</name></expr>;</expr_stmt> }</block></constructor>
		<constructor><specifier pos:line="24" pos:column="17">public</specifier> <name pos:line="24" pos:column="24">WVec</name><parameter_list pos:line="24" pos:column="28">(<param><decl><type><name pos:line="24" pos:column="29">WDist</name></type> <name pos:line="24" pos:column="35">x</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="38">WDist</name></type> <name pos:line="24" pos:column="44">y</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="47">WDist</name></type> <name pos:line="24" pos:column="53">z</name></decl></param>)</parameter_list> <block pos:line="24" pos:column="56">{ <expr_stmt><expr><name pos:line="24" pos:column="58">X</name> <op:operator pos:line="24" pos:column="60">=</op:operator> <name><name pos:line="24" pos:column="62">x</name><op:operator pos:line="24" pos:column="63">.</op:operator><name pos:line="24" pos:column="64">Length</name></name></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="24" pos:column="72">Y</name> <op:operator pos:line="24" pos:column="74">=</op:operator> <name><name pos:line="24" pos:column="76">y</name><op:operator pos:line="24" pos:column="77">.</op:operator><name pos:line="24" pos:column="78">Length</name></name></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="24" pos:column="86">Z</name> <op:operator pos:line="24" pos:column="88">=</op:operator> <name><name pos:line="24" pos:column="90">z</name><op:operator pos:line="24" pos:column="91">.</op:operator><name pos:line="24" pos:column="92">Length</name></name></expr>;</expr_stmt> }</block></constructor>

		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">public</specifier> <specifier pos:line="26" pos:column="24">static</specifier> <specifier pos:line="26" pos:column="31">readonly</specifier> <name pos:line="26" pos:column="40">WVec</name></type> <name pos:line="26" pos:column="45">Zero</name> <init pos:line="26" pos:column="50">= <expr><op:operator pos:line="26" pos:column="52">new</op:operator> <call><name pos:line="26" pos:column="56">WVec</name><argument_list pos:line="26" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="26" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="26" pos:column="64">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="26" pos:column="67">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="28" pos:column="17">public</specifier> <specifier pos:line="28" pos:column="24">static</specifier> <name pos:line="28" pos:column="31">WVec</name></type> <name pos:line="28" pos:column="36">operator +</name><parameter_list pos:line="28" pos:column="46">(<param><decl><type><name pos:line="28" pos:column="47">WVec</name></type> <name pos:line="28" pos:column="52">a</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="55">WVec</name></type> <name pos:line="28" pos:column="60">b</name></decl></param>)</parameter_list> <block pos:line="28" pos:column="63">{ <return pos:line="28" pos:column="65">return <expr><op:operator pos:line="28" pos:column="72">new</op:operator> <call><name pos:line="28" pos:column="76">WVec</name><argument_list pos:line="28" pos:column="80">(<argument><expr><name><name pos:line="28" pos:column="81">a</name><op:operator pos:line="28" pos:column="82">.</op:operator><name pos:line="28" pos:column="83">X</name></name> <op:operator pos:line="28" pos:column="85">+</op:operator> <name><name pos:line="28" pos:column="87">b</name><op:operator pos:line="28" pos:column="88">.</op:operator><name pos:line="28" pos:column="89">X</name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="92">a</name><op:operator pos:line="28" pos:column="93">.</op:operator><name pos:line="28" pos:column="94">Y</name></name> <op:operator pos:line="28" pos:column="96">+</op:operator> <name><name pos:line="28" pos:column="98">b</name><op:operator pos:line="28" pos:column="99">.</op:operator><name pos:line="28" pos:column="100">Y</name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="103">a</name><op:operator pos:line="28" pos:column="104">.</op:operator><name pos:line="28" pos:column="105">Z</name></name> <op:operator pos:line="28" pos:column="107">+</op:operator> <name><name pos:line="28" pos:column="109">b</name><op:operator pos:line="28" pos:column="110">.</op:operator><name pos:line="28" pos:column="111">Z</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="29" pos:column="17">public</specifier> <specifier pos:line="29" pos:column="24">static</specifier> <name pos:line="29" pos:column="31">WVec</name></type> <name pos:line="29" pos:column="36">operator -</name><parameter_list pos:line="29" pos:column="46">(<param><decl><type><name pos:line="29" pos:column="47">WVec</name></type> <name pos:line="29" pos:column="52">a</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="55">WVec</name></type> <name pos:line="29" pos:column="60">b</name></decl></param>)</parameter_list> <block pos:line="29" pos:column="63">{ <return pos:line="29" pos:column="65">return <expr><op:operator pos:line="29" pos:column="72">new</op:operator> <call><name pos:line="29" pos:column="76">WVec</name><argument_list pos:line="29" pos:column="80">(<argument><expr><name><name pos:line="29" pos:column="81">a</name><op:operator pos:line="29" pos:column="82">.</op:operator><name pos:line="29" pos:column="83">X</name></name> <op:operator pos:line="29" pos:column="85">-</op:operator> <name><name pos:line="29" pos:column="87">b</name><op:operator pos:line="29" pos:column="88">.</op:operator><name pos:line="29" pos:column="89">X</name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="92">a</name><op:operator pos:line="29" pos:column="93">.</op:operator><name pos:line="29" pos:column="94">Y</name></name> <op:operator pos:line="29" pos:column="96">-</op:operator> <name><name pos:line="29" pos:column="98">b</name><op:operator pos:line="29" pos:column="99">.</op:operator><name pos:line="29" pos:column="100">Y</name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="103">a</name><op:operator pos:line="29" pos:column="104">.</op:operator><name pos:line="29" pos:column="105">Z</name></name> <op:operator pos:line="29" pos:column="107">-</op:operator> <name><name pos:line="29" pos:column="109">b</name><op:operator pos:line="29" pos:column="110">.</op:operator><name pos:line="29" pos:column="111">Z</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="30" pos:column="17">public</specifier> <specifier pos:line="30" pos:column="24">static</specifier> <name pos:line="30" pos:column="31">WVec</name></type> <name pos:line="30" pos:column="36">operator -</name><parameter_list pos:line="30" pos:column="46">(<param><decl><type><name pos:line="30" pos:column="47">WVec</name></type> <name pos:line="30" pos:column="52">a</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="55">{ <return pos:line="30" pos:column="57">return <expr><op:operator pos:line="30" pos:column="64">new</op:operator> <call><name pos:line="30" pos:column="68">WVec</name><argument_list pos:line="30" pos:column="72">(<argument><expr><op:operator pos:line="30" pos:column="73">-</op:operator><name><name pos:line="30" pos:column="74">a</name><op:operator pos:line="30" pos:column="75">.</op:operator><name pos:line="30" pos:column="76">X</name></name></expr></argument>, <argument><expr><op:operator pos:line="30" pos:column="79">-</op:operator><name><name pos:line="30" pos:column="80">a</name><op:operator pos:line="30" pos:column="81">.</op:operator><name pos:line="30" pos:column="82">Y</name></name></expr></argument>, <argument><expr><op:operator pos:line="30" pos:column="85">-</op:operator><name><name pos:line="30" pos:column="86">a</name><op:operator pos:line="30" pos:column="87">.</op:operator><name pos:line="30" pos:column="88">Z</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="31" pos:column="17">public</specifier> <specifier pos:line="31" pos:column="24">static</specifier> <name pos:line="31" pos:column="31">WVec</name></type> <name pos:line="31" pos:column="36">operator /</name><parameter_list pos:line="31" pos:column="46">(<param><decl><type><name pos:line="31" pos:column="47">WVec</name></type> <name pos:line="31" pos:column="52">a</name></decl></param>, <param><decl><type><name pos:line="31" pos:column="55">int</name></type> <name pos:line="31" pos:column="59">b</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="62">{ <return pos:line="31" pos:column="64">return <expr><op:operator pos:line="31" pos:column="71">new</op:operator> <call><name pos:line="31" pos:column="75">WVec</name><argument_list pos:line="31" pos:column="79">(<argument><expr><name><name pos:line="31" pos:column="80">a</name><op:operator pos:line="31" pos:column="81">.</op:operator><name pos:line="31" pos:column="82">X</name></name> <op:operator pos:line="31" pos:column="84">/</op:operator> <name pos:line="31" pos:column="86">b</name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="89">a</name><op:operator pos:line="31" pos:column="90">.</op:operator><name pos:line="31" pos:column="91">Y</name></name> <op:operator pos:line="31" pos:column="93">/</op:operator> <name pos:line="31" pos:column="95">b</name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="98">a</name><op:operator pos:line="31" pos:column="99">.</op:operator><name pos:line="31" pos:column="100">Z</name></name> <op:operator pos:line="31" pos:column="102">/</op:operator> <name pos:line="31" pos:column="104">b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="32" pos:column="17">public</specifier> <specifier pos:line="32" pos:column="24">static</specifier> <name pos:line="32" pos:column="31">WVec</name></type> <name pos:line="32" pos:column="36">operator *</name><parameter_list pos:line="32" pos:column="46">(<param><decl><type><name pos:line="32" pos:column="47">int</name></type> <name pos:line="32" pos:column="51">a</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="54">WVec</name></type> <name pos:line="32" pos:column="59">b</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="62">{ <return pos:line="32" pos:column="64">return <expr><op:operator pos:line="32" pos:column="71">new</op:operator> <call><name pos:line="32" pos:column="75">WVec</name><argument_list pos:line="32" pos:column="79">(<argument><expr><name pos:line="32" pos:column="80">a</name> <op:operator pos:line="32" pos:column="82">*</op:operator> <name><name pos:line="32" pos:column="84">b</name><op:operator pos:line="32" pos:column="85">.</op:operator><name pos:line="32" pos:column="86">X</name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="89">a</name> <op:operator pos:line="32" pos:column="91">*</op:operator> <name><name pos:line="32" pos:column="93">b</name><op:operator pos:line="32" pos:column="94">.</op:operator><name pos:line="32" pos:column="95">Y</name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="98">a</name> <op:operator pos:line="32" pos:column="100">*</op:operator> <name><name pos:line="32" pos:column="102">b</name><op:operator pos:line="32" pos:column="103">.</op:operator><name pos:line="32" pos:column="104">Z</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="33" pos:column="17">public</specifier> <specifier pos:line="33" pos:column="24">static</specifier> <name pos:line="33" pos:column="31">WVec</name></type> <name pos:line="33" pos:column="36">operator *</name><parameter_list pos:line="33" pos:column="46">(<param><decl><type><name pos:line="33" pos:column="47">WVec</name></type> <name pos:line="33" pos:column="52">a</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="55">int</name></type> <name pos:line="33" pos:column="59">b</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="62">{ <return pos:line="33" pos:column="64">return <expr><name pos:line="33" pos:column="71">b</name> <op:operator pos:line="33" pos:column="73">*</op:operator> <name pos:line="33" pos:column="75">a</name></expr>;</return> }</block></function>

		<function><type><specifier pos:line="35" pos:column="17">public</specifier> <specifier pos:line="35" pos:column="24">static</specifier> <name pos:line="35" pos:column="31">bool</name></type> <name pos:line="35" pos:column="36">operator ==</name><parameter_list pos:line="35" pos:column="47">(<param><decl><type><name pos:line="35" pos:column="48">WVec</name></type> <name pos:line="35" pos:column="53">me</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="57">WVec</name></type> <name pos:line="35" pos:column="62">other</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="69">{ <return pos:line="35" pos:column="71">return <expr><name><name pos:line="35" pos:column="78">me</name><op:operator pos:line="35" pos:column="80">.</op:operator><name pos:line="35" pos:column="81">X</name></name> <op:operator pos:line="35" pos:column="83">==</op:operator> <name><name pos:line="35" pos:column="86">other</name><op:operator pos:line="35" pos:column="91">.</op:operator><name pos:line="35" pos:column="92">X</name> <type:modifier pos:line="35" pos:column="94">&amp;&amp;</type:modifier></name> <name><name pos:line="35" pos:column="97">me</name><op:operator pos:line="35" pos:column="99">.</op:operator><name pos:line="35" pos:column="100">Y</name></name> <op:operator pos:line="35" pos:column="102">==</op:operator> <name><name pos:line="35" pos:column="105">other</name><op:operator pos:line="35" pos:column="110">.</op:operator><name pos:line="35" pos:column="111">Y</name> <type:modifier pos:line="35" pos:column="113">&amp;&amp;</type:modifier></name> <name><name pos:line="35" pos:column="116">me</name><op:operator pos:line="35" pos:column="118">.</op:operator><name pos:line="35" pos:column="119">Z</name></name> <op:operator pos:line="35" pos:column="121">==</op:operator> <name><name pos:line="35" pos:column="124">other</name><op:operator pos:line="35" pos:column="129">.</op:operator><name pos:line="35" pos:column="130">Z</name></name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="36" pos:column="17">public</specifier> <specifier pos:line="36" pos:column="24">static</specifier> <name pos:line="36" pos:column="31">bool</name></type> <name pos:line="36" pos:column="36">operator !=</name><parameter_list pos:line="36" pos:column="47">(<param><decl><type><name pos:line="36" pos:column="48">WVec</name></type> <name pos:line="36" pos:column="53">me</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="57">WVec</name></type> <name pos:line="36" pos:column="62">other</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="69">{ <return pos:line="36" pos:column="71">return <expr><op:operator pos:line="36" pos:column="78">!</op:operator><op:operator pos:line="36" pos:column="79">(</op:operator><name pos:line="36" pos:column="80">me</name> <op:operator pos:line="36" pos:column="83">==</op:operator> <name pos:line="36" pos:column="86">other</name><op:operator pos:line="36" pos:column="91">)</op:operator></expr>;</return> }</block></function>

		<function><type><specifier pos:line="38" pos:column="17">public</specifier> <specifier pos:line="38" pos:column="24">static</specifier> <name pos:line="38" pos:column="31">int</name></type> <name pos:line="38" pos:column="35">Dot</name><parameter_list pos:line="38" pos:column="38">(<param><decl><type><name pos:line="38" pos:column="39">WVec</name></type> <name pos:line="38" pos:column="44">a</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="47">WVec</name></type> <name pos:line="38" pos:column="52">b</name></decl></param>)</parameter_list> <block pos:line="38" pos:column="55">{ <return pos:line="38" pos:column="57">return <expr><name><name pos:line="38" pos:column="64">a</name><op:operator pos:line="38" pos:column="65">.</op:operator><name pos:line="38" pos:column="66">X</name> <type:modifier pos:line="38" pos:column="68">*</type:modifier></name> <name><name pos:line="38" pos:column="70">b</name><op:operator pos:line="38" pos:column="71">.</op:operator><name pos:line="38" pos:column="72">X</name></name> <op:operator pos:line="38" pos:column="74">+</op:operator> <name><name pos:line="38" pos:column="76">a</name><op:operator pos:line="38" pos:column="77">.</op:operator><name pos:line="38" pos:column="78">Y</name> <type:modifier pos:line="38" pos:column="80">*</type:modifier></name> <name><name pos:line="38" pos:column="82">b</name><op:operator pos:line="38" pos:column="83">.</op:operator><name pos:line="38" pos:column="84">Y</name></name> <op:operator pos:line="38" pos:column="86">+</op:operator> <name><name pos:line="38" pos:column="88">a</name><op:operator pos:line="38" pos:column="89">.</op:operator><name pos:line="38" pos:column="90">Z</name> <type:modifier pos:line="38" pos:column="92">*</type:modifier></name> <name><name pos:line="38" pos:column="94">b</name><op:operator pos:line="38" pos:column="95">.</op:operator><name pos:line="38" pos:column="96">Z</name></name></expr>;</return> }</block></function>
		<decl_stmt><decl><type><specifier pos:line="39" pos:column="17">public</specifier> <name pos:line="39" pos:column="24">long</name></type> <name pos:line="39" pos:column="29">LengthSquared</name> <block pos:line="39" pos:column="43">{ <function><name pos:line="39" pos:column="45">get</name> <block pos:line="39" pos:column="49">{ <return pos:line="39" pos:column="51">return <expr><op:operator pos:line="39" pos:column="58">(</op:operator><name pos:line="39" pos:column="59">long</name><op:operator pos:line="39" pos:column="63">)</op:operator><name pos:line="39" pos:column="64">X</name> <op:operator pos:line="39" pos:column="66">*</op:operator> <name pos:line="39" pos:column="68">X</name> <op:operator pos:line="39" pos:column="70">+</op:operator> <op:operator pos:line="39" pos:column="72">(</op:operator><name pos:line="39" pos:column="73">long</name><op:operator pos:line="39" pos:column="77">)</op:operator><name pos:line="39" pos:column="78">Y</name> <op:operator pos:line="39" pos:column="80">*</op:operator> <name pos:line="39" pos:column="82">Y</name> <op:operator pos:line="39" pos:column="84">+</op:operator> <op:operator pos:line="39" pos:column="86">(</op:operator><name pos:line="39" pos:column="87">long</name><op:operator pos:line="39" pos:column="91">)</op:operator><name pos:line="39" pos:column="92">Z</name> <op:operator pos:line="39" pos:column="94">*</op:operator> <name pos:line="39" pos:column="96">Z</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="40" pos:column="17">public</specifier> <name pos:line="40" pos:column="24">int</name></type> <name pos:line="40" pos:column="28">Length</name> <block pos:line="40" pos:column="35">{ <function><name pos:line="40" pos:column="37">get</name> <block pos:line="40" pos:column="41">{ <return pos:line="40" pos:column="43">return <expr><op:operator pos:line="40" pos:column="50">(</op:operator><name pos:line="40" pos:column="51">int</name><op:operator pos:line="40" pos:column="54">)</op:operator><call><name><name pos:line="40" pos:column="55">Exts</name><op:operator pos:line="40" pos:column="59">.</op:operator><name pos:line="40" pos:column="60">ISqrt</name></name><argument_list pos:line="40" pos:column="65">(<argument><expr><name pos:line="40" pos:column="66">LengthSquared</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="41" pos:column="17">public</specifier> <name pos:line="41" pos:column="24">long</name></type> <name pos:line="41" pos:column="29">HorizontalLengthSquared</name> <block pos:line="41" pos:column="53">{ <function><name pos:line="41" pos:column="55">get</name> <block pos:line="41" pos:column="59">{ <return pos:line="41" pos:column="61">return <expr><op:operator pos:line="41" pos:column="68">(</op:operator><name pos:line="41" pos:column="69">long</name><op:operator pos:line="41" pos:column="73">)</op:operator><name pos:line="41" pos:column="74">X</name> <op:operator pos:line="41" pos:column="76">*</op:operator> <name pos:line="41" pos:column="78">X</name> <op:operator pos:line="41" pos:column="80">+</op:operator> <op:operator pos:line="41" pos:column="82">(</op:operator><name pos:line="41" pos:column="83">long</name><op:operator pos:line="41" pos:column="87">)</op:operator><name pos:line="41" pos:column="88">Y</name> <op:operator pos:line="41" pos:column="90">*</op:operator> <name pos:line="41" pos:column="92">Y</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="42" pos:column="17">public</specifier> <name pos:line="42" pos:column="24">int</name></type> <name pos:line="42" pos:column="28">HorizontalLength</name> <block pos:line="42" pos:column="45">{ <function><name pos:line="42" pos:column="47">get</name> <block pos:line="42" pos:column="51">{ <return pos:line="42" pos:column="53">return <expr><op:operator pos:line="42" pos:column="60">(</op:operator><name pos:line="42" pos:column="61">int</name><op:operator pos:line="42" pos:column="64">)</op:operator><call><name><name pos:line="42" pos:column="65">Exts</name><op:operator pos:line="42" pos:column="69">.</op:operator><name pos:line="42" pos:column="70">ISqrt</name></name><argument_list pos:line="42" pos:column="75">(<argument><expr><name pos:line="42" pos:column="76">HorizontalLengthSquared</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function> }</block></decl></decl_stmt>

		<function><type><specifier pos:line="44" pos:column="17">public</specifier> <name pos:line="44" pos:column="24">WVec</name></type> <name pos:line="44" pos:column="29">Rotate</name><parameter_list pos:line="44" pos:column="35">(<param><decl><type><name pos:line="44" pos:column="36">WRot</name></type> <name pos:line="44" pos:column="41">rot</name></decl></param>)</parameter_list>
		<block pos:line="45" pos:column="17">{
			<return pos:line="46" pos:column="25">return <expr><call><name pos:line="46" pos:column="32">Rotate</name><argument_list pos:line="46" pos:column="38">(<argument><expr><call><name><name pos:line="46" pos:column="39">rot</name><op:operator pos:line="46" pos:column="42">.</op:operator><name pos:line="46" pos:column="43">AsMatrix</name></name><argument_list pos:line="46" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="49" pos:column="17">public</specifier> <name pos:line="49" pos:column="24">WVec</name></type> <name pos:line="49" pos:column="29">Rotate</name><parameter_list pos:line="49" pos:column="35">(<param><decl><type><name><name pos:line="49" pos:column="36">int</name><index pos:line="49" pos:column="39">[]</index></name></type> <name pos:line="49" pos:column="42">rotationMatrix</name></decl></param>)</parameter_list>
		<block pos:line="50" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="51" pos:column="25">var</name></type> <name pos:line="51" pos:column="29">mtx</name> <init pos:line="51" pos:column="33">= <expr><name pos:line="51" pos:column="35">rotationMatrix</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="52" pos:column="25">var</name></type> <name pos:line="52" pos:column="29">lx</name> <init pos:line="52" pos:column="32">= <expr><op:operator pos:line="52" pos:column="34">(</op:operator><name pos:line="52" pos:column="35">long</name><op:operator pos:line="52" pos:column="39">)</op:operator><name pos:line="52" pos:column="40">X</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="53" pos:column="25">var</name></type> <name pos:line="53" pos:column="29">ly</name> <init pos:line="53" pos:column="32">= <expr><op:operator pos:line="53" pos:column="34">(</op:operator><name pos:line="53" pos:column="35">long</name><op:operator pos:line="53" pos:column="39">)</op:operator><name pos:line="53" pos:column="40">Y</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="54" pos:column="25">var</name></type> <name pos:line="54" pos:column="29">lz</name> <init pos:line="54" pos:column="32">= <expr><op:operator pos:line="54" pos:column="34">(</op:operator><name pos:line="54" pos:column="35">long</name><op:operator pos:line="54" pos:column="39">)</op:operator><name pos:line="54" pos:column="40">Z</name></expr></init></decl>;</decl_stmt>
			<return pos:line="55" pos:column="25">return <expr><op:operator pos:line="55" pos:column="32">new</op:operator> <call><name pos:line="55" pos:column="36">WVec</name><argument_list pos:line="55" pos:column="40">(
				<argument><expr><call pos:line="56" pos:column="33">(<name pos:line="56" pos:column="34">int</name>)<argument_list pos:line="56" pos:column="38">(<argument><expr><op:operator pos:line="56" pos:column="39">(</op:operator><name pos:line="56" pos:column="40">lx</name> <op:operator pos:line="56" pos:column="43">*</op:operator> <name><name pos:line="56" pos:column="45">mtx</name><index pos:line="56" pos:column="48">[<expr><lit:literal type="number" pos:line="56" pos:column="49">0</lit:literal></expr>]</index></name> <op:operator pos:line="56" pos:column="52">+</op:operator> <name pos:line="56" pos:column="54">ly</name> <op:operator pos:line="56" pos:column="57">*</op:operator> <name><name pos:line="56" pos:column="59">mtx</name><index pos:line="56" pos:column="62">[<expr><lit:literal type="number" pos:line="56" pos:column="63">4</lit:literal></expr>]</index></name> <op:operator pos:line="56" pos:column="66">+</op:operator> <name pos:line="56" pos:column="68">lz</name> <op:operator pos:line="56" pos:column="71">*</op:operator> <name><name pos:line="56" pos:column="73">mtx</name><index pos:line="56" pos:column="76">[<expr><lit:literal type="number" pos:line="56" pos:column="77">8</lit:literal></expr>]</index></name><op:operator pos:line="56" pos:column="79">)</op:operator> <op:operator pos:line="56" pos:column="81">/</op:operator> <name><name pos:line="56" pos:column="83">mtx</name><index pos:line="56" pos:column="86">[<expr><lit:literal type="number" pos:line="56" pos:column="87">15</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call pos:line="57" pos:column="33">(<name pos:line="57" pos:column="34">int</name>)<argument_list pos:line="57" pos:column="38">(<argument><expr><op:operator pos:line="57" pos:column="39">(</op:operator><name pos:line="57" pos:column="40">lx</name> <op:operator pos:line="57" pos:column="43">*</op:operator> <name><name pos:line="57" pos:column="45">mtx</name><index pos:line="57" pos:column="48">[<expr><lit:literal type="number" pos:line="57" pos:column="49">1</lit:literal></expr>]</index></name> <op:operator pos:line="57" pos:column="52">+</op:operator> <name pos:line="57" pos:column="54">ly</name> <op:operator pos:line="57" pos:column="57">*</op:operator> <name><name pos:line="57" pos:column="59">mtx</name><index pos:line="57" pos:column="62">[<expr><lit:literal type="number" pos:line="57" pos:column="63">5</lit:literal></expr>]</index></name> <op:operator pos:line="57" pos:column="66">+</op:operator> <name pos:line="57" pos:column="68">lz</name> <op:operator pos:line="57" pos:column="71">*</op:operator> <name><name pos:line="57" pos:column="73">mtx</name><index pos:line="57" pos:column="76">[<expr><lit:literal type="number" pos:line="57" pos:column="77">9</lit:literal></expr>]</index></name><op:operator pos:line="57" pos:column="79">)</op:operator> <op:operator pos:line="57" pos:column="81">/</op:operator> <name><name pos:line="57" pos:column="83">mtx</name><index pos:line="57" pos:column="86">[<expr><lit:literal type="number" pos:line="57" pos:column="87">15</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call pos:line="58" pos:column="33">(<name pos:line="58" pos:column="34">int</name>)<argument_list pos:line="58" pos:column="38">(<argument><expr><op:operator pos:line="58" pos:column="39">(</op:operator><name pos:line="58" pos:column="40">lx</name> <op:operator pos:line="58" pos:column="43">*</op:operator> <name><name pos:line="58" pos:column="45">mtx</name><index pos:line="58" pos:column="48">[<expr><lit:literal type="number" pos:line="58" pos:column="49">2</lit:literal></expr>]</index></name> <op:operator pos:line="58" pos:column="52">+</op:operator> <name pos:line="58" pos:column="54">ly</name> <op:operator pos:line="58" pos:column="57">*</op:operator> <name><name pos:line="58" pos:column="59">mtx</name><index pos:line="58" pos:column="62">[<expr><lit:literal type="number" pos:line="58" pos:column="63">6</lit:literal></expr>]</index></name> <op:operator pos:line="58" pos:column="66">+</op:operator> <name pos:line="58" pos:column="68">lz</name> <op:operator pos:line="58" pos:column="71">*</op:operator> <name><name pos:line="58" pos:column="73">mtx</name><index pos:line="58" pos:column="76">[<expr><lit:literal type="number" pos:line="58" pos:column="77">10</lit:literal></expr>]</index></name><op:operator pos:line="58" pos:column="80">)</op:operator> <op:operator pos:line="58" pos:column="82">/</op:operator> <name><name pos:line="58" pos:column="84">mtx</name><index pos:line="58" pos:column="87">[<expr><lit:literal type="number" pos:line="58" pos:column="88">15</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="61" pos:column="17">public</specifier> <specifier pos:line="61" pos:column="24">static</specifier> <name pos:line="61" pos:column="31">WVec</name></type> <name pos:line="61" pos:column="36">Lerp</name><parameter_list pos:line="61" pos:column="40">(<param><decl><type><name pos:line="61" pos:column="41">WVec</name></type> <name pos:line="61" pos:column="46">a</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="49">WVec</name></type> <name pos:line="61" pos:column="54">b</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="57">int</name></type> <name pos:line="61" pos:column="61">mul</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="66">int</name></type> <name pos:line="61" pos:column="70">div</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="75">{ <return pos:line="61" pos:column="77">return <expr><name pos:line="61" pos:column="84">a</name> <op:operator pos:line="61" pos:column="86">+</op:operator> <op:operator pos:line="61" pos:column="88">(</op:operator><name pos:line="61" pos:column="89">b</name> <op:operator pos:line="61" pos:column="91">-</op:operator> <name pos:line="61" pos:column="93">a</name><op:operator pos:line="61" pos:column="94">)</op:operator> <op:operator pos:line="61" pos:column="96">*</op:operator> <name pos:line="61" pos:column="98">mul</name> <op:operator pos:line="61" pos:column="102">/</op:operator> <name pos:line="61" pos:column="104">div</name></expr>;</return> }</block></function>

		<function><type><specifier pos:line="63" pos:column="17">public</specifier> <specifier pos:line="63" pos:column="24">static</specifier> <name pos:line="63" pos:column="31">WVec</name></type> <name pos:line="63" pos:column="36">LerpQuadratic</name><parameter_list pos:line="63" pos:column="49">(<param><decl><type><name pos:line="63" pos:column="50">WVec</name></type> <name pos:line="63" pos:column="55">a</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="58">WVec</name></type> <name pos:line="63" pos:column="63">b</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="66">WAngle</name></type> <name pos:line="63" pos:column="73">pitch</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="80">int</name></type> <name pos:line="63" pos:column="84">mul</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="89">int</name></type> <name pos:line="63" pos:column="93">div</name></decl></param>)</parameter_list>
		<block pos:line="64" pos:column="17">{
			<comment type="line" pos:line="65" pos:column="25">// Start with a linear lerp between the points</comment>
			<decl_stmt><decl><type><name pos:line="66" pos:column="25">var</name></type> <name pos:line="66" pos:column="29">ret</name> <init pos:line="66" pos:column="33">= <expr><call><name pos:line="66" pos:column="35">Lerp</name><argument_list pos:line="66" pos:column="39">(<argument><expr><name pos:line="66" pos:column="40">a</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="43">b</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="46">mul</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="51">div</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><name><name pos:line="68" pos:column="29">pitch</name><op:operator pos:line="68" pos:column="34">.</op:operator><name pos:line="68" pos:column="35">Angle</name></name> <op:operator pos:line="68" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="68" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="68" pos:column="46">
				<return pos:line="69" pos:column="33">return <expr><name pos:line="69" pos:column="40">ret</name></expr>;</return></then></if>

			<comment type="line" pos:line="71" pos:column="25">// Add an additional quadratic variation to height</comment>
			<comment type="line" pos:line="72" pos:column="25">// Uses fp to avoid integer overflow</comment>
			<decl_stmt><decl><type><name pos:line="73" pos:column="25">var</name></type> <name pos:line="73" pos:column="29">offset</name> <init pos:line="73" pos:column="36">= <expr><call pos:line="73" pos:column="38">(<name pos:line="73" pos:column="39">int</name>)<argument_list pos:line="73" pos:column="43">(<argument><expr><call pos:line="73" pos:column="44">(<name pos:line="73" pos:column="45">float</name>)<argument_list pos:line="73" pos:column="51">(<argument><expr><call pos:line="73" pos:column="52">(<name pos:line="73" pos:column="53">float</name>)<argument_list pos:line="73" pos:column="59">(<argument><expr><name pos:line="73" pos:column="60">b</name> <op:operator pos:line="73" pos:column="62">-</op:operator> <name pos:line="73" pos:column="64">a</name></expr></argument>)</argument_list></call><op:operator pos:line="73" pos:column="66">.</op:operator><name pos:line="73" pos:column="67">Length</name> <op:operator pos:line="73" pos:column="74">*</op:operator> <call><name><name pos:line="73" pos:column="76">pitch</name><op:operator pos:line="73" pos:column="81">.</op:operator><name pos:line="73" pos:column="82">Tan</name></name><argument_list pos:line="73" pos:column="85">()</argument_list></call> <op:operator pos:line="73" pos:column="88">*</op:operator> <name pos:line="73" pos:column="90">mul</name> <op:operator pos:line="73" pos:column="94">*</op:operator> <op:operator pos:line="73" pos:column="96">(</op:operator><name pos:line="73" pos:column="97">div</name> <op:operator pos:line="73" pos:column="101">-</op:operator> <name pos:line="73" pos:column="103">mul</name><op:operator pos:line="73" pos:column="106">)</op:operator></expr></argument>)</argument_list></call> <op:operator pos:line="73" pos:column="109">/</op:operator> <call pos:line="73" pos:column="111">(<name pos:line="73" pos:column="112">float</name>)<argument_list pos:line="73" pos:column="118">(<argument><expr><lit:literal type="number" pos:line="73" pos:column="119">1024</lit:literal> <op:operator pos:line="73" pos:column="124">*</op:operator> <name pos:line="73" pos:column="126">div</name> <op:operator pos:line="73" pos:column="130">*</op:operator> <name pos:line="73" pos:column="132">div</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:line="74" pos:column="25">return <expr><op:operator pos:line="74" pos:column="32">new</op:operator> <call><name pos:line="74" pos:column="36">WVec</name><argument_list pos:line="74" pos:column="40">(<argument><expr><name><name pos:line="74" pos:column="41">ret</name><op:operator pos:line="74" pos:column="44">.</op:operator><name pos:line="74" pos:column="45">X</name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="48">ret</name><op:operator pos:line="74" pos:column="51">.</op:operator><name pos:line="74" pos:column="52">Y</name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="55">ret</name><op:operator pos:line="74" pos:column="58">.</op:operator><name pos:line="74" pos:column="59">Z</name></name> <op:operator pos:line="74" pos:column="61">+</op:operator> <name pos:line="74" pos:column="63">offset</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<comment type="line" pos:line="77" pos:column="17">// Sampled a N-sample probability density function in the range [-1024..1024, -1024..1024]</comment>
		<comment type="line" pos:line="78" pos:column="17">// 1 sample produces a rectangular probability</comment>
		<comment type="line" pos:line="79" pos:column="17">// 2 samples produces a triangular probability</comment>
		<comment type="line" pos:line="80" pos:column="17">// ...</comment>
		<comment type="line" pos:line="81" pos:column="17">// N samples approximates a true gaussian</comment>
		<function><type><specifier pos:line="82" pos:column="17">public</specifier> <specifier pos:line="82" pos:column="24">static</specifier> <name pos:line="82" pos:column="31">WVec</name></type> <name pos:line="82" pos:column="36">FromPDF</name><parameter_list pos:line="82" pos:column="43">(<param><decl><type><name pos:line="82" pos:column="44">MersenneTwister</name></type> <name pos:line="82" pos:column="60">r</name></decl></param>, <param><decl><type><name pos:line="82" pos:column="63">int</name></type> <name pos:line="82" pos:column="67">samples</name></decl></param>)</parameter_list>
		<block pos:line="83" pos:column="17">{
			<return pos:line="84" pos:column="25">return <expr><op:operator pos:line="84" pos:column="32">new</op:operator> <call><name pos:line="84" pos:column="36">WVec</name><argument_list pos:line="84" pos:column="40">(<argument><expr><call><name><name pos:line="84" pos:column="41">WDist</name><op:operator pos:line="84" pos:column="46">.</op:operator><name pos:line="84" pos:column="47">FromPDF</name></name><argument_list pos:line="84" pos:column="54">(<argument><expr><name pos:line="84" pos:column="55">r</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="58">samples</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="84" pos:column="68">WDist</name><op:operator pos:line="84" pos:column="73">.</op:operator><name pos:line="84" pos:column="74">FromPDF</name></name><argument_list pos:line="84" pos:column="81">(<argument><expr><name pos:line="84" pos:column="82">r</name></expr></argument>, <argument><expr><name pos:line="84" pos:column="85">samples</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="95">WDist</name><op:operator pos:line="84" pos:column="100">.</op:operator><name pos:line="84" pos:column="101">Zero</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="87" pos:column="17">public</specifier> <specifier pos:line="87" pos:column="24">override</specifier> <name pos:line="87" pos:column="33">int</name></type> <name pos:line="87" pos:column="37">GetHashCode</name><parameter_list pos:line="87" pos:column="48">()</parameter_list> <block pos:line="87" pos:column="51">{ <return pos:line="87" pos:column="53">return <expr><call><name><name pos:line="87" pos:column="60">X</name><op:operator pos:line="87" pos:column="61">.</op:operator><name pos:line="87" pos:column="62">GetHashCode</name></name><argument_list pos:line="87" pos:column="73">()</argument_list></call> <op:operator pos:line="87" pos:column="76">^</op:operator> <call><name><name pos:line="87" pos:column="78">Y</name><op:operator pos:line="87" pos:column="79">.</op:operator><name pos:line="87" pos:column="80">GetHashCode</name></name><argument_list pos:line="87" pos:column="91">()</argument_list></call> <op:operator pos:line="87" pos:column="94">^</op:operator> <call><name><name pos:line="87" pos:column="96">Z</name><op:operator pos:line="87" pos:column="97">.</op:operator><name pos:line="87" pos:column="98">GetHashCode</name></name><argument_list pos:line="87" pos:column="109">()</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="89" pos:column="17">public</specifier> <name pos:line="89" pos:column="24">bool</name></type> <name pos:line="89" pos:column="29">Equals</name><parameter_list pos:line="89" pos:column="35">(<param><decl><type><name pos:line="89" pos:column="36">WVec</name></type> <name pos:line="89" pos:column="41">other</name></decl></param>)</parameter_list> <block pos:line="89" pos:column="48">{ <return pos:line="89" pos:column="50">return <expr><name pos:line="89" pos:column="57">other</name> <op:operator pos:line="89" pos:column="63">==</op:operator> <name pos:line="89" pos:column="66">this</name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="90" pos:column="17">public</specifier> <specifier pos:line="90" pos:column="24">override</specifier> <name pos:line="90" pos:column="33">bool</name></type> <name pos:line="90" pos:column="38">Equals</name><parameter_list pos:line="90" pos:column="44">(<param><decl><type><name pos:line="90" pos:column="45">object</name></type> <name pos:line="90" pos:column="52">obj</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="57">{ <return pos:line="90" pos:column="59">return <expr><name pos:line="90" pos:column="66">obj</name> <op:operator pos:line="90" pos:column="70">is</op:operator> <name pos:line="90" pos:column="73">WVec</name> <op:operator pos:line="90" pos:column="78">&amp;&amp;</op:operator> <call><name pos:line="90" pos:column="81">Equals</name><argument_list pos:line="90" pos:column="87">(<argument><expr><op:operator pos:line="90" pos:column="88">(</op:operator><name pos:line="90" pos:column="89">WVec</name><op:operator pos:line="90" pos:column="93">)</op:operator><name pos:line="90" pos:column="94">obj</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="92" pos:column="17">public</specifier> <specifier pos:line="92" pos:column="24">override</specifier> <name pos:line="92" pos:column="33">string</name></type> <name pos:line="92" pos:column="40">ToString</name><parameter_list pos:line="92" pos:column="48">()</parameter_list> <block pos:line="92" pos:column="51">{ <return pos:line="92" pos:column="53">return <expr><name pos:line="92" pos:column="60">X</name> <op:operator pos:line="92" pos:column="62">+</op:operator> <lit:literal type="string" pos:line="92" pos:column="64">","</lit:literal> <op:operator pos:line="92" pos:column="68">+</op:operator> <name pos:line="92" pos:column="70">Y</name> <op:operator pos:line="92" pos:column="72">+</op:operator> <lit:literal type="string" pos:line="92" pos:column="74">","</lit:literal> <op:operator pos:line="92" pos:column="78">+</op:operator> <name pos:line="92" pos:column="80">Z</name></expr>;</return> }</block></function>

		<cpp:region pos:line="94" pos:column="17">#<cpp:directive pos:line="94" pos:column="18">region</cpp:directive> Scripting interface</cpp:region>

		<function><type><specifier pos:line="96" pos:column="17">public</specifier> <name pos:line="96" pos:column="24">LuaValue</name></type> <name pos:line="96" pos:column="33">Add</name><parameter_list pos:line="96" pos:column="36">(<param><decl><type><name pos:line="96" pos:column="37">LuaRuntime</name></type> <name pos:line="96" pos:column="48">runtime</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="57">LuaValue</name></type> <name pos:line="96" pos:column="66">left</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="72">LuaValue</name></type> <name pos:line="96" pos:column="81">right</name></decl></param>)</parameter_list>
		<block pos:line="97" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="98" pos:column="25">WVec</name></type> <name pos:line="98" pos:column="30">a</name></decl><op:operator pos:line="98" pos:column="31">,</op:operator> <decl><type ref="prev"/><name pos:line="98" pos:column="33">b</name></decl>;</decl_stmt>
			<if pos:line="99" pos:column="25">if <condition pos:line="99" pos:column="28">(<expr><op:operator pos:line="99" pos:column="29">!</op:operator><call><name><name pos:line="99" pos:column="30">left</name><op:operator pos:line="99" pos:column="34">.</op:operator><name><name pos:line="99" pos:column="35">TryGetClrValue</name><argument_list pos:line="99" pos:column="49">&lt;<argument><name pos:line="99" pos:column="50">WVec</name></argument>&gt;</argument_list></name></name><argument_list pos:line="99" pos:column="55">(<argument><expr pos:line="99" pos:column="56">out <name pos:line="99" pos:column="60">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="99" pos:column="63">||</op:operator> <op:operator pos:line="99" pos:column="66">!</op:operator><call><name><name pos:line="99" pos:column="67">right</name><op:operator pos:line="99" pos:column="72">.</op:operator><name><name pos:line="99" pos:column="73">TryGetClrValue</name><argument_list pos:line="99" pos:column="87">&lt;<argument><name pos:line="99" pos:column="88">WVec</name></argument>&gt;</argument_list></name></name><argument_list pos:line="99" pos:column="93">(<argument><expr pos:line="99" pos:column="94">out <name pos:line="99" pos:column="98">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="99" pos:column="101">
				<throw pos:line="100" pos:column="33">throw <expr><op:operator pos:line="100" pos:column="39">new</op:operator> <call><name pos:line="100" pos:column="43">LuaException</name><argument_list pos:line="100" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="56">"Attempted to call WVec.Add(WVec, WVec) with invalid arguments ({0}, {1})"</lit:literal><op:operator pos:line="100" pos:column="130">.</op:operator><call><name pos:line="100" pos:column="131">F</name><argument_list pos:line="100" pos:column="132">(<argument><expr><call><name><name pos:line="100" pos:column="133">left</name><op:operator pos:line="100" pos:column="137">.</op:operator><name pos:line="100" pos:column="138">WrappedClrType</name></name><argument_list pos:line="100" pos:column="152">()</argument_list></call><op:operator pos:line="100" pos:column="154">.</op:operator><name pos:line="100" pos:column="155">Name</name></expr></argument>, <argument><expr><call><name><name pos:line="100" pos:column="161">right</name><op:operator pos:line="100" pos:column="166">.</op:operator><name pos:line="100" pos:column="167">WrappedClrType</name></name><argument_list pos:line="100" pos:column="181">()</argument_list></call><op:operator pos:line="100" pos:column="183">.</op:operator><name pos:line="100" pos:column="184">Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<return pos:line="102" pos:column="25">return <expr><op:operator pos:line="102" pos:column="32">new</op:operator> <call><name pos:line="102" pos:column="36">LuaCustomClrObject</name><argument_list pos:line="102" pos:column="54">(<argument><expr><name pos:line="102" pos:column="55">a</name> <op:operator pos:line="102" pos:column="57">+</op:operator> <name pos:line="102" pos:column="59">b</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="105" pos:column="17">public</specifier> <name pos:line="105" pos:column="24">LuaValue</name></type> <name pos:line="105" pos:column="33">Subtract</name><parameter_list pos:line="105" pos:column="41">(<param><decl><type><name pos:line="105" pos:column="42">LuaRuntime</name></type> <name pos:line="105" pos:column="53">runtime</name></decl></param>, <param><decl><type><name pos:line="105" pos:column="62">LuaValue</name></type> <name pos:line="105" pos:column="71">left</name></decl></param>, <param><decl><type><name pos:line="105" pos:column="77">LuaValue</name></type> <name pos:line="105" pos:column="86">right</name></decl></param>)</parameter_list>
		<block pos:line="106" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="107" pos:column="25">WVec</name></type> <name pos:line="107" pos:column="30">a</name></decl><op:operator pos:line="107" pos:column="31">,</op:operator> <decl><type ref="prev"/><name pos:line="107" pos:column="33">b</name></decl>;</decl_stmt>
			<if pos:line="108" pos:column="25">if <condition pos:line="108" pos:column="28">(<expr><op:operator pos:line="108" pos:column="29">!</op:operator><call><name><name pos:line="108" pos:column="30">left</name><op:operator pos:line="108" pos:column="34">.</op:operator><name><name pos:line="108" pos:column="35">TryGetClrValue</name><argument_list pos:line="108" pos:column="49">&lt;<argument><name pos:line="108" pos:column="50">WVec</name></argument>&gt;</argument_list></name></name><argument_list pos:line="108" pos:column="55">(<argument><expr pos:line="108" pos:column="56">out <name pos:line="108" pos:column="60">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="108" pos:column="63">||</op:operator> <op:operator pos:line="108" pos:column="66">!</op:operator><call><name><name pos:line="108" pos:column="67">right</name><op:operator pos:line="108" pos:column="72">.</op:operator><name><name pos:line="108" pos:column="73">TryGetClrValue</name><argument_list pos:line="108" pos:column="87">&lt;<argument><name pos:line="108" pos:column="88">WVec</name></argument>&gt;</argument_list></name></name><argument_list pos:line="108" pos:column="93">(<argument><expr pos:line="108" pos:column="94">out <name pos:line="108" pos:column="98">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="108" pos:column="101">
				<throw pos:line="109" pos:column="33">throw <expr><op:operator pos:line="109" pos:column="39">new</op:operator> <call><name pos:line="109" pos:column="43">LuaException</name><argument_list pos:line="109" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="56">"Attempted to call WVec.Subtract(WVec, WVec) with invalid arguments ({0}, {1})"</lit:literal><op:operator pos:line="109" pos:column="135">.</op:operator><call><name pos:line="109" pos:column="136">F</name><argument_list pos:line="109" pos:column="137">(<argument><expr><call><name><name pos:line="109" pos:column="138">left</name><op:operator pos:line="109" pos:column="142">.</op:operator><name pos:line="109" pos:column="143">WrappedClrType</name></name><argument_list pos:line="109" pos:column="157">()</argument_list></call><op:operator pos:line="109" pos:column="159">.</op:operator><name pos:line="109" pos:column="160">Name</name></expr></argument>, <argument><expr><call><name><name pos:line="109" pos:column="166">right</name><op:operator pos:line="109" pos:column="171">.</op:operator><name pos:line="109" pos:column="172">WrappedClrType</name></name><argument_list pos:line="109" pos:column="186">()</argument_list></call><op:operator pos:line="109" pos:column="188">.</op:operator><name pos:line="109" pos:column="189">Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<return pos:line="111" pos:column="25">return <expr><op:operator pos:line="111" pos:column="32">new</op:operator> <call><name pos:line="111" pos:column="36">LuaCustomClrObject</name><argument_list pos:line="111" pos:column="54">(<argument><expr><name pos:line="111" pos:column="55">a</name> <op:operator pos:line="111" pos:column="57">-</op:operator> <name pos:line="111" pos:column="59">b</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="114" pos:column="17">public</specifier> <name pos:line="114" pos:column="24">LuaValue</name></type> <name pos:line="114" pos:column="33">Minus</name><parameter_list pos:line="114" pos:column="38">(<param><decl><type><name pos:line="114" pos:column="39">LuaRuntime</name></type> <name pos:line="114" pos:column="50">runtime</name></decl></param>)</parameter_list>
		<block pos:line="115" pos:column="17">{
			<return pos:line="116" pos:column="25">return <expr><op:operator pos:line="116" pos:column="32">new</op:operator> <call><name pos:line="116" pos:column="36">LuaCustomClrObject</name><argument_list pos:line="116" pos:column="54">(<argument><expr><op:operator pos:line="116" pos:column="55">-</op:operator><name pos:line="116" pos:column="56">this</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="119" pos:column="17">public</specifier> <name pos:line="119" pos:column="24">LuaValue</name></type> <name pos:line="119" pos:column="33">Equals</name><parameter_list pos:line="119" pos:column="39">(<param><decl><type><name pos:line="119" pos:column="40">LuaRuntime</name></type> <name pos:line="119" pos:column="51">runtime</name></decl></param>, <param><decl><type><name pos:line="119" pos:column="60">LuaValue</name></type> <name pos:line="119" pos:column="69">left</name></decl></param>, <param><decl><type><name pos:line="119" pos:column="75">LuaValue</name></type> <name pos:line="119" pos:column="84">right</name></decl></param>)</parameter_list>
		<block pos:line="120" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="121" pos:column="25">WVec</name></type> <name pos:line="121" pos:column="30">a</name></decl><op:operator pos:line="121" pos:column="31">,</op:operator> <decl><type ref="prev"/><name pos:line="121" pos:column="33">b</name></decl>;</decl_stmt>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><op:operator pos:line="122" pos:column="29">!</op:operator><call><name><name pos:line="122" pos:column="30">left</name><op:operator pos:line="122" pos:column="34">.</op:operator><name><name pos:line="122" pos:column="35">TryGetClrValue</name><argument_list pos:line="122" pos:column="49">&lt;<argument><name pos:line="122" pos:column="50">WVec</name></argument>&gt;</argument_list></name></name><argument_list pos:line="122" pos:column="55">(<argument><expr pos:line="122" pos:column="56">out <name pos:line="122" pos:column="60">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="122" pos:column="63">||</op:operator> <op:operator pos:line="122" pos:column="66">!</op:operator><call><name><name pos:line="122" pos:column="67">right</name><op:operator pos:line="122" pos:column="72">.</op:operator><name><name pos:line="122" pos:column="73">TryGetClrValue</name><argument_list pos:line="122" pos:column="87">&lt;<argument><name pos:line="122" pos:column="88">WVec</name></argument>&gt;</argument_list></name></name><argument_list pos:line="122" pos:column="93">(<argument><expr pos:line="122" pos:column="94">out <name pos:line="122" pos:column="98">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="122" pos:column="101">
				<return pos:line="123" pos:column="33">return <expr><lit:literal type="boolean" pos:line="123" pos:column="40">false</lit:literal></expr>;</return></then></if>

			<return pos:line="125" pos:column="25">return <expr><name pos:line="125" pos:column="32">a</name> <op:operator pos:line="125" pos:column="34">==</op:operator> <name pos:line="125" pos:column="37">b</name></expr>;</return>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="128" pos:column="17">public</specifier> <name pos:line="128" pos:column="24">LuaValue</name></type> <name pos:line="128" pos:column="33">this</name><parameter_list pos:line="128" pos:column="37">[<param><decl><type><name pos:line="128" pos:column="38">LuaRuntime</name></type> <name pos:line="128" pos:column="49">runtime</name></decl></param><op:operator pos:line="128" pos:column="56">,</op:operator> <param><decl><type><name pos:line="128" pos:column="58">LuaValue</name></type> <name pos:line="128" pos:column="67">key</name></decl></param>]</parameter_list>
		<block pos:line="129" pos:column="17">{
			<function><name pos:line="130" pos:column="25">get</name>
			<block pos:line="131" pos:column="25">{
				<switch pos:line="132" pos:column="33">switch <condition pos:line="132" pos:column="40">(<expr><call><name><name pos:line="132" pos:column="41">key</name><op:operator pos:line="132" pos:column="44">.</op:operator><name pos:line="132" pos:column="45">ToString</name></name><argument_list pos:line="132" pos:column="53">()</argument_list></call></expr>)</condition>
				<block pos:line="133" pos:column="33">{
					<case pos:line="134" pos:column="41">case <expr><lit:literal type="string" pos:line="134" pos:column="46">"X"</lit:literal></expr>: <return pos:line="134" pos:column="51">return <expr><name pos:line="134" pos:column="58">X</name></expr>;</return>
					</case><case pos:line="135" pos:column="41">case <expr><lit:literal type="string" pos:line="135" pos:column="46">"Y"</lit:literal></expr>: <return pos:line="135" pos:column="51">return <expr><name pos:line="135" pos:column="58">Y</name></expr>;</return>
					</case><case pos:line="136" pos:column="41">case <expr><lit:literal type="string" pos:line="136" pos:column="46">"Z"</lit:literal></expr>: <return pos:line="136" pos:column="51">return <expr><name pos:line="136" pos:column="58">Z</name></expr>;</return>
					</case><case pos:line="137" pos:column="41">case <expr><lit:literal type="string" pos:line="137" pos:column="46">"Facing"</lit:literal></expr>: <return pos:line="137" pos:column="56">return <expr><call><name><name pos:line="137" pos:column="63">Traits</name><op:operator pos:line="137" pos:column="69">.</op:operator><name pos:line="137" pos:column="70">Util</name><op:operator pos:line="137" pos:column="74">.</op:operator><name pos:line="137" pos:column="75">GetFacing</name></name><argument_list pos:line="137" pos:column="84">(<argument><expr><name pos:line="137" pos:column="85">this</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="137" pos:column="91">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
					</case><default pos:line="138" pos:column="41">default: <throw pos:line="138" pos:column="50">throw <expr><op:operator pos:line="138" pos:column="56">new</op:operator> <call><name pos:line="138" pos:column="60">LuaException</name><argument_list pos:line="138" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="73">"WVec does not define a member '{0}'"</lit:literal><op:operator pos:line="138" pos:column="110">.</op:operator><call><name pos:line="138" pos:column="111">F</name><argument_list pos:line="138" pos:column="112">(<argument><expr><name pos:line="138" pos:column="113">key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
				</default>}</block></switch>
			}</block></function>

			<function><name pos:line="142" pos:column="25">set</name>
			<block pos:line="143" pos:column="25">{
				<throw pos:line="144" pos:column="33">throw <expr><op:operator pos:line="144" pos:column="39">new</op:operator> <call><name pos:line="144" pos:column="43">LuaException</name><argument_list pos:line="144" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="144" pos:column="56">"WVec is read-only. Use WVec.New to create a new value"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></function>
		}</block></decl></decl_stmt>

		<cpp:endregion pos:line="148" pos:column="17">#<cpp:directive pos:line="148" pos:column="18">endregion</cpp:directive></cpp:endregion>
	}</block></struct>
}</block></namespace>
</unit>
