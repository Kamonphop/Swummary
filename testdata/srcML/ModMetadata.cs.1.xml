<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\ModMetadata.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name><name pos:line="11" pos:column="7">System</name><op:operator pos:line="11" pos:column="13">.</op:operator><name pos:line="11" pos:column="14">Collections</name><op:operator pos:line="11" pos:column="25">.</op:operator><name pos:line="11" pos:column="26">Generic</name></name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">IO</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Linq</name></name>;</using>

<namespace pos:line="15" pos:column="1">namespace <name pos:line="15" pos:column="11">OpenRA</name>
<block pos:line="16" pos:column="1">{
	<class><specifier pos:line="17" pos:column="9">public</specifier> class <name pos:line="17" pos:column="22">ModMetadata</name>
	<block pos:line="18" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="19" pos:column="17">public</specifier> <specifier pos:line="19" pos:column="24">static</specifier> <specifier pos:line="19" pos:column="31">readonly</specifier> <name><name pos:line="19" pos:column="40">Dictionary</name><argument_list pos:line="19" pos:column="50">&lt;<argument><name pos:line="19" pos:column="51">string</name></argument>, <argument><name pos:line="19" pos:column="59">ModMetadata</name></argument>&gt;</argument_list></name></type> <name pos:line="19" pos:column="72">AllMods</name> <init pos:line="19" pos:column="80">= <expr><call><name pos:line="19" pos:column="82">ValidateMods</name><argument_list pos:line="19" pos:column="94">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="21" pos:column="17">public</specifier> <name pos:line="21" pos:column="24">string</name></type> <name pos:line="21" pos:column="31">Id</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="22" pos:column="17">public</specifier> <name pos:line="22" pos:column="24">string</name></type> <name pos:line="22" pos:column="31">Title</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="23" pos:column="17">public</specifier> <name pos:line="23" pos:column="24">string</name></type> <name pos:line="23" pos:column="31">Description</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="24" pos:column="17">public</specifier> <name pos:line="24" pos:column="24">string</name></type> <name pos:line="24" pos:column="31">Version</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">public</specifier> <name pos:line="25" pos:column="24">string</name></type> <name pos:line="25" pos:column="31">Author</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">public</specifier> <name pos:line="26" pos:column="24">bool</name></type> <name pos:line="26" pos:column="29">Hidden</name></decl>;</decl_stmt>

		<function><type><specifier pos:line="28" pos:column="17">static</specifier> <name><name pos:line="28" pos:column="24">Dictionary</name><argument_list pos:line="28" pos:column="34">&lt;<argument><name pos:line="28" pos:column="35">string</name></argument>, <argument><name pos:line="28" pos:column="43">ModMetadata</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="56">ValidateMods</name><parameter_list pos:line="28" pos:column="68">()</parameter_list>
		<block pos:line="29" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="30" pos:column="25">var</name></type> <name pos:line="30" pos:column="29">basePath</name> <init pos:line="30" pos:column="38">= <expr><call><name><name pos:line="30" pos:column="40">Platform</name><op:operator pos:line="30" pos:column="48">.</op:operator><name pos:line="30" pos:column="49">ResolvePath</name></name><argument_list pos:line="30" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="61">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="30" pos:column="66">"mods"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="31" pos:column="25">var</name></type> <name pos:line="31" pos:column="29">mods</name> <init pos:line="31" pos:column="34">= <expr><call><name><name pos:line="31" pos:column="36">Directory</name><op:operator pos:line="31" pos:column="45">.</op:operator><name pos:line="31" pos:column="46">GetDirectories</name></name><argument_list pos:line="31" pos:column="60">(<argument><expr><name pos:line="31" pos:column="61">basePath</name></expr></argument>)</argument_list></call>
				<op:operator pos:line="32" pos:column="33">.</op:operator><call><name pos:line="32" pos:column="34">Select</name><argument_list pos:line="32" pos:column="40">(<argument><expr><lambda><name pos:line="32" pos:column="41">x</name> <op:operator pos:line="32" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="32" pos:column="46">x</name><op:operator pos:line="32" pos:column="47">.</op:operator><name pos:line="32" pos:column="48">Substring</name></name><argument_list pos:line="32" pos:column="57">(<argument><expr><name><name pos:line="32" pos:column="58">basePath</name><op:operator pos:line="32" pos:column="66">.</op:operator><name pos:line="32" pos:column="67">Length</name></name> <op:operator pos:line="32" pos:column="74">+</op:operator> <lit:literal type="number" pos:line="32" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="34" pos:column="25">var</name></type> <name pos:line="34" pos:column="29">ret</name> <init pos:line="34" pos:column="33">= <expr><op:operator pos:line="34" pos:column="35">new</op:operator> <call><name><name pos:line="34" pos:column="39">Dictionary</name><argument_list pos:line="34" pos:column="49">&lt;<argument><name pos:line="34" pos:column="50">string</name></argument>, <argument><name pos:line="34" pos:column="58">ModMetadata</name></argument>&gt;</argument_list></name><argument_list pos:line="34" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="35" pos:column="25">foreach (<init><decl><type><name pos:line="35" pos:column="34">var</name></type> <name pos:line="35" pos:column="38">m</name> <range pos:line="35" pos:column="40">in <expr><name pos:line="35" pos:column="43">mods</name></expr></range></decl></init>)
			<block pos:line="36" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="37" pos:column="33">var</name></type> <name pos:line="37" pos:column="37">yamlPath</name> <init pos:line="37" pos:column="46">= <expr><call><name><name pos:line="37" pos:column="48">Platform</name><op:operator pos:line="37" pos:column="56">.</op:operator><name pos:line="37" pos:column="57">ResolvePath</name></name><argument_list pos:line="37" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="69">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="74">"mods"</lit:literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="82">m</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="37" pos:column="85">"mod.yaml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="38" pos:column="33">if <condition pos:line="38" pos:column="36">(<expr><op:operator pos:line="38" pos:column="37">!</op:operator><call><name><name pos:line="38" pos:column="38">File</name><op:operator pos:line="38" pos:column="42">.</op:operator><name pos:line="38" pos:column="43">Exists</name></name><argument_list pos:line="38" pos:column="49">(<argument><expr><name pos:line="38" pos:column="50">yamlPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="38" pos:column="60">
					<continue pos:line="39" pos:column="41">continue;</continue></then></if>

				<decl_stmt><decl><type><name pos:line="41" pos:column="33">var</name></type> <name pos:line="41" pos:column="37">yaml</name> <init pos:line="41" pos:column="42">= <expr><op:operator pos:line="41" pos:column="44">new</op:operator> <call><name pos:line="41" pos:column="48">MiniYaml</name><argument_list pos:line="41" pos:column="56">(<argument><expr><name pos:line="41" pos:column="57">null</name></expr></argument>, <argument><expr><call><name><name pos:line="41" pos:column="63">MiniYaml</name><op:operator pos:line="41" pos:column="71">.</op:operator><name pos:line="41" pos:column="72">FromFile</name></name><argument_list pos:line="41" pos:column="80">(<argument><expr><name pos:line="41" pos:column="81">yamlPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="42" pos:column="33">var</name></type> <name pos:line="42" pos:column="37">nd</name> <init pos:line="42" pos:column="40">= <expr><call><name><name pos:line="42" pos:column="42">yaml</name><op:operator pos:line="42" pos:column="46">.</op:operator><name pos:line="42" pos:column="47">ToDictionary</name></name><argument_list pos:line="42" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="43" pos:column="33">if <condition pos:line="43" pos:column="36">(<expr><op:operator pos:line="43" pos:column="37">!</op:operator><call><name><name pos:line="43" pos:column="38">nd</name><op:operator pos:line="43" pos:column="40">.</op:operator><name pos:line="43" pos:column="41">ContainsKey</name></name><argument_list pos:line="43" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="53">"Metadata"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="43" pos:column="65">
					<continue pos:line="44" pos:column="41">continue;</continue></then></if>

				<decl_stmt><decl><type><name pos:line="46" pos:column="33">var</name></type> <name pos:line="46" pos:column="37">mod</name> <init pos:line="46" pos:column="41">= <expr><call><name><name pos:line="46" pos:column="43">FieldLoader</name><op:operator pos:line="46" pos:column="54">.</op:operator><name><name pos:line="46" pos:column="55">Load</name><argument_list pos:line="46" pos:column="59">&lt;<argument><name pos:line="46" pos:column="60">ModMetadata</name></argument>&gt;</argument_list></name></name><argument_list pos:line="46" pos:column="72">(<argument><expr><name><name pos:line="46" pos:column="73">nd</name><index pos:line="46" pos:column="75">[<expr><lit:literal type="string" pos:line="46" pos:column="76">"Metadata"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="47" pos:column="33">mod</name><op:operator pos:line="47" pos:column="36">.</op:operator><name pos:line="47" pos:column="37">Id</name></name> <op:operator pos:line="47" pos:column="40">=</op:operator> <name pos:line="47" pos:column="42">m</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name><name pos:line="49" pos:column="33">ret</name><op:operator pos:line="49" pos:column="36">.</op:operator><name pos:line="49" pos:column="37">Add</name></name><argument_list pos:line="49" pos:column="40">(<argument><expr><name pos:line="49" pos:column="41">m</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="44">mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>

			<return pos:line="52" pos:column="25">return <expr><name pos:line="52" pos:column="32">ret</name></expr>;</return>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
