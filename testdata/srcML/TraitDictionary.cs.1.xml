<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\TraitDictionary.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Linq</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">OpenRA</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Primitives</name></name>;</using>

<namespace pos:line="16" pos:column="1">namespace <name pos:line="16" pos:column="11">OpenRA</name>
<block pos:line="17" pos:column="1">{
	<class><specifier pos:line="18" pos:column="9">static</specifier> class <name pos:line="18" pos:column="22">ListExts</name>
	<block pos:line="19" pos:column="9">{
		<function><type><specifier pos:line="20" pos:column="17">public</specifier> <specifier pos:line="20" pos:column="24">static</specifier> <name pos:line="20" pos:column="31">int</name></type> <name pos:line="20" pos:column="35">BinarySearchMany</name><parameter_list pos:line="20" pos:column="51">(<param><decl><type><name pos:line="20" pos:column="52">this</name> <name><name pos:line="20" pos:column="57">List</name><argument_list pos:line="20" pos:column="61">&lt;<argument><name pos:line="20" pos:column="62">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="20" pos:column="69">list</name></decl></param>, <param><decl><type><name pos:line="20" pos:column="75">uint</name></type> <name pos:line="20" pos:column="80">searchFor</name></decl></param>)</parameter_list>
		<block pos:line="21" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="22" pos:column="25">var</name></type> <name pos:line="22" pos:column="29">start</name> <init pos:line="22" pos:column="35">= <expr><lit:literal type="number" pos:line="22" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="23" pos:column="25">var</name></type> <name pos:line="23" pos:column="29">end</name> <init pos:line="23" pos:column="33">= <expr><name><name pos:line="23" pos:column="35">list</name><op:operator pos:line="23" pos:column="39">.</op:operator><name pos:line="23" pos:column="40">Count</name></name></expr></init></decl>;</decl_stmt>
			<while pos:line="24" pos:column="25">while <condition pos:line="24" pos:column="31">(<expr><name pos:line="24" pos:column="32">start</name> <op:operator pos:line="24" pos:column="38">!=</op:operator> <name pos:line="24" pos:column="41">end</name></expr>)</condition>
			<block pos:line="25" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="26" pos:column="33">var</name></type> <name pos:line="26" pos:column="37">mid</name> <init pos:line="26" pos:column="41">= <expr><op:operator pos:line="26" pos:column="43">(</op:operator><name pos:line="26" pos:column="44">start</name> <op:operator pos:line="26" pos:column="50">+</op:operator> <name pos:line="26" pos:column="52">end</name><op:operator pos:line="26" pos:column="55">)</op:operator> <op:operator pos:line="26" pos:column="57">/</op:operator> <lit:literal type="number" pos:line="26" pos:column="59">2</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="27" pos:column="33">if <condition pos:line="27" pos:column="36">(<expr><name><name pos:line="27" pos:column="37">list</name><index pos:line="27" pos:column="41">[<expr><name pos:line="27" pos:column="42">mid</name></expr>]</index></name><op:operator pos:line="27" pos:column="46">.</op:operator><name pos:line="27" pos:column="47">ActorID</name> <op:operator pos:line="27" pos:column="55">&lt;</op:operator> <name pos:line="27" pos:column="57">searchFor</name></expr>)</condition><then pos:line="27" pos:column="67">
					<expr_stmt><expr><name pos:line="28" pos:column="41">start</name> <op:operator pos:line="28" pos:column="47">=</op:operator> <name pos:line="28" pos:column="49">mid</name> <op:operator pos:line="28" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="28" pos:column="55">1</lit:literal></expr>;</expr_stmt></then>
				<else pos:line="29" pos:column="33">else
					<expr_stmt><expr><name pos:line="30" pos:column="41">end</name> <op:operator pos:line="30" pos:column="45">=</op:operator> <name pos:line="30" pos:column="47">mid</name></expr>;</expr_stmt></else></if>
			}</block></while>

			<return pos:line="33" pos:column="25">return <expr><name pos:line="33" pos:column="32">start</name></expr>;</return>
		}</block></function>
	}</block></class>

	<class pos:line="37" pos:column="9">class <name pos:line="37" pos:column="15">TraitDictionary</name>
	<block pos:line="38" pos:column="9">{
		<comment type="line" pos:line="39" pos:column="17">// construct this delegate once.</comment>
		<decl_stmt><decl><type><specifier pos:line="40" pos:column="17">static</specifier> <name><name pos:line="40" pos:column="24">Func</name><argument_list pos:line="40" pos:column="28">&lt;<argument><name pos:line="40" pos:column="29">Type</name></argument>, <argument><name pos:line="40" pos:column="35">ITraitContainer</name></argument>&gt;</argument_list></name></type> <name pos:line="40" pos:column="52">doCreateTraitContainer</name> <init pos:line="40" pos:column="75">= <expr><name pos:line="40" pos:column="77">CreateTraitContainer</name></expr></init></decl>;</decl_stmt>
		<function><type><specifier pos:line="41" pos:column="17">static</specifier> <name pos:line="41" pos:column="24">ITraitContainer</name></type> <name pos:line="41" pos:column="40">CreateTraitContainer</name><parameter_list pos:line="41" pos:column="60">(<param><decl><type><name pos:line="41" pos:column="61">Type</name></type> <name pos:line="41" pos:column="66">t</name></decl></param>)</parameter_list>
		<block pos:line="42" pos:column="17">{
			<return pos:line="43" pos:column="25">return <expr><op:operator pos:line="43" pos:column="32">(</op:operator><name pos:line="43" pos:column="33">ITraitContainer</name><op:operator pos:line="43" pos:column="48">)</op:operator><call><name pos:line="43" pos:column="49">typeof</name><argument_list pos:line="43" pos:column="55">(<argument><expr><name><name pos:line="43" pos:column="56">TraitContainer</name><argument_list pos:line="43" pos:column="70">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="73">.</op:operator><call><name pos:line="43" pos:column="74">MakeGenericType</name><argument_list pos:line="43" pos:column="89">(<argument><expr><name pos:line="43" pos:column="90">t</name></expr></argument>)</argument_list></call>
				<op:operator pos:line="44" pos:column="33">.</op:operator><call><name pos:line="44" pos:column="34">GetConstructor</name><argument_list pos:line="44" pos:column="48">(<argument><expr><name><name pos:line="44" pos:column="49">Type</name><op:operator pos:line="44" pos:column="53">.</op:operator><name pos:line="44" pos:column="54">EmptyTypes</name></name></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="65">.</op:operator><call><name pos:line="44" pos:column="66">Invoke</name><argument_list pos:line="44" pos:column="72">(<argument><expr><name pos:line="44" pos:column="73">null</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<decl_stmt><decl><type><name><name pos:line="47" pos:column="17">Dictionary</name><argument_list pos:line="47" pos:column="27">&lt;<argument><name pos:line="47" pos:column="28">Type</name></argument>, <argument><name pos:line="47" pos:column="34">ITraitContainer</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="51">traits</name> <init pos:line="47" pos:column="58">= <expr><op:operator pos:line="47" pos:column="60">new</op:operator> <call><name><name pos:line="47" pos:column="64">Dictionary</name><argument_list pos:line="47" pos:column="74">&lt;<argument><name pos:line="47" pos:column="75">Type</name></argument>, <argument><name pos:line="47" pos:column="81">ITraitContainer</name></argument>&gt;</argument_list></name><argument_list pos:line="47" pos:column="97">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<function><type><name pos:line="49" pos:column="17">ITraitContainer</name></type> <name pos:line="49" pos:column="33">InnerGet</name><parameter_list pos:line="49" pos:column="41">(<param><decl><type><name pos:line="49" pos:column="42">Type</name></type> <name pos:line="49" pos:column="47">t</name></decl></param>)</parameter_list>
		<block pos:line="50" pos:column="17">{
			<return pos:line="51" pos:column="25">return <expr><call><name><name pos:line="51" pos:column="32">traits</name><op:operator pos:line="51" pos:column="38">.</op:operator><name pos:line="51" pos:column="39">GetOrAdd</name></name><argument_list pos:line="51" pos:column="47">(<argument><expr><name pos:line="51" pos:column="48">t</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="51">doCreateTraitContainer</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><name><name pos:line="54" pos:column="17">TraitContainer</name><argument_list pos:line="54" pos:column="31">&lt;<argument><name pos:line="54" pos:column="32">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="54" pos:column="35">InnerGet</name><argument_list pos:line="54" pos:column="43">&lt;<argument><name pos:line="54" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="54" pos:column="46">()</parameter_list>
		<block pos:line="55" pos:column="17">{
			<return pos:line="56" pos:column="25">return <expr><op:operator pos:line="56" pos:column="32">(</op:operator><name><name pos:line="56" pos:column="33">TraitContainer</name><argument_list pos:line="56" pos:column="47">&lt;<argument><name pos:line="56" pos:column="48">T</name></argument>&gt;</argument_list></name><op:operator pos:line="56" pos:column="50">)</op:operator><call><name pos:line="56" pos:column="51">InnerGet</name><argument_list pos:line="56" pos:column="59">(<argument><expr><call><name pos:line="56" pos:column="60">typeof</name><argument_list pos:line="56" pos:column="66">(<argument><expr><name pos:line="56" pos:column="67">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="59" pos:column="17">public</specifier> <name pos:line="59" pos:column="24">void</name></type> <name pos:line="59" pos:column="29">PrintReport</name><parameter_list pos:line="59" pos:column="40">()</parameter_list>
		<block pos:line="60" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="61" pos:column="25">Log</name><op:operator pos:line="61" pos:column="28">.</op:operator><name pos:line="61" pos:column="29">AddChannel</name></name><argument_list pos:line="61" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="40">"traitreport"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="61" pos:column="55">"traitreport.log"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<foreach pos:line="62" pos:column="25">foreach (<init><decl><type><name pos:line="62" pos:column="34">var</name></type> <name pos:line="62" pos:column="38">t</name> <range pos:line="62" pos:column="40">in <expr><call><name><name pos:line="62" pos:column="43">traits</name><op:operator pos:line="62" pos:column="49">.</op:operator><name pos:line="62" pos:column="50">OrderByDescending</name></name><argument_list pos:line="62" pos:column="67">(<argument><expr><lambda><name pos:line="62" pos:column="68">t</name> <op:operator pos:line="62" pos:column="70">=&gt;</op:operator> <name><name pos:line="62" pos:column="73">t</name><op:operator pos:line="62" pos:column="74">.</op:operator><name pos:line="62" pos:column="75">Value</name><op:operator pos:line="62" pos:column="80">.</op:operator><name pos:line="62" pos:column="81">Queries</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="89">.</op:operator><call><name pos:line="62" pos:column="90">TakeWhile</name><argument_list pos:line="62" pos:column="99">(<argument><expr><lambda><name pos:line="62" pos:column="100">t</name> <op:operator pos:line="62" pos:column="102">=&gt;</op:operator> <name><name pos:line="62" pos:column="105">t</name><op:operator pos:line="62" pos:column="106">.</op:operator><name pos:line="62" pos:column="107">Value</name><op:operator pos:line="62" pos:column="112">.</op:operator><name pos:line="62" pos:column="113">Queries</name></name> <op:operator pos:line="62" pos:column="121">&gt;</op:operator> <lit:literal type="number" pos:line="62" pos:column="123">0</lit:literal></lambda></expr></argument>)</argument_list></call></expr></range></decl></init>)
				<expr_stmt><expr><call><name><name pos:line="63" pos:column="33">Log</name><op:operator pos:line="63" pos:column="36">.</op:operator><name pos:line="63" pos:column="37">Write</name></name><argument_list pos:line="63" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="43">"traitreport"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="63" pos:column="58">"{0}: {1}"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="70">t</name><op:operator pos:line="63" pos:column="71">.</op:operator><name pos:line="63" pos:column="72">Key</name><op:operator pos:line="63" pos:column="75">.</op:operator><name pos:line="63" pos:column="76">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="63" pos:column="82">t</name><op:operator pos:line="63" pos:column="83">.</op:operator><name pos:line="63" pos:column="84">Value</name><op:operator pos:line="63" pos:column="89">.</op:operator><name pos:line="63" pos:column="90">Queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
		}</block></function>

		<function><type><specifier pos:line="66" pos:column="17">public</specifier> <name pos:line="66" pos:column="24">void</name></type> <name pos:line="66" pos:column="29">AddTrait</name><parameter_list pos:line="66" pos:column="37">(<param><decl><type><name pos:line="66" pos:column="38">Actor</name></type> <name pos:line="66" pos:column="44">actor</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="51">object</name></type> <name pos:line="66" pos:column="58">val</name></decl></param>)</parameter_list>
		<block pos:line="67" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="68" pos:column="25">var</name></type> <name pos:line="68" pos:column="29">t</name> <init pos:line="68" pos:column="31">= <expr><call><name><name pos:line="68" pos:column="33">val</name><op:operator pos:line="68" pos:column="36">.</op:operator><name pos:line="68" pos:column="37">GetType</name></name><argument_list pos:line="68" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<foreach pos:line="70" pos:column="25">foreach (<init><decl><type><name pos:line="70" pos:column="34">var</name></type> <name pos:line="70" pos:column="38">i</name> <range pos:line="70" pos:column="40">in <expr><call><name><name pos:line="70" pos:column="43">t</name><op:operator pos:line="70" pos:column="44">.</op:operator><name pos:line="70" pos:column="45">GetInterfaces</name></name><argument_list pos:line="70" pos:column="58">()</argument_list></call></expr></range></decl></init>)
				<expr_stmt><expr><call><name pos:line="71" pos:column="33">InnerAdd</name><argument_list pos:line="71" pos:column="41">(<argument><expr><name pos:line="71" pos:column="42">actor</name></expr></argument>, <argument><expr><name pos:line="71" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="71" pos:column="52">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
			<foreach pos:line="72" pos:column="25">foreach (<init><decl><type><name pos:line="72" pos:column="34">var</name></type> <name pos:line="72" pos:column="38">tt</name> <range pos:line="72" pos:column="41">in <expr><call><name><name pos:line="72" pos:column="44">t</name><op:operator pos:line="72" pos:column="45">.</op:operator><name pos:line="72" pos:column="46">BaseTypes</name></name><argument_list pos:line="72" pos:column="55">()</argument_list></call></expr></range></decl></init>)
				<expr_stmt><expr><call><name pos:line="73" pos:column="33">InnerAdd</name><argument_list pos:line="73" pos:column="41">(<argument><expr><name pos:line="73" pos:column="42">actor</name></expr></argument>, <argument><expr><name pos:line="73" pos:column="49">tt</name></expr></argument>, <argument><expr><name pos:line="73" pos:column="53">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
		}</block></function>

		<function><type><name pos:line="76" pos:column="17">void</name></type> <name pos:line="76" pos:column="22">InnerAdd</name><parameter_list pos:line="76" pos:column="30">(<param><decl><type><name pos:line="76" pos:column="31">Actor</name></type> <name pos:line="76" pos:column="37">actor</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="44">Type</name></type> <name pos:line="76" pos:column="49">t</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="52">object</name></type> <name pos:line="76" pos:column="59">val</name></decl></param>)</parameter_list>
		<block pos:line="77" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">InnerGet</name><argument_list pos:line="78" pos:column="33">(<argument><expr><name pos:line="78" pos:column="34">t</name></expr></argument>)</argument_list></call><op:operator pos:line="78" pos:column="36">.</op:operator><call><name pos:line="78" pos:column="37">Add</name><argument_list pos:line="78" pos:column="40">(<argument><expr><name pos:line="78" pos:column="41">actor</name></expr></argument>, <argument><expr><name pos:line="78" pos:column="48">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="81" pos:column="17">static</specifier> <name pos:line="81" pos:column="24">void</name></type> <name pos:line="81" pos:column="29">CheckDestroyed</name><parameter_list pos:line="81" pos:column="43">(<param><decl><type><name pos:line="81" pos:column="44">Actor</name></type> <name pos:line="81" pos:column="50">actor</name></decl></param>)</parameter_list>
		<block pos:line="82" pos:column="17">{
			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><name><name pos:line="83" pos:column="29">actor</name><op:operator pos:line="83" pos:column="34">.</op:operator><name pos:line="83" pos:column="35">Disposed</name></name></expr>)</condition><then pos:line="83" pos:column="44">
				<throw pos:line="84" pos:column="33">throw <expr><op:operator pos:line="84" pos:column="39">new</op:operator> <call><name pos:line="84" pos:column="43">InvalidOperationException</name><argument_list pos:line="84" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="69">"Attempted to get trait from destroyed object ({0})"</lit:literal><op:operator pos:line="84" pos:column="121">.</op:operator><call><name pos:line="84" pos:column="122">F</name><argument_list pos:line="84" pos:column="123">(<argument><expr><name pos:line="84" pos:column="124">actor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
		}</block></function>

		<function><type><specifier pos:line="87" pos:column="17">public</specifier> <name pos:line="87" pos:column="24">bool</name></type> <name><name pos:line="87" pos:column="29">Contains</name><argument_list pos:line="87" pos:column="37">&lt;<argument><name pos:line="87" pos:column="38">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="87" pos:column="40">(<param><decl><type><name pos:line="87" pos:column="41">Actor</name></type> <name pos:line="87" pos:column="47">actor</name></decl></param>)</parameter_list>
		<block pos:line="88" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="89" pos:column="25">CheckDestroyed</name><argument_list pos:line="89" pos:column="39">(<argument><expr><name pos:line="89" pos:column="40">actor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="90" pos:column="25">return <expr><call><name><name pos:line="90" pos:column="32">InnerGet</name><argument_list pos:line="90" pos:column="40">&lt;<argument><name pos:line="90" pos:column="41">T</name></argument>&gt;</argument_list></name><argument_list pos:line="90" pos:column="43">()</argument_list></call><op:operator pos:line="90" pos:column="45">.</op:operator><call><name pos:line="90" pos:column="46">GetMultiple</name><argument_list pos:line="90" pos:column="57">(<argument><expr><name><name pos:line="90" pos:column="58">actor</name><op:operator pos:line="90" pos:column="63">.</op:operator><name pos:line="90" pos:column="64">ActorID</name></name></expr></argument>)</argument_list></call><op:operator pos:line="90" pos:column="72">.</op:operator><call><name pos:line="90" pos:column="73">Any</name><argument_list pos:line="90" pos:column="76">()</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="93" pos:column="17">public</specifier> <name pos:line="93" pos:column="24">T</name></type> <name><name pos:line="93" pos:column="26">Get</name><argument_list pos:line="93" pos:column="29">&lt;<argument><name pos:line="93" pos:column="30">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="93" pos:column="32">(<param><decl><type><name pos:line="93" pos:column="33">Actor</name></type> <name pos:line="93" pos:column="39">actor</name></decl></param>)</parameter_list>
		<block pos:line="94" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="95" pos:column="25">CheckDestroyed</name><argument_list pos:line="95" pos:column="39">(<argument><expr><name pos:line="95" pos:column="40">actor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="96" pos:column="25">return <expr><call><name><name pos:line="96" pos:column="32">InnerGet</name><argument_list pos:line="96" pos:column="40">&lt;<argument><name pos:line="96" pos:column="41">T</name></argument>&gt;</argument_list></name><argument_list pos:line="96" pos:column="43">()</argument_list></call><op:operator pos:line="96" pos:column="45">.</op:operator><call><name pos:line="96" pos:column="46">Get</name><argument_list pos:line="96" pos:column="49">(<argument><expr><name><name pos:line="96" pos:column="50">actor</name><op:operator pos:line="96" pos:column="55">.</op:operator><name pos:line="96" pos:column="56">ActorID</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="99" pos:column="17">public</specifier> <name pos:line="99" pos:column="24">T</name></type> <name><name pos:line="99" pos:column="26">GetOrDefault</name><argument_list pos:line="99" pos:column="38">&lt;<argument><name pos:line="99" pos:column="39">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="99" pos:column="41">(<param><decl><type><name pos:line="99" pos:column="42">Actor</name></type> <name pos:line="99" pos:column="48">actor</name></decl></param>)</parameter_list>
		<block pos:line="100" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="101" pos:column="25">CheckDestroyed</name><argument_list pos:line="101" pos:column="39">(<argument><expr><name pos:line="101" pos:column="40">actor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="102" pos:column="25">return <expr><call><name><name pos:line="102" pos:column="32">InnerGet</name><argument_list pos:line="102" pos:column="40">&lt;<argument><name pos:line="102" pos:column="41">T</name></argument>&gt;</argument_list></name><argument_list pos:line="102" pos:column="43">()</argument_list></call><op:operator pos:line="102" pos:column="45">.</op:operator><call><name pos:line="102" pos:column="46">GetOrDefault</name><argument_list pos:line="102" pos:column="58">(<argument><expr><name><name pos:line="102" pos:column="59">actor</name><op:operator pos:line="102" pos:column="64">.</op:operator><name pos:line="102" pos:column="65">ActorID</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="105" pos:column="17">public</specifier> <name><name pos:line="105" pos:column="24">IEnumerable</name><argument_list pos:line="105" pos:column="35">&lt;<argument><name pos:line="105" pos:column="36">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="105" pos:column="39">WithInterface</name><argument_list pos:line="105" pos:column="52">&lt;<argument><name pos:line="105" pos:column="53">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="105" pos:column="55">(<param><decl><type><name pos:line="105" pos:column="56">Actor</name></type> <name pos:line="105" pos:column="62">actor</name></decl></param>)</parameter_list>
		<block pos:line="106" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="107" pos:column="25">CheckDestroyed</name><argument_list pos:line="107" pos:column="39">(<argument><expr><name pos:line="107" pos:column="40">actor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="108" pos:column="25">return <expr><call><name><name pos:line="108" pos:column="32">InnerGet</name><argument_list pos:line="108" pos:column="40">&lt;<argument><name pos:line="108" pos:column="41">T</name></argument>&gt;</argument_list></name><argument_list pos:line="108" pos:column="43">()</argument_list></call><op:operator pos:line="108" pos:column="45">.</op:operator><call><name pos:line="108" pos:column="46">GetMultiple</name><argument_list pos:line="108" pos:column="57">(<argument><expr><name><name pos:line="108" pos:column="58">actor</name><op:operator pos:line="108" pos:column="63">.</op:operator><name pos:line="108" pos:column="64">ActorID</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="111" pos:column="17">public</specifier> <name><name pos:line="111" pos:column="24">IEnumerable</name><argument_list pos:line="111" pos:column="35">&lt;<argument><name><name pos:line="111" pos:column="36">TraitPair</name><argument_list pos:line="111" pos:column="45">&lt;<argument><name pos:line="111" pos:column="46">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name><name pos:line="111" pos:column="50">ActorsWithTrait</name><argument_list pos:line="111" pos:column="65">&lt;<argument><name pos:line="111" pos:column="66">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="111" pos:column="68">()</parameter_list>
		<block pos:line="112" pos:column="17">{
			<return pos:line="113" pos:column="25">return <expr><call><name><name pos:line="113" pos:column="32">InnerGet</name><argument_list pos:line="113" pos:column="40">&lt;<argument><name pos:line="113" pos:column="41">T</name></argument>&gt;</argument_list></name><argument_list pos:line="113" pos:column="43">()</argument_list></call><op:operator pos:line="113" pos:column="45">.</op:operator><call><name pos:line="113" pos:column="46">All</name><argument_list pos:line="113" pos:column="49">()</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="116" pos:column="17">public</specifier> <name pos:line="116" pos:column="24">void</name></type> <name pos:line="116" pos:column="29">RemoveActor</name><parameter_list pos:line="116" pos:column="40">(<param><decl><type><name pos:line="116" pos:column="41">Actor</name></type> <name pos:line="116" pos:column="47">a</name></decl></param>)</parameter_list>
		<block pos:line="117" pos:column="17">{
			<foreach pos:line="118" pos:column="25">foreach (<init><decl><type><name pos:line="118" pos:column="34">var</name></type> <name pos:line="118" pos:column="38">t</name> <range pos:line="118" pos:column="40">in <expr><name pos:line="118" pos:column="43">traits</name></expr></range></decl></init>)
				<expr_stmt><expr><call><name><name pos:line="119" pos:column="33">t</name><op:operator pos:line="119" pos:column="34">.</op:operator><name pos:line="119" pos:column="35">Value</name><op:operator pos:line="119" pos:column="40">.</op:operator><name pos:line="119" pos:column="41">RemoveActor</name></name><argument_list pos:line="119" pos:column="52">(<argument><expr><name><name pos:line="119" pos:column="53">a</name><op:operator pos:line="119" pos:column="54">.</op:operator><name pos:line="119" pos:column="55">ActorID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
		}</block></function>

		<class type="interface" pos:line="122" pos:column="17">interface <name pos:line="122" pos:column="27">ITraitContainer</name>
		<block pos:line="123" pos:column="17">{
			<function_decl><type><name pos:line="124" pos:column="25">void</name></type> <name pos:line="124" pos:column="30">Add</name><parameter_list pos:line="124" pos:column="33">(<param><decl><type><name pos:line="124" pos:column="34">Actor</name></type> <name pos:line="124" pos:column="40">actor</name></decl></param>, <param><decl><type><name pos:line="124" pos:column="47">object</name></type> <name pos:line="124" pos:column="54">trait</name></decl></param>)</parameter_list>;</function_decl>
			<function_decl><type><name pos:line="125" pos:column="25">void</name></type> <name pos:line="125" pos:column="30">RemoveActor</name><parameter_list pos:line="125" pos:column="41">(<param><decl><type><name pos:line="125" pos:column="42">uint</name></type> <name pos:line="125" pos:column="47">actor</name></decl></param>)</parameter_list>;</function_decl>

			<decl_stmt><decl><type><name pos:line="127" pos:column="25">int</name></type> <name pos:line="127" pos:column="29">Queries</name> <block pos:line="127" pos:column="37">{ <function_decl><name pos:line="127" pos:column="39">get</name>;</function_decl> }</block></decl></decl_stmt>
		}</block></class>

		<class pos:line="130" pos:column="17">class <name><name pos:line="130" pos:column="23">TraitContainer</name><argument_list pos:line="130" pos:column="37">&lt;<argument><name pos:line="130" pos:column="38">T</name></argument>&gt;</argument_list></name> <super pos:line="130" pos:column="41">: <name pos:line="130" pos:column="43">ITraitContainer</name></super>
		<block pos:line="131" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="132" pos:column="25">readonly</specifier> <name><name pos:line="132" pos:column="34">List</name><argument_list pos:line="132" pos:column="38">&lt;<argument><name pos:line="132" pos:column="39">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="132" pos:column="46">actors</name> <init pos:line="132" pos:column="53">= <expr><op:operator pos:line="132" pos:column="55">new</op:operator> <call><name><name pos:line="132" pos:column="59">List</name><argument_list pos:line="132" pos:column="63">&lt;<argument><name pos:line="132" pos:column="64">Actor</name></argument>&gt;</argument_list></name><argument_list pos:line="132" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="133" pos:column="25">readonly</specifier> <name><name pos:line="133" pos:column="34">List</name><argument_list pos:line="133" pos:column="38">&lt;<argument><name pos:line="133" pos:column="39">T</name></argument>&gt;</argument_list></name></type> <name pos:line="133" pos:column="42">traits</name> <init pos:line="133" pos:column="49">= <expr><op:operator pos:line="133" pos:column="51">new</op:operator> <call><name><name pos:line="133" pos:column="55">List</name><argument_list pos:line="133" pos:column="59">&lt;<argument><name pos:line="133" pos:column="60">T</name></argument>&gt;</argument_list></name><argument_list pos:line="133" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><specifier pos:line="135" pos:column="25">public</specifier> <name pos:line="135" pos:column="32">int</name></type> <name pos:line="135" pos:column="36">Queries</name> <block pos:line="135" pos:column="44">{ <function_decl><name pos:line="135" pos:column="46">get</name>;</function_decl> <function_decl><specifier pos:line="135" pos:column="51">private</specifier> <name pos:line="135" pos:column="59">set</name>;</function_decl> }</block></decl></decl_stmt>

			<function><type><specifier pos:line="137" pos:column="25">public</specifier> <name pos:line="137" pos:column="32">void</name></type> <name pos:line="137" pos:column="37">Add</name><parameter_list pos:line="137" pos:column="40">(<param><decl><type><name pos:line="137" pos:column="41">Actor</name></type> <name pos:line="137" pos:column="47">actor</name></decl></param>, <param><decl><type><name pos:line="137" pos:column="54">object</name></type> <name pos:line="137" pos:column="61">trait</name></decl></param>)</parameter_list>
			<block pos:line="138" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="139" pos:column="33">var</name></type> <name pos:line="139" pos:column="37">insertIndex</name> <init pos:line="139" pos:column="49">= <expr><call><name><name pos:line="139" pos:column="51">actors</name><op:operator pos:line="139" pos:column="57">.</op:operator><name pos:line="139" pos:column="58">BinarySearchMany</name></name><argument_list pos:line="139" pos:column="74">(<argument><expr><name><name pos:line="139" pos:column="75">actor</name><op:operator pos:line="139" pos:column="80">.</op:operator><name pos:line="139" pos:column="81">ActorID</name></name> <op:operator pos:line="139" pos:column="89">+</op:operator> <lit:literal type="number" pos:line="139" pos:column="91">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="140" pos:column="33">actors</name><op:operator pos:line="140" pos:column="39">.</op:operator><name pos:line="140" pos:column="40">Insert</name></name><argument_list pos:line="140" pos:column="46">(<argument><expr><name pos:line="140" pos:column="47">insertIndex</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="60">actor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="141" pos:column="33">traits</name><op:operator pos:line="141" pos:column="39">.</op:operator><name pos:line="141" pos:column="40">Insert</name></name><argument_list pos:line="141" pos:column="46">(<argument><expr><name pos:line="141" pos:column="47">insertIndex</name></expr></argument>, <argument><expr><op:operator pos:line="141" pos:column="60">(</op:operator><name pos:line="141" pos:column="61">T</name><op:operator pos:line="141" pos:column="62">)</op:operator><name pos:line="141" pos:column="63">trait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>

			<function><type><specifier pos:line="144" pos:column="25">public</specifier> <name pos:line="144" pos:column="32">T</name></type> <name pos:line="144" pos:column="34">Get</name><parameter_list pos:line="144" pos:column="37">(<param><decl><type><name pos:line="144" pos:column="38">uint</name></type> <name pos:line="144" pos:column="43">actor</name></decl></param>)</parameter_list>
			<block pos:line="145" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="146" pos:column="33">var</name></type> <name pos:line="146" pos:column="37">result</name> <init pos:line="146" pos:column="44">= <expr><call><name pos:line="146" pos:column="46">GetOrDefault</name><argument_list pos:line="146" pos:column="58">(<argument><expr><name pos:line="146" pos:column="59">actor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="147" pos:column="33">if <condition pos:line="147" pos:column="36">(<expr><name pos:line="147" pos:column="37">result</name> <op:operator pos:line="147" pos:column="44">==</op:operator> <name pos:line="147" pos:column="47">null</name></expr>)</condition><then pos:line="147" pos:column="52">
					<throw pos:line="148" pos:column="41">throw <expr><op:operator pos:line="148" pos:column="47">new</op:operator> <call><name pos:line="148" pos:column="51">InvalidOperationException</name><argument_list pos:line="148" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="148" pos:column="77">"Actor does not have trait of type `{0}`"</lit:literal><op:operator pos:line="148" pos:column="118">.</op:operator><call><name pos:line="148" pos:column="119">F</name><argument_list pos:line="148" pos:column="120">(<argument><expr><call><name pos:line="148" pos:column="121">typeof</name><argument_list pos:line="148" pos:column="127">(<argument><expr><name pos:line="148" pos:column="128">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
				<return pos:line="149" pos:column="33">return <expr><name pos:line="149" pos:column="40">result</name></expr>;</return>
			}</block></function>

			<function><type><specifier pos:line="152" pos:column="25">public</specifier> <name pos:line="152" pos:column="32">T</name></type> <name pos:line="152" pos:column="34">GetOrDefault</name><parameter_list pos:line="152" pos:column="46">(<param><decl><type><name pos:line="152" pos:column="47">uint</name></type> <name pos:line="152" pos:column="52">actor</name></decl></param>)</parameter_list>
			<block pos:line="153" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="154" pos:column="33">++</op:operator><name pos:line="154" pos:column="35">Queries</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="155" pos:column="33">var</name></type> <name pos:line="155" pos:column="37">index</name> <init pos:line="155" pos:column="43">= <expr><call><name><name pos:line="155" pos:column="45">actors</name><op:operator pos:line="155" pos:column="51">.</op:operator><name pos:line="155" pos:column="52">BinarySearchMany</name></name><argument_list pos:line="155" pos:column="68">(<argument><expr><name pos:line="155" pos:column="69">actor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="156" pos:column="33">if <condition pos:line="156" pos:column="36">(<expr><name pos:line="156" pos:column="37">index</name> <op:operator pos:line="156" pos:column="43">&gt;=</op:operator> <name><name pos:line="156" pos:column="46">actors</name><op:operator pos:line="156" pos:column="52">.</op:operator><name pos:line="156" pos:column="53">Count</name></name> <op:operator pos:line="156" pos:column="59">||</op:operator> <name><name pos:line="156" pos:column="62">actors</name><index pos:line="156" pos:column="68">[<expr><name pos:line="156" pos:column="69">index</name></expr>]</index></name><op:operator pos:line="156" pos:column="75">.</op:operator><name pos:line="156" pos:column="76">ActorID</name> <op:operator pos:line="156" pos:column="84">!=</op:operator> <name pos:line="156" pos:column="87">actor</name></expr>)</condition><then pos:line="156" pos:column="93">
					<return pos:line="157" pos:column="41">return <expr><call><name pos:line="157" pos:column="48">default</name><argument_list pos:line="157" pos:column="55">(<argument><expr><name pos:line="157" pos:column="56">T</name></expr></argument>)</argument_list></call></expr>;</return></then>
				<else pos:line="158" pos:column="33">else <if pos:line="158" pos:column="38">if <condition pos:line="158" pos:column="41">(<expr><name pos:line="158" pos:column="42">index</name> <op:operator pos:line="158" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="158" pos:column="50">1</lit:literal> <op:operator pos:line="158" pos:column="52">&lt;</op:operator> <name><name pos:line="158" pos:column="54">actors</name><op:operator pos:line="158" pos:column="60">.</op:operator><name pos:line="158" pos:column="61">Count</name> <type:modifier pos:line="158" pos:column="67">&amp;&amp;</type:modifier></name> <name><name pos:line="158" pos:column="70">actors</name><index pos:line="158" pos:column="76">[<expr><name pos:line="158" pos:column="77">index</name> <op:operator pos:line="158" pos:column="83">+</op:operator> <lit:literal type="number" pos:line="158" pos:column="85">1</lit:literal></expr>]</index></name><op:operator pos:line="158" pos:column="87">.</op:operator><name pos:line="158" pos:column="88">ActorID</name> <op:operator pos:line="158" pos:column="96">==</op:operator> <name pos:line="158" pos:column="99">actor</name></expr>)</condition><then pos:line="158" pos:column="105">
					<throw pos:line="159" pos:column="41">throw <expr><op:operator pos:line="159" pos:column="47">new</op:operator> <call><name pos:line="159" pos:column="51">InvalidOperationException</name><argument_list pos:line="159" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="77">"Actor {0} has multiple traits of type `{1}`"</lit:literal><op:operator pos:line="159" pos:column="122">.</op:operator><call><name pos:line="159" pos:column="123">F</name><argument_list pos:line="159" pos:column="124">(<argument><expr><name><name pos:line="159" pos:column="125">actors</name><index pos:line="159" pos:column="131">[<expr><name pos:line="159" pos:column="132">index</name></expr>]</index></name><op:operator pos:line="159" pos:column="138">.</op:operator><name><name pos:line="159" pos:column="139">Info</name><op:operator pos:line="159" pos:column="143">.</op:operator><name pos:line="159" pos:column="144">Name</name></name></expr></argument>, <argument><expr><call><name pos:line="159" pos:column="150">typeof</name><argument_list pos:line="159" pos:column="156">(<argument><expr><name pos:line="159" pos:column="157">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then>
				<else pos:line="160" pos:column="33">else <return pos:line="160" pos:column="38">return <expr><name><name pos:line="160" pos:column="45">traits</name><index pos:line="160" pos:column="51">[<expr><name pos:line="160" pos:column="52">index</name></expr>]</index></name></expr>;</return></else></if></else></if>
			}</block></function>

			<function><type><specifier pos:line="163" pos:column="25">public</specifier> <name><name pos:line="163" pos:column="32">IEnumerable</name><argument_list pos:line="163" pos:column="43">&lt;<argument><name pos:line="163" pos:column="44">T</name></argument>&gt;</argument_list></name></type> <name pos:line="163" pos:column="47">GetMultiple</name><parameter_list pos:line="163" pos:column="58">(<param><decl><type><name pos:line="163" pos:column="59">uint</name></type> <name pos:line="163" pos:column="64">actor</name></decl></param>)</parameter_list>
			<block pos:line="164" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="165" pos:column="33">++</op:operator><name pos:line="165" pos:column="35">Queries</name></expr>;</expr_stmt>
				<return pos:line="166" pos:column="33">return <expr><op:operator pos:line="166" pos:column="40">new</op:operator> <call><name pos:line="166" pos:column="44">MultipleEnumerable</name><argument_list pos:line="166" pos:column="62">(<argument><expr><name pos:line="166" pos:column="63">this</name></expr></argument>, <argument><expr><name pos:line="166" pos:column="69">actor</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>

			<class pos:line="169" pos:column="25">class <name pos:line="169" pos:column="31">MultipleEnumerable</name> <super pos:line="169" pos:column="50">: <name><name pos:line="169" pos:column="52">IEnumerable</name><argument_list pos:line="169" pos:column="63">&lt;<argument><name pos:line="169" pos:column="64">T</name></argument>&gt;</argument_list></name></super>
			<block pos:line="170" pos:column="25">{
				<decl_stmt><decl><type><specifier pos:line="171" pos:column="33">readonly</specifier> <name><name pos:line="171" pos:column="42">TraitContainer</name><argument_list pos:line="171" pos:column="56">&lt;<argument><name pos:line="171" pos:column="57">T</name></argument>&gt;</argument_list></name></type> <name pos:line="171" pos:column="60">container</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="172" pos:column="33">readonly</specifier> <name pos:line="172" pos:column="42">uint</name></type> <name pos:line="172" pos:column="47">actor</name></decl>;</decl_stmt>
				<constructor><specifier pos:line="173" pos:column="33">public</specifier> <name pos:line="173" pos:column="40">MultipleEnumerable</name><parameter_list pos:line="173" pos:column="58">(<param><decl><type><name><name pos:line="173" pos:column="59">TraitContainer</name><argument_list pos:line="173" pos:column="73">&lt;<argument><name pos:line="173" pos:column="74">T</name></argument>&gt;</argument_list></name></type> <name pos:line="173" pos:column="77">container</name></decl></param>, <param><decl><type><name pos:line="173" pos:column="88">uint</name></type> <name pos:line="173" pos:column="93">actor</name></decl></param>)</parameter_list> <block pos:line="173" pos:column="100">{ <expr_stmt><expr><name><name pos:line="173" pos:column="102">this</name><op:operator pos:line="173" pos:column="106">.</op:operator><name pos:line="173" pos:column="107">container</name></name> <op:operator pos:line="173" pos:column="117">=</op:operator> <name pos:line="173" pos:column="119">container</name></expr>;</expr_stmt> <expr_stmt><expr><name><name pos:line="173" pos:column="130">this</name><op:operator pos:line="173" pos:column="134">.</op:operator><name pos:line="173" pos:column="135">actor</name></name> <op:operator pos:line="173" pos:column="141">=</op:operator> <name pos:line="173" pos:column="143">actor</name></expr>;</expr_stmt> }</block></constructor>
				<function><type><specifier pos:line="174" pos:column="33">public</specifier> <name><name pos:line="174" pos:column="40">IEnumerator</name><argument_list pos:line="174" pos:column="51">&lt;<argument><name pos:line="174" pos:column="52">T</name></argument>&gt;</argument_list></name></type> <name pos:line="174" pos:column="55">GetEnumerator</name><parameter_list pos:line="174" pos:column="68">()</parameter_list> <block pos:line="174" pos:column="71">{ <return pos:line="174" pos:column="73">return <expr><op:operator pos:line="174" pos:column="80">new</op:operator> <call><name pos:line="174" pos:column="84">MultipleEnumerator</name><argument_list pos:line="174" pos:column="102">(<argument><expr><name pos:line="174" pos:column="103">container</name></expr></argument>, <argument><expr><name pos:line="174" pos:column="114">actor</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
				<function><type><name><name pos:line="175" pos:column="33">System</name><op:operator pos:line="175" pos:column="39">.</op:operator><name pos:line="175" pos:column="40">Collections</name><op:operator pos:line="175" pos:column="51">.</op:operator><name pos:line="175" pos:column="52">IEnumerator</name></name></type> <name><name pos:line="175" pos:column="64">System</name><op:operator pos:line="175" pos:column="70">.</op:operator><name pos:line="175" pos:column="71">Collections</name><op:operator pos:line="175" pos:column="82">.</op:operator><name pos:line="175" pos:column="83">IEnumerable</name><op:operator pos:line="175" pos:column="94">.</op:operator><name pos:line="175" pos:column="95">GetEnumerator</name></name><parameter_list pos:line="175" pos:column="108">()</parameter_list> <block pos:line="175" pos:column="111">{ <return pos:line="175" pos:column="113">return <expr><call><name pos:line="175" pos:column="120">GetEnumerator</name><argument_list pos:line="175" pos:column="133">()</argument_list></call></expr>;</return> }</block></function>
			}</block></class>

			<class pos:line="178" pos:column="25">class <name pos:line="178" pos:column="31">MultipleEnumerator</name> <super pos:line="178" pos:column="50">: <name><name pos:line="178" pos:column="52">IEnumerator</name><argument_list pos:line="178" pos:column="63">&lt;<argument><name pos:line="178" pos:column="64">T</name></argument>&gt;</argument_list></name></super>
			<block pos:line="179" pos:column="25">{
				<decl_stmt><decl><type><specifier pos:line="180" pos:column="33">readonly</specifier> <name><name pos:line="180" pos:column="42">List</name><argument_list pos:line="180" pos:column="46">&lt;<argument><name pos:line="180" pos:column="47">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="180" pos:column="54">actors</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="181" pos:column="33">readonly</specifier> <name><name pos:line="181" pos:column="42">List</name><argument_list pos:line="181" pos:column="46">&lt;<argument><name pos:line="181" pos:column="47">T</name></argument>&gt;</argument_list></name></type> <name pos:line="181" pos:column="50">traits</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="182" pos:column="33">readonly</specifier> <name pos:line="182" pos:column="42">uint</name></type> <name pos:line="182" pos:column="47">actor</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="183" pos:column="33">int</name></type> <name pos:line="183" pos:column="37">index</name></decl>;</decl_stmt>
				<constructor><specifier pos:line="184" pos:column="33">public</specifier> <name pos:line="184" pos:column="40">MultipleEnumerator</name><parameter_list pos:line="184" pos:column="58">(<param><decl><type><name><name pos:line="184" pos:column="59">TraitContainer</name><argument_list pos:line="184" pos:column="73">&lt;<argument><name pos:line="184" pos:column="74">T</name></argument>&gt;</argument_list></name></type> <name pos:line="184" pos:column="77">container</name></decl></param>, <param><decl><type><name pos:line="184" pos:column="88">uint</name></type> <name pos:line="184" pos:column="93">actor</name></decl></param>)</parameter_list>
				<block pos:line="185" pos:column="33">{
					<expr_stmt><expr><name pos:line="186" pos:column="41">actors</name> <op:operator pos:line="186" pos:column="48">=</op:operator> <name><name pos:line="186" pos:column="50">container</name><op:operator pos:line="186" pos:column="59">.</op:operator><name pos:line="186" pos:column="60">actors</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="187" pos:column="41">traits</name> <op:operator pos:line="187" pos:column="48">=</op:operator> <name><name pos:line="187" pos:column="50">container</name><op:operator pos:line="187" pos:column="59">.</op:operator><name pos:line="187" pos:column="60">traits</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="188" pos:column="41">this</name><op:operator pos:line="188" pos:column="45">.</op:operator><name pos:line="188" pos:column="46">actor</name></name> <op:operator pos:line="188" pos:column="52">=</op:operator> <name pos:line="188" pos:column="54">actor</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="189" pos:column="41">Reset</name><argument_list pos:line="189" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
				}</block></constructor>

				<function><type><specifier pos:line="192" pos:column="33">public</specifier> <name pos:line="192" pos:column="40">void</name></type> <name pos:line="192" pos:column="45">Reset</name><parameter_list pos:line="192" pos:column="50">()</parameter_list> <block pos:line="192" pos:column="53">{ <expr_stmt><expr><name pos:line="192" pos:column="55">index</name> <op:operator pos:line="192" pos:column="61">=</op:operator> <call><name><name pos:line="192" pos:column="63">actors</name><op:operator pos:line="192" pos:column="69">.</op:operator><name pos:line="192" pos:column="70">BinarySearchMany</name></name><argument_list pos:line="192" pos:column="86">(<argument><expr><name pos:line="192" pos:column="87">actor</name></expr></argument>)</argument_list></call> <op:operator pos:line="192" pos:column="94">-</op:operator> <lit:literal type="number" pos:line="192" pos:column="96">1</lit:literal></expr>;</expr_stmt> }</block></function>
				<function><type><specifier pos:line="193" pos:column="33">public</specifier> <name pos:line="193" pos:column="40">bool</name></type> <name pos:line="193" pos:column="45">MoveNext</name><parameter_list pos:line="193" pos:column="53">()</parameter_list> <block pos:line="193" pos:column="56">{ <return pos:line="193" pos:column="58">return <expr><op:operator pos:line="193" pos:column="65">++</op:operator><name pos:line="193" pos:column="67">index</name> <op:operator pos:line="193" pos:column="73">&lt;</op:operator> <name><name pos:line="193" pos:column="75">actors</name><op:operator pos:line="193" pos:column="81">.</op:operator><name pos:line="193" pos:column="82">Count</name> <type:modifier pos:line="193" pos:column="88">&amp;&amp;</type:modifier></name> <name><name pos:line="193" pos:column="91">actors</name><index pos:line="193" pos:column="97">[<expr><name pos:line="193" pos:column="98">index</name></expr>]</index></name><op:operator pos:line="193" pos:column="104">.</op:operator><name pos:line="193" pos:column="105">ActorID</name> <op:operator pos:line="193" pos:column="113">==</op:operator> <name pos:line="193" pos:column="116">actor</name></expr>;</return> }</block></function>
				<decl_stmt><decl><type><specifier pos:line="194" pos:column="33">public</specifier> <name pos:line="194" pos:column="40">T</name></type> <name pos:line="194" pos:column="42">Current</name> <block pos:line="194" pos:column="50">{ <function><name pos:line="194" pos:column="52">get</name> <block pos:line="194" pos:column="56">{ <return pos:line="194" pos:column="58">return <expr><name><name pos:line="194" pos:column="65">traits</name><index pos:line="194" pos:column="71">[<expr><name pos:line="194" pos:column="72">index</name></expr>]</index></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
				<decl_stmt><decl><type><name pos:line="195" pos:column="33">object</name></type> <name><name pos:line="195" pos:column="40">System</name><op:operator pos:line="195" pos:column="46">.</op:operator><name pos:line="195" pos:column="47">Collections</name><op:operator pos:line="195" pos:column="58">.</op:operator><name pos:line="195" pos:column="59">IEnumerator</name><op:operator pos:line="195" pos:column="70">.</op:operator><name pos:line="195" pos:column="71">Current</name></name> <block pos:line="195" pos:column="79">{ <function><name pos:line="195" pos:column="81">get</name> <block pos:line="195" pos:column="85">{ <return pos:line="195" pos:column="87">return <expr><name pos:line="195" pos:column="94">Current</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
				<function><type><specifier pos:line="196" pos:column="33">public</specifier> <name pos:line="196" pos:column="40">void</name></type> <name pos:line="196" pos:column="45">Dispose</name><parameter_list pos:line="196" pos:column="52">()</parameter_list> <block pos:line="196" pos:column="55">{ }</block></function>
			}</block></class>

			<function><type><specifier pos:line="199" pos:column="25">public</specifier> <name><name pos:line="199" pos:column="32">IEnumerable</name><argument_list pos:line="199" pos:column="43">&lt;<argument><name><name pos:line="199" pos:column="44">TraitPair</name><argument_list pos:line="199" pos:column="53">&lt;<argument><name pos:line="199" pos:column="54">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="199" pos:column="58">All</name><parameter_list pos:line="199" pos:column="61">()</parameter_list>
			<block pos:line="200" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="201" pos:column="33">++</op:operator><name pos:line="201" pos:column="35">Queries</name></expr>;</expr_stmt>
				<return pos:line="202" pos:column="33">return <expr><op:operator pos:line="202" pos:column="40">new</op:operator> <call><name pos:line="202" pos:column="44">AllEnumerable</name><argument_list pos:line="202" pos:column="57">(<argument><expr><name pos:line="202" pos:column="58">this</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>

			<class pos:line="205" pos:column="25">class <name pos:line="205" pos:column="31">AllEnumerable</name> <super pos:line="205" pos:column="45">: <name><name pos:line="205" pos:column="47">IEnumerable</name><argument_list pos:line="205" pos:column="58">&lt;<argument><name><name pos:line="205" pos:column="59">TraitPair</name><argument_list pos:line="205" pos:column="68">&lt;<argument><name pos:line="205" pos:column="69">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super>
			<block pos:line="206" pos:column="25">{
				<decl_stmt><decl><type><specifier pos:line="207" pos:column="33">readonly</specifier> <name><name pos:line="207" pos:column="42">TraitContainer</name><argument_list pos:line="207" pos:column="56">&lt;<argument><name pos:line="207" pos:column="57">T</name></argument>&gt;</argument_list></name></type> <name pos:line="207" pos:column="60">container</name></decl>;</decl_stmt>
				<constructor><specifier pos:line="208" pos:column="33">public</specifier> <name pos:line="208" pos:column="40">AllEnumerable</name><parameter_list pos:line="208" pos:column="53">(<param><decl><type><name><name pos:line="208" pos:column="54">TraitContainer</name><argument_list pos:line="208" pos:column="68">&lt;<argument><name pos:line="208" pos:column="69">T</name></argument>&gt;</argument_list></name></type> <name pos:line="208" pos:column="72">container</name></decl></param>)</parameter_list> <block pos:line="208" pos:column="83">{ <expr_stmt><expr><name><name pos:line="208" pos:column="85">this</name><op:operator pos:line="208" pos:column="89">.</op:operator><name pos:line="208" pos:column="90">container</name></name> <op:operator pos:line="208" pos:column="100">=</op:operator> <name pos:line="208" pos:column="102">container</name></expr>;</expr_stmt> }</block></constructor>
				<function><type><specifier pos:line="209" pos:column="33">public</specifier> <name><name pos:line="209" pos:column="40">IEnumerator</name><argument_list pos:line="209" pos:column="51">&lt;<argument><name><name pos:line="209" pos:column="52">TraitPair</name><argument_list pos:line="209" pos:column="61">&lt;<argument><name pos:line="209" pos:column="62">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="209" pos:column="66">GetEnumerator</name><parameter_list pos:line="209" pos:column="79">()</parameter_list> <block pos:line="209" pos:column="82">{ <return pos:line="209" pos:column="84">return <expr><op:operator pos:line="209" pos:column="91">new</op:operator> <call><name pos:line="209" pos:column="95">AllEnumerator</name><argument_list pos:line="209" pos:column="108">(<argument><expr><name pos:line="209" pos:column="109">container</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
				<function><type><name><name pos:line="210" pos:column="33">System</name><op:operator pos:line="210" pos:column="39">.</op:operator><name pos:line="210" pos:column="40">Collections</name><op:operator pos:line="210" pos:column="51">.</op:operator><name pos:line="210" pos:column="52">IEnumerator</name></name></type> <name><name pos:line="210" pos:column="64">System</name><op:operator pos:line="210" pos:column="70">.</op:operator><name pos:line="210" pos:column="71">Collections</name><op:operator pos:line="210" pos:column="82">.</op:operator><name pos:line="210" pos:column="83">IEnumerable</name><op:operator pos:line="210" pos:column="94">.</op:operator><name pos:line="210" pos:column="95">GetEnumerator</name></name><parameter_list pos:line="210" pos:column="108">()</parameter_list> <block pos:line="210" pos:column="111">{ <return pos:line="210" pos:column="113">return <expr><call><name pos:line="210" pos:column="120">GetEnumerator</name><argument_list pos:line="210" pos:column="133">()</argument_list></call></expr>;</return> }</block></function>
			}</block></class>

			<class pos:line="213" pos:column="25">class <name pos:line="213" pos:column="31">AllEnumerator</name> <super pos:line="213" pos:column="45">: <name><name pos:line="213" pos:column="47">IEnumerator</name><argument_list pos:line="213" pos:column="58">&lt;<argument><name><name pos:line="213" pos:column="59">TraitPair</name><argument_list pos:line="213" pos:column="68">&lt;<argument><name pos:line="213" pos:column="69">T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super>
			<block pos:line="214" pos:column="25">{
				<decl_stmt><decl><type><specifier pos:line="215" pos:column="33">readonly</specifier> <name><name pos:line="215" pos:column="42">List</name><argument_list pos:line="215" pos:column="46">&lt;<argument><name pos:line="215" pos:column="47">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="215" pos:column="54">actors</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="216" pos:column="33">readonly</specifier> <name><name pos:line="216" pos:column="42">List</name><argument_list pos:line="216" pos:column="46">&lt;<argument><name pos:line="216" pos:column="47">T</name></argument>&gt;</argument_list></name></type> <name pos:line="216" pos:column="50">traits</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="217" pos:column="33">int</name></type> <name pos:line="217" pos:column="37">index</name></decl>;</decl_stmt>
				<constructor><specifier pos:line="218" pos:column="33">public</specifier> <name pos:line="218" pos:column="40">AllEnumerator</name><parameter_list pos:line="218" pos:column="53">(<param><decl><type><name><name pos:line="218" pos:column="54">TraitContainer</name><argument_list pos:line="218" pos:column="68">&lt;<argument><name pos:line="218" pos:column="69">T</name></argument>&gt;</argument_list></name></type> <name pos:line="218" pos:column="72">container</name></decl></param>)</parameter_list>
				<block pos:line="219" pos:column="33">{
					<expr_stmt><expr><name pos:line="220" pos:column="41">actors</name> <op:operator pos:line="220" pos:column="48">=</op:operator> <name><name pos:line="220" pos:column="50">container</name><op:operator pos:line="220" pos:column="59">.</op:operator><name pos:line="220" pos:column="60">actors</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="221" pos:column="41">traits</name> <op:operator pos:line="221" pos:column="48">=</op:operator> <name><name pos:line="221" pos:column="50">container</name><op:operator pos:line="221" pos:column="59">.</op:operator><name pos:line="221" pos:column="60">traits</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="222" pos:column="41">Reset</name><argument_list pos:line="222" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
				}</block></constructor>

				<function><type><specifier pos:line="225" pos:column="33">public</specifier> <name pos:line="225" pos:column="40">void</name></type> <name pos:line="225" pos:column="45">Reset</name><parameter_list pos:line="225" pos:column="50">()</parameter_list> <block pos:line="225" pos:column="53">{ <expr_stmt><expr><name pos:line="225" pos:column="55">index</name> <op:operator pos:line="225" pos:column="61">=</op:operator> <op:operator pos:line="225" pos:column="63">-</op:operator><lit:literal type="number" pos:line="225" pos:column="64">1</lit:literal></expr>;</expr_stmt> }</block></function>
				<function><type><specifier pos:line="226" pos:column="33">public</specifier> <name pos:line="226" pos:column="40">bool</name></type> <name pos:line="226" pos:column="45">MoveNext</name><parameter_list pos:line="226" pos:column="53">()</parameter_list> <block pos:line="226" pos:column="56">{ <return pos:line="226" pos:column="58">return <expr><op:operator pos:line="226" pos:column="65">++</op:operator><name pos:line="226" pos:column="67">index</name> <op:operator pos:line="226" pos:column="73">&lt;</op:operator> <name><name pos:line="226" pos:column="75">actors</name><op:operator pos:line="226" pos:column="81">.</op:operator><name pos:line="226" pos:column="82">Count</name></name></expr>;</return> }</block></function>
				<decl_stmt><decl><type><specifier pos:line="227" pos:column="33">public</specifier> <name><name pos:line="227" pos:column="40">TraitPair</name><argument_list pos:line="227" pos:column="49">&lt;<argument><name pos:line="227" pos:column="50">T</name></argument>&gt;</argument_list></name></type> <name pos:line="227" pos:column="53">Current</name> <block pos:line="227" pos:column="61">{ <function><name pos:line="227" pos:column="63">get</name> <block pos:line="227" pos:column="67">{ <return pos:line="227" pos:column="69">return <expr><op:operator pos:line="227" pos:column="76">new</op:operator> <name><name pos:line="227" pos:column="80">TraitPair</name><argument_list pos:line="227" pos:column="89">&lt;<argument><name pos:line="227" pos:column="90">T</name></argument>&gt;</argument_list></name> <block pos:line="227" pos:column="93">{ <expr><name pos:line="227" pos:column="95">Actor</name> <op:operator pos:line="227" pos:column="101">=</op:operator> <name><name pos:line="227" pos:column="103">actors</name><index pos:line="227" pos:column="109">[<expr><name pos:line="227" pos:column="110">index</name></expr>]</index></name></expr><op:operator pos:line="227" pos:column="116">,</op:operator> <expr><name pos:line="227" pos:column="118">Trait</name> <op:operator pos:line="227" pos:column="124">=</op:operator> <name><name pos:line="227" pos:column="126">traits</name><index pos:line="227" pos:column="132">[<expr><name pos:line="227" pos:column="133">index</name></expr>]</index></name></expr> }</block></expr>;</return> }</block></function> }</block></decl></decl_stmt>
				<decl_stmt><decl><type><name pos:line="228" pos:column="33">object</name></type> <name><name pos:line="228" pos:column="40">System</name><op:operator pos:line="228" pos:column="46">.</op:operator><name pos:line="228" pos:column="47">Collections</name><op:operator pos:line="228" pos:column="58">.</op:operator><name pos:line="228" pos:column="59">IEnumerator</name><op:operator pos:line="228" pos:column="70">.</op:operator><name pos:line="228" pos:column="71">Current</name></name> <block pos:line="228" pos:column="79">{ <function><name pos:line="228" pos:column="81">get</name> <block pos:line="228" pos:column="85">{ <return pos:line="228" pos:column="87">return <expr><name pos:line="228" pos:column="94">Current</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
				<function><type><specifier pos:line="229" pos:column="33">public</specifier> <name pos:line="229" pos:column="40">void</name></type> <name pos:line="229" pos:column="45">Dispose</name><parameter_list pos:line="229" pos:column="52">()</parameter_list> <block pos:line="229" pos:column="55">{ }</block></function>
			}</block></class>

			<function><type><specifier pos:line="232" pos:column="25">public</specifier> <name pos:line="232" pos:column="32">void</name></type> <name pos:line="232" pos:column="37">RemoveActor</name><parameter_list pos:line="232" pos:column="48">(<param><decl><type><name pos:line="232" pos:column="49">uint</name></type> <name pos:line="232" pos:column="54">actor</name></decl></param>)</parameter_list>
			<block pos:line="233" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="234" pos:column="33">var</name></type> <name pos:line="234" pos:column="37">startIndex</name> <init pos:line="234" pos:column="48">= <expr><call><name><name pos:line="234" pos:column="50">actors</name><op:operator pos:line="234" pos:column="56">.</op:operator><name pos:line="234" pos:column="57">BinarySearchMany</name></name><argument_list pos:line="234" pos:column="73">(<argument><expr><name pos:line="234" pos:column="74">actor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="235" pos:column="33">if <condition pos:line="235" pos:column="36">(<expr><name pos:line="235" pos:column="37">startIndex</name> <op:operator pos:line="235" pos:column="48">&gt;=</op:operator> <name><name pos:line="235" pos:column="51">actors</name><op:operator pos:line="235" pos:column="57">.</op:operator><name pos:line="235" pos:column="58">Count</name></name> <op:operator pos:line="235" pos:column="64">||</op:operator> <name><name pos:line="235" pos:column="67">actors</name><index pos:line="235" pos:column="73">[<expr><name pos:line="235" pos:column="74">startIndex</name></expr>]</index></name><op:operator pos:line="235" pos:column="85">.</op:operator><name pos:line="235" pos:column="86">ActorID</name> <op:operator pos:line="235" pos:column="94">!=</op:operator> <name pos:line="235" pos:column="97">actor</name></expr>)</condition><then pos:line="235" pos:column="103">
					<return pos:line="236" pos:column="41">return;</return></then></if>
				<decl_stmt><decl><type><name pos:line="237" pos:column="33">var</name></type> <name pos:line="237" pos:column="37">endIndex</name> <init pos:line="237" pos:column="46">= <expr><name pos:line="237" pos:column="48">startIndex</name> <op:operator pos:line="237" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="237" pos:column="61">1</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="238" pos:column="33">while <condition pos:line="238" pos:column="39">(<expr><name pos:line="238" pos:column="40">endIndex</name> <op:operator pos:line="238" pos:column="49">&lt;</op:operator> <name><name pos:line="238" pos:column="51">actors</name><op:operator pos:line="238" pos:column="57">.</op:operator><name pos:line="238" pos:column="58">Count</name> <type:modifier pos:line="238" pos:column="64">&amp;&amp;</type:modifier></name> <name><name pos:line="238" pos:column="67">actors</name><index pos:line="238" pos:column="73">[<expr><name pos:line="238" pos:column="74">endIndex</name></expr>]</index></name><op:operator pos:line="238" pos:column="83">.</op:operator><name pos:line="238" pos:column="84">ActorID</name> <op:operator pos:line="238" pos:column="92">==</op:operator> <name pos:line="238" pos:column="95">actor</name></expr>)</condition>
					<expr_stmt><expr><name pos:line="239" pos:column="41">endIndex</name><op:operator pos:line="239" pos:column="49">++</op:operator></expr>;</expr_stmt></while>
				<decl_stmt><decl><type><name pos:line="240" pos:column="33">var</name></type> <name pos:line="240" pos:column="37">count</name> <init pos:line="240" pos:column="43">= <expr><name pos:line="240" pos:column="45">endIndex</name> <op:operator pos:line="240" pos:column="54">-</op:operator> <name pos:line="240" pos:column="56">startIndex</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="241" pos:column="33">actors</name><op:operator pos:line="241" pos:column="39">.</op:operator><name pos:line="241" pos:column="40">RemoveRange</name></name><argument_list pos:line="241" pos:column="51">(<argument><expr><name pos:line="241" pos:column="52">startIndex</name></expr></argument>, <argument><expr><name pos:line="241" pos:column="64">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="242" pos:column="33">traits</name><op:operator pos:line="242" pos:column="39">.</op:operator><name pos:line="242" pos:column="40">RemoveRange</name></name><argument_list pos:line="242" pos:column="51">(<argument><expr><name pos:line="242" pos:column="52">startIndex</name></expr></argument>, <argument><expr><name pos:line="242" pos:column="64">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></function>
		}</block></class>
	}</block></class>
}</block></namespace>
</unit>
