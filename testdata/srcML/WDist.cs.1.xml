<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\WDist.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Linq</name></name>;</using>
<using pos:line="13" pos:column="1">using <name pos:line="13" pos:column="7">Eluant</name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">Eluant</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">ObjectBinding</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">OpenRA</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Scripting</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">OpenRA</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Support</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name pos:line="18" pos:column="11">OpenRA</name>
<block pos:line="19" pos:column="1">{
	<comment type="line" pos:line="20" pos:column="9">/// &lt;summary&gt;</comment>
	<comment type="line" pos:line="21" pos:column="9">/// 1d world distance - 1024 units = 1 cell.</comment>
	<comment type="line" pos:line="22" pos:column="9">/// &lt;/summary&gt;</comment>
	<struct><specifier pos:line="23" pos:column="9">public</specifier> struct <name pos:line="23" pos:column="23">WDist</name> <super pos:line="23" pos:column="29">: <name pos:line="23" pos:column="31">IComparable</name>, <name><name pos:line="23" pos:column="44">IComparable</name><argument_list pos:line="23" pos:column="55">&lt;<argument><name pos:line="23" pos:column="56">WDist</name></argument>&gt;</argument_list></name>, <name><name pos:line="23" pos:column="64">IEquatable</name><argument_list pos:line="23" pos:column="74">&lt;<argument><name pos:line="23" pos:column="75">WDist</name></argument>&gt;</argument_list></name>, <name pos:line="23" pos:column="83">IScriptBindable</name>, <name pos:line="23" pos:column="100">ILuaAdditionBinding</name>, <name pos:line="23" pos:column="121">ILuaSubtractionBinding</name>, <name pos:line="23" pos:column="145">ILuaEqualityBinding</name>, <name pos:line="23" pos:column="166">ILuaTableBinding</name></super>
	<block pos:line="24" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">public</specifier> <specifier pos:line="25" pos:column="24">readonly</specifier> <name pos:line="25" pos:column="33">int</name></type> <name pos:line="25" pos:column="37">Length</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">public</specifier> <name pos:line="26" pos:column="24">long</name></type> <name pos:line="26" pos:column="29">LengthSquared</name> <block pos:line="26" pos:column="43">{ <function><name pos:line="26" pos:column="45">get</name> <block pos:line="26" pos:column="49">{ <return pos:line="26" pos:column="51">return <expr><op:operator pos:line="26" pos:column="58">(</op:operator><name pos:line="26" pos:column="59">long</name><op:operator pos:line="26" pos:column="63">)</op:operator><name pos:line="26" pos:column="64">Length</name> <op:operator pos:line="26" pos:column="71">*</op:operator> <op:operator pos:line="26" pos:column="73">(</op:operator><name pos:line="26" pos:column="74">long</name><op:operator pos:line="26" pos:column="78">)</op:operator><name pos:line="26" pos:column="79">Length</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

		<constructor><specifier pos:line="28" pos:column="17">public</specifier> <name pos:line="28" pos:column="24">WDist</name><parameter_list pos:line="28" pos:column="29">(<param><decl><type><name pos:line="28" pos:column="30">int</name></type> <name pos:line="28" pos:column="34">r</name></decl></param>)</parameter_list> <block pos:line="28" pos:column="37">{ <expr_stmt><expr><name pos:line="28" pos:column="39">Length</name> <op:operator pos:line="28" pos:column="46">=</op:operator> <name pos:line="28" pos:column="48">r</name></expr>;</expr_stmt> }</block></constructor>
		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">public</specifier> <specifier pos:line="29" pos:column="24">static</specifier> <specifier pos:line="29" pos:column="31">readonly</specifier> <name pos:line="29" pos:column="40">WDist</name></type> <name pos:line="29" pos:column="46">Zero</name> <init pos:line="29" pos:column="51">= <expr><op:operator pos:line="29" pos:column="53">new</op:operator> <call><name pos:line="29" pos:column="57">WDist</name><argument_list pos:line="29" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="29" pos:column="63">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<function><type><specifier pos:line="30" pos:column="17">public</specifier> <specifier pos:line="30" pos:column="24">static</specifier> <name pos:line="30" pos:column="31">WDist</name></type> <name pos:line="30" pos:column="37">FromCells</name><parameter_list pos:line="30" pos:column="46">(<param><decl><type><name pos:line="30" pos:column="47">int</name></type> <name pos:line="30" pos:column="51">cells</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="58">{ <return pos:line="30" pos:column="60">return <expr><op:operator pos:line="30" pos:column="67">new</op:operator> <call><name pos:line="30" pos:column="71">WDist</name><argument_list pos:line="30" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="30" pos:column="77">1024</lit:literal> <op:operator pos:line="30" pos:column="82">*</op:operator> <name pos:line="30" pos:column="84">cells</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="32" pos:column="17">public</specifier> <specifier pos:line="32" pos:column="24">static</specifier> <name pos:line="32" pos:column="31">WDist</name></type> <name pos:line="32" pos:column="37">operator +</name><parameter_list pos:line="32" pos:column="47">(<param><decl><type><name pos:line="32" pos:column="48">WDist</name></type> <name pos:line="32" pos:column="54">a</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="57">WDist</name></type> <name pos:line="32" pos:column="63">b</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="66">{ <return pos:line="32" pos:column="68">return <expr><op:operator pos:line="32" pos:column="75">new</op:operator> <call><name pos:line="32" pos:column="79">WDist</name><argument_list pos:line="32" pos:column="84">(<argument><expr><name><name pos:line="32" pos:column="85">a</name><op:operator pos:line="32" pos:column="86">.</op:operator><name pos:line="32" pos:column="87">Length</name></name> <op:operator pos:line="32" pos:column="94">+</op:operator> <name><name pos:line="32" pos:column="96">b</name><op:operator pos:line="32" pos:column="97">.</op:operator><name pos:line="32" pos:column="98">Length</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="33" pos:column="17">public</specifier> <specifier pos:line="33" pos:column="24">static</specifier> <name pos:line="33" pos:column="31">WDist</name></type> <name pos:line="33" pos:column="37">operator -</name><parameter_list pos:line="33" pos:column="47">(<param><decl><type><name pos:line="33" pos:column="48">WDist</name></type> <name pos:line="33" pos:column="54">a</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="57">WDist</name></type> <name pos:line="33" pos:column="63">b</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="66">{ <return pos:line="33" pos:column="68">return <expr><op:operator pos:line="33" pos:column="75">new</op:operator> <call><name pos:line="33" pos:column="79">WDist</name><argument_list pos:line="33" pos:column="84">(<argument><expr><name><name pos:line="33" pos:column="85">a</name><op:operator pos:line="33" pos:column="86">.</op:operator><name pos:line="33" pos:column="87">Length</name></name> <op:operator pos:line="33" pos:column="94">-</op:operator> <name><name pos:line="33" pos:column="96">b</name><op:operator pos:line="33" pos:column="97">.</op:operator><name pos:line="33" pos:column="98">Length</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="34" pos:column="17">public</specifier> <specifier pos:line="34" pos:column="24">static</specifier> <name pos:line="34" pos:column="31">WDist</name></type> <name pos:line="34" pos:column="37">operator -</name><parameter_list pos:line="34" pos:column="47">(<param><decl><type><name pos:line="34" pos:column="48">WDist</name></type> <name pos:line="34" pos:column="54">a</name></decl></param>)</parameter_list> <block pos:line="34" pos:column="57">{ <return pos:line="34" pos:column="59">return <expr><op:operator pos:line="34" pos:column="66">new</op:operator> <call><name pos:line="34" pos:column="70">WDist</name><argument_list pos:line="34" pos:column="75">(<argument><expr><op:operator pos:line="34" pos:column="76">-</op:operator><name><name pos:line="34" pos:column="77">a</name><op:operator pos:line="34" pos:column="78">.</op:operator><name pos:line="34" pos:column="79">Length</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="35" pos:column="17">public</specifier> <specifier pos:line="35" pos:column="24">static</specifier> <name pos:line="35" pos:column="31">WDist</name></type> <name pos:line="35" pos:column="37">operator /</name><parameter_list pos:line="35" pos:column="47">(<param><decl><type><name pos:line="35" pos:column="48">WDist</name></type> <name pos:line="35" pos:column="54">a</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="57">int</name></type> <name pos:line="35" pos:column="61">b</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="64">{ <return pos:line="35" pos:column="66">return <expr><op:operator pos:line="35" pos:column="73">new</op:operator> <call><name pos:line="35" pos:column="77">WDist</name><argument_list pos:line="35" pos:column="82">(<argument><expr><name><name pos:line="35" pos:column="83">a</name><op:operator pos:line="35" pos:column="84">.</op:operator><name pos:line="35" pos:column="85">Length</name></name> <op:operator pos:line="35" pos:column="92">/</op:operator> <name pos:line="35" pos:column="94">b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="36" pos:column="17">public</specifier> <specifier pos:line="36" pos:column="24">static</specifier> <name pos:line="36" pos:column="31">WDist</name></type> <name pos:line="36" pos:column="37">operator *</name><parameter_list pos:line="36" pos:column="47">(<param><decl><type><name pos:line="36" pos:column="48">WDist</name></type> <name pos:line="36" pos:column="54">a</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="57">int</name></type> <name pos:line="36" pos:column="61">b</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="64">{ <return pos:line="36" pos:column="66">return <expr><op:operator pos:line="36" pos:column="73">new</op:operator> <call><name pos:line="36" pos:column="77">WDist</name><argument_list pos:line="36" pos:column="82">(<argument><expr><name><name pos:line="36" pos:column="83">a</name><op:operator pos:line="36" pos:column="84">.</op:operator><name pos:line="36" pos:column="85">Length</name> <type:modifier pos:line="36" pos:column="92">*</type:modifier></name> <name pos:line="36" pos:column="94">b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="37" pos:column="17">public</specifier> <specifier pos:line="37" pos:column="24">static</specifier> <name pos:line="37" pos:column="31">WDist</name></type> <name pos:line="37" pos:column="37">operator *</name><parameter_list pos:line="37" pos:column="47">(<param><decl><type><name pos:line="37" pos:column="48">int</name></type> <name pos:line="37" pos:column="52">a</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="55">WDist</name></type> <name pos:line="37" pos:column="61">b</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="64">{ <return pos:line="37" pos:column="66">return <expr><op:operator pos:line="37" pos:column="73">new</op:operator> <call><name pos:line="37" pos:column="77">WDist</name><argument_list pos:line="37" pos:column="82">(<argument><expr><name pos:line="37" pos:column="83">a</name> <op:operator pos:line="37" pos:column="85">*</op:operator> <name><name pos:line="37" pos:column="87">b</name><op:operator pos:line="37" pos:column="88">.</op:operator><name pos:line="37" pos:column="89">Length</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="38" pos:column="17">public</specifier> <specifier pos:line="38" pos:column="24">static</specifier> <name pos:line="38" pos:column="31">bool</name></type> <name pos:line="38" pos:column="36">operator &lt;</name><parameter_list pos:line="38" pos:column="46">(<param><decl><type><name pos:line="38" pos:column="47">WDist</name></type> <name pos:line="38" pos:column="53">a</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="56">WDist</name></type> <name pos:line="38" pos:column="62">b</name></decl></param>)</parameter_list> <block pos:line="38" pos:column="65">{ <return pos:line="38" pos:column="67">return <expr><name><name pos:line="38" pos:column="74">a</name><op:operator pos:line="38" pos:column="75">.</op:operator><name pos:line="38" pos:column="76">Length</name></name> <op:operator pos:line="38" pos:column="83">&lt;</op:operator> <name><name pos:line="38" pos:column="85">b</name><op:operator pos:line="38" pos:column="86">.</op:operator><name pos:line="38" pos:column="87">Length</name></name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="39" pos:column="17">public</specifier> <specifier pos:line="39" pos:column="24">static</specifier> <name pos:line="39" pos:column="31">bool</name></type> <name pos:line="39" pos:column="36">operator &gt;</name><parameter_list pos:line="39" pos:column="46">(<param><decl><type><name pos:line="39" pos:column="47">WDist</name></type> <name pos:line="39" pos:column="53">a</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="56">WDist</name></type> <name pos:line="39" pos:column="62">b</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="65">{ <return pos:line="39" pos:column="67">return <expr><name><name pos:line="39" pos:column="74">a</name><op:operator pos:line="39" pos:column="75">.</op:operator><name pos:line="39" pos:column="76">Length</name></name> <op:operator pos:line="39" pos:column="83">&gt;</op:operator> <name><name pos:line="39" pos:column="85">b</name><op:operator pos:line="39" pos:column="86">.</op:operator><name pos:line="39" pos:column="87">Length</name></name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="40" pos:column="17">public</specifier> <specifier pos:line="40" pos:column="24">static</specifier> <name pos:line="40" pos:column="31">bool</name></type> <name pos:line="40" pos:column="36">operator &lt;=</name><parameter_list pos:line="40" pos:column="47">(<param><decl><type><name pos:line="40" pos:column="48">WDist</name></type> <name pos:line="40" pos:column="54">a</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="57">WDist</name></type> <name pos:line="40" pos:column="63">b</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="66">{ <return pos:line="40" pos:column="68">return <expr><name><name pos:line="40" pos:column="75">a</name><op:operator pos:line="40" pos:column="76">.</op:operator><name pos:line="40" pos:column="77">Length</name></name> <op:operator pos:line="40" pos:column="84">&lt;=</op:operator> <name><name pos:line="40" pos:column="87">b</name><op:operator pos:line="40" pos:column="88">.</op:operator><name pos:line="40" pos:column="89">Length</name></name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="41" pos:column="17">public</specifier> <specifier pos:line="41" pos:column="24">static</specifier> <name pos:line="41" pos:column="31">bool</name></type> <name pos:line="41" pos:column="36">operator &gt;=</name><parameter_list pos:line="41" pos:column="47">(<param><decl><type><name pos:line="41" pos:column="48">WDist</name></type> <name pos:line="41" pos:column="54">a</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="57">WDist</name></type> <name pos:line="41" pos:column="63">b</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="66">{ <return pos:line="41" pos:column="68">return <expr><name><name pos:line="41" pos:column="75">a</name><op:operator pos:line="41" pos:column="76">.</op:operator><name pos:line="41" pos:column="77">Length</name></name> <op:operator pos:line="41" pos:column="84">&gt;=</op:operator> <name><name pos:line="41" pos:column="87">b</name><op:operator pos:line="41" pos:column="88">.</op:operator><name pos:line="41" pos:column="89">Length</name></name></expr>;</return> }</block></function>

		<function><type><specifier pos:line="43" pos:column="17">public</specifier> <specifier pos:line="43" pos:column="24">static</specifier> <name pos:line="43" pos:column="31">bool</name></type> <name pos:line="43" pos:column="36">operator ==</name><parameter_list pos:line="43" pos:column="47">(<param><decl><type><name pos:line="43" pos:column="48">WDist</name></type> <name pos:line="43" pos:column="54">me</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="58">WDist</name></type> <name pos:line="43" pos:column="64">other</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="71">{ <return pos:line="43" pos:column="73">return <expr><name><name pos:line="43" pos:column="80">me</name><op:operator pos:line="43" pos:column="82">.</op:operator><name pos:line="43" pos:column="83">Length</name></name> <op:operator pos:line="43" pos:column="90">==</op:operator> <name><name pos:line="43" pos:column="93">other</name><op:operator pos:line="43" pos:column="98">.</op:operator><name pos:line="43" pos:column="99">Length</name></name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="44" pos:column="17">public</specifier> <specifier pos:line="44" pos:column="24">static</specifier> <name pos:line="44" pos:column="31">bool</name></type> <name pos:line="44" pos:column="36">operator !=</name><parameter_list pos:line="44" pos:column="47">(<param><decl><type><name pos:line="44" pos:column="48">WDist</name></type> <name pos:line="44" pos:column="54">me</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="58">WDist</name></type> <name pos:line="44" pos:column="64">other</name></decl></param>)</parameter_list> <block pos:line="44" pos:column="71">{ <return pos:line="44" pos:column="73">return <expr><op:operator pos:line="44" pos:column="80">!</op:operator><op:operator pos:line="44" pos:column="81">(</op:operator><name pos:line="44" pos:column="82">me</name> <op:operator pos:line="44" pos:column="85">==</op:operator> <name pos:line="44" pos:column="88">other</name><op:operator pos:line="44" pos:column="93">)</op:operator></expr>;</return> }</block></function>

		<comment type="line" pos:line="46" pos:column="17">// Sampled a N-sample probability density function in the range [-1024..1024]</comment>
		<comment type="line" pos:line="47" pos:column="17">// 1 sample produces a rectangular probability</comment>
		<comment type="line" pos:line="48" pos:column="17">// 2 samples produces a triangular probability</comment>
		<comment type="line" pos:line="49" pos:column="17">// ...</comment>
		<comment type="line" pos:line="50" pos:column="17">// N samples approximates a true gaussian</comment>
		<function><type><specifier pos:line="51" pos:column="17">public</specifier> <specifier pos:line="51" pos:column="24">static</specifier> <name pos:line="51" pos:column="31">WDist</name></type> <name pos:line="51" pos:column="37">FromPDF</name><parameter_list pos:line="51" pos:column="44">(<param><decl><type><name pos:line="51" pos:column="45">MersenneTwister</name></type> <name pos:line="51" pos:column="61">r</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="64">int</name></type> <name pos:line="51" pos:column="68">samples</name></decl></param>)</parameter_list>
		<block pos:line="52" pos:column="17">{
			<return pos:line="53" pos:column="25">return <expr><op:operator pos:line="53" pos:column="32">new</op:operator> <call><name pos:line="53" pos:column="36">WDist</name><argument_list pos:line="53" pos:column="41">(<argument><expr><call><name><name pos:line="53" pos:column="42">Exts</name><op:operator pos:line="53" pos:column="46">.</op:operator><name pos:line="53" pos:column="47">MakeArray</name></name><argument_list pos:line="53" pos:column="56">(<argument><expr><name pos:line="53" pos:column="57">samples</name></expr></argument>, <argument><expr><lambda><name pos:line="53" pos:column="66">_</name> <op:operator pos:line="53" pos:column="68">=&gt;</op:operator> <call><name><name pos:line="53" pos:column="71">r</name><op:operator pos:line="53" pos:column="72">.</op:operator><name pos:line="53" pos:column="73">Next</name></name><argument_list pos:line="53" pos:column="77">(<argument><expr><op:operator pos:line="53" pos:column="78">-</op:operator><lit:literal type="number" pos:line="53" pos:column="79">1024</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="53" pos:column="85">1024</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
				<op:operator pos:line="54" pos:column="33">.</op:operator><call><name pos:line="54" pos:column="34">Sum</name><argument_list pos:line="54" pos:column="37">()</argument_list></call> <op:operator pos:line="54" pos:column="40">/</op:operator> <name pos:line="54" pos:column="42">samples</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="57" pos:column="17">public</specifier> <specifier pos:line="57" pos:column="24">static</specifier> <name pos:line="57" pos:column="31">bool</name></type> <name pos:line="57" pos:column="36">TryParse</name><parameter_list pos:line="57" pos:column="44">(<param><decl><type><name pos:line="57" pos:column="45">string</name></type> <name pos:line="57" pos:column="52">s</name></decl></param>, <param><decl><type><specifier pos:line="57" pos:column="55">out</specifier> <name pos:line="57" pos:column="59">WDist</name></type> <name pos:line="57" pos:column="65">result</name></decl></param>)</parameter_list>
		<block pos:line="58" pos:column="17">{
			<expr_stmt><expr><name pos:line="59" pos:column="25">result</name> <op:operator pos:line="59" pos:column="32">=</op:operator> <name><name pos:line="59" pos:column="34">WDist</name><op:operator pos:line="59" pos:column="39">.</op:operator><name pos:line="59" pos:column="40">Zero</name></name></expr>;</expr_stmt>

			<if pos:line="61" pos:column="25">if <condition pos:line="61" pos:column="28">(<expr><call><name><name pos:line="61" pos:column="29">string</name><op:operator pos:line="61" pos:column="35">.</op:operator><name pos:line="61" pos:column="36">IsNullOrEmpty</name></name><argument_list pos:line="61" pos:column="49">(<argument><expr><name pos:line="61" pos:column="50">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="61" pos:column="53">
				<return pos:line="62" pos:column="33">return <expr><lit:literal type="boolean" pos:line="62" pos:column="40">false</lit:literal></expr>;</return></then></if>

			<expr_stmt><expr><name pos:line="64" pos:column="25">s</name> <op:operator pos:line="64" pos:column="27">=</op:operator> <call><name><name pos:line="64" pos:column="29">s</name><op:operator pos:line="64" pos:column="30">.</op:operator><name pos:line="64" pos:column="31">ToLowerInvariant</name></name><argument_list pos:line="64" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="65" pos:column="25">var</name></type> <name pos:line="65" pos:column="29">components</name> <init pos:line="65" pos:column="40">= <expr><call><name><name pos:line="65" pos:column="42">s</name><op:operator pos:line="65" pos:column="43">.</op:operator><name pos:line="65" pos:column="44">Split</name></name><argument_list pos:line="65" pos:column="49">(<argument><expr><lit:literal type="char" pos:line="65" pos:column="50">'c'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="66" pos:column="25">var</name></type> <name pos:line="66" pos:column="29">cell</name> <init pos:line="66" pos:column="34">= <expr><lit:literal type="number" pos:line="66" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="67" pos:column="25">var</name></type> <name pos:line="67" pos:column="29">subcell</name> <init pos:line="67" pos:column="37">= <expr><lit:literal type="number" pos:line="67" pos:column="39">0</lit:literal></expr></init></decl>;</decl_stmt>

			<switch pos:line="69" pos:column="25">switch <condition pos:line="69" pos:column="32">(<expr><name><name pos:line="69" pos:column="33">components</name><op:operator pos:line="69" pos:column="43">.</op:operator><name pos:line="69" pos:column="44">Length</name></name></expr>)</condition>
			<block pos:line="70" pos:column="25">{
				<case pos:line="71" pos:column="33">case <expr><lit:literal type="number" pos:line="71" pos:column="38">2</lit:literal></expr>:
					<if pos:line="72" pos:column="41">if <condition pos:line="72" pos:column="44">(<expr><op:operator pos:line="72" pos:column="45">!</op:operator><call><name><name pos:line="72" pos:column="46">Exts</name><op:operator pos:line="72" pos:column="50">.</op:operator><name pos:line="72" pos:column="51">TryParseIntegerInvariant</name></name><argument_list pos:line="72" pos:column="75">(<argument><expr><name><name pos:line="72" pos:column="76">components</name><index pos:line="72" pos:column="86">[<expr><lit:literal type="number" pos:line="72" pos:column="87">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="72" pos:column="91">out <name pos:line="72" pos:column="95">cell</name></expr></argument>)</argument_list></call> <op:operator pos:line="72" pos:column="101">||</op:operator>
						<op:operator pos:line="73" pos:column="49">!</op:operator><call><name><name pos:line="73" pos:column="50">Exts</name><op:operator pos:line="73" pos:column="54">.</op:operator><name pos:line="73" pos:column="55">TryParseIntegerInvariant</name></name><argument_list pos:line="73" pos:column="79">(<argument><expr><name><name pos:line="73" pos:column="80">components</name><index pos:line="73" pos:column="90">[<expr><lit:literal type="number" pos:line="73" pos:column="91">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="73" pos:column="95">out <name pos:line="73" pos:column="99">subcell</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="73" pos:column="108">
						<return pos:line="74" pos:column="49">return <expr><lit:literal type="boolean" pos:line="74" pos:column="56">false</lit:literal></expr>;</return></then></if>
					<break pos:line="75" pos:column="41">break;</break>
				</case><case pos:line="76" pos:column="33">case <expr><lit:literal type="number" pos:line="76" pos:column="38">1</lit:literal></expr>:
					<if pos:line="77" pos:column="41">if <condition pos:line="77" pos:column="44">(<expr><op:operator pos:line="77" pos:column="45">!</op:operator><call><name><name pos:line="77" pos:column="46">Exts</name><op:operator pos:line="77" pos:column="50">.</op:operator><name pos:line="77" pos:column="51">TryParseIntegerInvariant</name></name><argument_list pos:line="77" pos:column="75">(<argument><expr><name><name pos:line="77" pos:column="76">components</name><index pos:line="77" pos:column="86">[<expr><lit:literal type="number" pos:line="77" pos:column="87">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="77" pos:column="91">out <name pos:line="77" pos:column="95">subcell</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="77" pos:column="104">
						<return pos:line="78" pos:column="49">return <expr><lit:literal type="boolean" pos:line="78" pos:column="56">false</lit:literal></expr>;</return></then></if>
					<break pos:line="79" pos:column="41">break;</break>
				</case><default pos:line="80" pos:column="33">default: <return pos:line="80" pos:column="42">return <expr><lit:literal type="boolean" pos:line="80" pos:column="49">false</lit:literal></expr>;</return>
			</default>}</block></switch>

			<comment type="line" pos:line="83" pos:column="25">// Propagate sign to fractional part</comment>
			<if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><name pos:line="84" pos:column="29">cell</name> <op:operator pos:line="84" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="84" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="84" pos:column="38">
				<expr_stmt><expr><name pos:line="85" pos:column="33">subcell</name> <op:operator pos:line="85" pos:column="41">=</op:operator> <op:operator pos:line="85" pos:column="43">-</op:operator><name pos:line="85" pos:column="44">subcell</name></expr>;</expr_stmt></then></if>

			<expr_stmt><expr><name pos:line="87" pos:column="25">result</name> <op:operator pos:line="87" pos:column="32">=</op:operator> <op:operator pos:line="87" pos:column="34">new</op:operator> <call><name pos:line="87" pos:column="38">WDist</name><argument_list pos:line="87" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="87" pos:column="44">1024</lit:literal> <op:operator pos:line="87" pos:column="49">*</op:operator> <name pos:line="87" pos:column="51">cell</name> <op:operator pos:line="87" pos:column="56">+</op:operator> <name pos:line="87" pos:column="58">subcell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="88" pos:column="25">return <expr><lit:literal type="boolean" pos:line="88" pos:column="32">true</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="91" pos:column="17">public</specifier> <specifier pos:line="91" pos:column="24">override</specifier> <name pos:line="91" pos:column="33">int</name></type> <name pos:line="91" pos:column="37">GetHashCode</name><parameter_list pos:line="91" pos:column="48">()</parameter_list> <block pos:line="91" pos:column="51">{ <return pos:line="91" pos:column="53">return <expr><call><name><name pos:line="91" pos:column="60">Length</name><op:operator pos:line="91" pos:column="66">.</op:operator><name pos:line="91" pos:column="67">GetHashCode</name></name><argument_list pos:line="91" pos:column="78">()</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="93" pos:column="17">public</specifier> <name pos:line="93" pos:column="24">bool</name></type> <name pos:line="93" pos:column="29">Equals</name><parameter_list pos:line="93" pos:column="35">(<param><decl><type><name pos:line="93" pos:column="36">WDist</name></type> <name pos:line="93" pos:column="42">other</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="49">{ <return pos:line="93" pos:column="51">return <expr><name pos:line="93" pos:column="58">other</name> <op:operator pos:line="93" pos:column="64">==</op:operator> <name pos:line="93" pos:column="67">this</name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="94" pos:column="17">public</specifier> <specifier pos:line="94" pos:column="24">override</specifier> <name pos:line="94" pos:column="33">bool</name></type> <name pos:line="94" pos:column="38">Equals</name><parameter_list pos:line="94" pos:column="44">(<param><decl><type><name pos:line="94" pos:column="45">object</name></type> <name pos:line="94" pos:column="52">obj</name></decl></param>)</parameter_list> <block pos:line="94" pos:column="57">{ <return pos:line="94" pos:column="59">return <expr><name pos:line="94" pos:column="66">obj</name> <op:operator pos:line="94" pos:column="70">is</op:operator> <name pos:line="94" pos:column="73">WDist</name> <op:operator pos:line="94" pos:column="79">&amp;&amp;</op:operator> <call><name pos:line="94" pos:column="82">Equals</name><argument_list pos:line="94" pos:column="88">(<argument><expr><op:operator pos:line="94" pos:column="89">(</op:operator><name pos:line="94" pos:column="90">WDist</name><op:operator pos:line="94" pos:column="95">)</op:operator><name pos:line="94" pos:column="96">obj</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="96" pos:column="17">public</specifier> <name pos:line="96" pos:column="24">int</name></type> <name pos:line="96" pos:column="28">CompareTo</name><parameter_list pos:line="96" pos:column="37">(<param><decl><type><name pos:line="96" pos:column="38">object</name></type> <name pos:line="96" pos:column="45">obj</name></decl></param>)</parameter_list>
		<block pos:line="97" pos:column="17">{
			<if pos:line="98" pos:column="25">if <condition pos:line="98" pos:column="28">(<expr><op:operator pos:line="98" pos:column="29">!</op:operator><op:operator pos:line="98" pos:column="30">(</op:operator><name pos:line="98" pos:column="31">obj</name> <op:operator pos:line="98" pos:column="35">is</op:operator> <name pos:line="98" pos:column="38">WDist</name><op:operator pos:line="98" pos:column="43">)</op:operator></expr>)</condition><then pos:line="98" pos:column="45">
				<return pos:line="99" pos:column="33">return <expr><lit:literal type="number" pos:line="99" pos:column="40">1</lit:literal></expr>;</return></then></if>
			<return pos:line="100" pos:column="25">return <expr><call><name><name pos:line="100" pos:column="32">Length</name><op:operator pos:line="100" pos:column="38">.</op:operator><name pos:line="100" pos:column="39">CompareTo</name></name><argument_list pos:line="100" pos:column="48">(<argument><expr><op:operator pos:line="100" pos:column="49">(</op:operator><op:operator pos:line="100" pos:column="50">(</op:operator><name pos:line="100" pos:column="51">WDist</name><op:operator pos:line="100" pos:column="56">)</op:operator><name pos:line="100" pos:column="57">obj</name><op:operator pos:line="100" pos:column="60">)</op:operator><op:operator pos:line="100" pos:column="61">.</op:operator><name pos:line="100" pos:column="62">Length</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="103" pos:column="17">public</specifier> <name pos:line="103" pos:column="24">int</name></type> <name pos:line="103" pos:column="28">CompareTo</name><parameter_list pos:line="103" pos:column="37">(<param><decl><type><name pos:line="103" pos:column="38">WDist</name></type> <name pos:line="103" pos:column="44">other</name></decl></param>)</parameter_list> <block pos:line="103" pos:column="51">{ <return pos:line="103" pos:column="53">return <expr><call><name><name pos:line="103" pos:column="60">Length</name><op:operator pos:line="103" pos:column="66">.</op:operator><name pos:line="103" pos:column="67">CompareTo</name></name><argument_list pos:line="103" pos:column="76">(<argument><expr><name><name pos:line="103" pos:column="77">other</name><op:operator pos:line="103" pos:column="82">.</op:operator><name pos:line="103" pos:column="83">Length</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="105" pos:column="17">public</specifier> <specifier pos:line="105" pos:column="24">override</specifier> <name pos:line="105" pos:column="33">string</name></type> <name pos:line="105" pos:column="40">ToString</name><parameter_list pos:line="105" pos:column="48">()</parameter_list> <block pos:line="105" pos:column="51">{ <return pos:line="105" pos:column="53">return <expr><call><name><name pos:line="105" pos:column="60">Length</name><op:operator pos:line="105" pos:column="66">.</op:operator><name pos:line="105" pos:column="67">ToString</name></name><argument_list pos:line="105" pos:column="75">()</argument_list></call></expr>;</return> }</block></function>

		<cpp:region pos:line="107" pos:column="17">#<cpp:directive pos:line="107" pos:column="18">region</cpp:directive> Scripting interface</cpp:region>
		<function><type><specifier pos:line="108" pos:column="17">public</specifier> <name pos:line="108" pos:column="24">LuaValue</name></type> <name pos:line="108" pos:column="33">Add</name><parameter_list pos:line="108" pos:column="36">(<param><decl><type><name pos:line="108" pos:column="37">LuaRuntime</name></type> <name pos:line="108" pos:column="48">runtime</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="57">LuaValue</name></type> <name pos:line="108" pos:column="66">left</name></decl></param>, <param><decl><type><name pos:line="108" pos:column="72">LuaValue</name></type> <name pos:line="108" pos:column="81">right</name></decl></param>)</parameter_list>
		<block pos:line="109" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="110" pos:column="25">WDist</name></type> <name pos:line="110" pos:column="31">a</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="111" pos:column="25">WDist</name></type> <name pos:line="111" pos:column="31">b</name></decl>;</decl_stmt>
			<if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><op:operator pos:line="112" pos:column="29">!</op:operator><call><name><name pos:line="112" pos:column="30">left</name><op:operator pos:line="112" pos:column="34">.</op:operator><name><name pos:line="112" pos:column="35">TryGetClrValue</name><argument_list pos:line="112" pos:column="49">&lt;<argument><name pos:line="112" pos:column="50">WDist</name></argument>&gt;</argument_list></name></name><argument_list pos:line="112" pos:column="56">(<argument><expr pos:line="112" pos:column="57">out <name pos:line="112" pos:column="61">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="112" pos:column="64">||</op:operator> <op:operator pos:line="112" pos:column="67">!</op:operator><call><name><name pos:line="112" pos:column="68">right</name><op:operator pos:line="112" pos:column="73">.</op:operator><name><name pos:line="112" pos:column="74">TryGetClrValue</name><argument_list pos:line="112" pos:column="88">&lt;<argument><name pos:line="112" pos:column="89">WDist</name></argument>&gt;</argument_list></name></name><argument_list pos:line="112" pos:column="95">(<argument><expr pos:line="112" pos:column="96">out <name pos:line="112" pos:column="100">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="112" pos:column="103">
				<throw pos:line="113" pos:column="33">throw <expr><op:operator pos:line="113" pos:column="39">new</op:operator> <call><name pos:line="113" pos:column="43">LuaException</name><argument_list pos:line="113" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="56">"Attempted to call WDist.Add(WDist, WDist) with invalid arguments."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<return pos:line="115" pos:column="25">return <expr><op:operator pos:line="115" pos:column="32">new</op:operator> <call><name pos:line="115" pos:column="36">LuaCustomClrObject</name><argument_list pos:line="115" pos:column="54">(<argument><expr><name pos:line="115" pos:column="55">a</name> <op:operator pos:line="115" pos:column="57">+</op:operator> <name pos:line="115" pos:column="59">b</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="118" pos:column="17">public</specifier> <name pos:line="118" pos:column="24">LuaValue</name></type> <name pos:line="118" pos:column="33">Subtract</name><parameter_list pos:line="118" pos:column="41">(<param><decl><type><name pos:line="118" pos:column="42">LuaRuntime</name></type> <name pos:line="118" pos:column="53">runtime</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="62">LuaValue</name></type> <name pos:line="118" pos:column="71">left</name></decl></param>, <param><decl><type><name pos:line="118" pos:column="77">LuaValue</name></type> <name pos:line="118" pos:column="86">right</name></decl></param>)</parameter_list>
		<block pos:line="119" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="120" pos:column="25">WDist</name></type> <name pos:line="120" pos:column="31">a</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="121" pos:column="25">WDist</name></type> <name pos:line="121" pos:column="31">b</name></decl>;</decl_stmt>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><op:operator pos:line="122" pos:column="29">!</op:operator><call><name><name pos:line="122" pos:column="30">left</name><op:operator pos:line="122" pos:column="34">.</op:operator><name><name pos:line="122" pos:column="35">TryGetClrValue</name><argument_list pos:line="122" pos:column="49">&lt;<argument><name pos:line="122" pos:column="50">WDist</name></argument>&gt;</argument_list></name></name><argument_list pos:line="122" pos:column="56">(<argument><expr pos:line="122" pos:column="57">out <name pos:line="122" pos:column="61">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="122" pos:column="64">||</op:operator> <op:operator pos:line="122" pos:column="67">!</op:operator><call><name><name pos:line="122" pos:column="68">right</name><op:operator pos:line="122" pos:column="73">.</op:operator><name><name pos:line="122" pos:column="74">TryGetClrValue</name><argument_list pos:line="122" pos:column="88">&lt;<argument><name pos:line="122" pos:column="89">WDist</name></argument>&gt;</argument_list></name></name><argument_list pos:line="122" pos:column="95">(<argument><expr pos:line="122" pos:column="96">out <name pos:line="122" pos:column="100">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="122" pos:column="103">
				<throw pos:line="123" pos:column="33">throw <expr><op:operator pos:line="123" pos:column="39">new</op:operator> <call><name pos:line="123" pos:column="43">LuaException</name><argument_list pos:line="123" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="56">"Attempted to call WDist.Subtract(WDist, WDist) with invalid arguments."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<return pos:line="125" pos:column="25">return <expr><op:operator pos:line="125" pos:column="32">new</op:operator> <call><name pos:line="125" pos:column="36">LuaCustomClrObject</name><argument_list pos:line="125" pos:column="54">(<argument><expr><name pos:line="125" pos:column="55">a</name> <op:operator pos:line="125" pos:column="57">-</op:operator> <name pos:line="125" pos:column="59">b</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="128" pos:column="17">public</specifier> <name pos:line="128" pos:column="24">LuaValue</name></type> <name pos:line="128" pos:column="33">Equals</name><parameter_list pos:line="128" pos:column="39">(<param><decl><type><name pos:line="128" pos:column="40">LuaRuntime</name></type> <name pos:line="128" pos:column="51">runtime</name></decl></param>, <param><decl><type><name pos:line="128" pos:column="60">LuaValue</name></type> <name pos:line="128" pos:column="69">left</name></decl></param>, <param><decl><type><name pos:line="128" pos:column="75">LuaValue</name></type> <name pos:line="128" pos:column="84">right</name></decl></param>)</parameter_list>
		<block pos:line="129" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="130" pos:column="25">WDist</name></type> <name pos:line="130" pos:column="31">a</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="131" pos:column="25">WDist</name></type> <name pos:line="131" pos:column="31">b</name></decl>;</decl_stmt>
			<if pos:line="132" pos:column="25">if <condition pos:line="132" pos:column="28">(<expr><op:operator pos:line="132" pos:column="29">!</op:operator><call><name><name pos:line="132" pos:column="30">left</name><op:operator pos:line="132" pos:column="34">.</op:operator><name><name pos:line="132" pos:column="35">TryGetClrValue</name><argument_list pos:line="132" pos:column="49">&lt;<argument><name pos:line="132" pos:column="50">WDist</name></argument>&gt;</argument_list></name></name><argument_list pos:line="132" pos:column="56">(<argument><expr pos:line="132" pos:column="57">out <name pos:line="132" pos:column="61">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="132" pos:column="64">||</op:operator> <op:operator pos:line="132" pos:column="67">!</op:operator><call><name><name pos:line="132" pos:column="68">right</name><op:operator pos:line="132" pos:column="73">.</op:operator><name><name pos:line="132" pos:column="74">TryGetClrValue</name><argument_list pos:line="132" pos:column="88">&lt;<argument><name pos:line="132" pos:column="89">WDist</name></argument>&gt;</argument_list></name></name><argument_list pos:line="132" pos:column="95">(<argument><expr pos:line="132" pos:column="96">out <name pos:line="132" pos:column="100">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="132" pos:column="103">
				<throw pos:line="133" pos:column="33">throw <expr><op:operator pos:line="133" pos:column="39">new</op:operator> <call><name pos:line="133" pos:column="43">LuaException</name><argument_list pos:line="133" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="56">"Attempted to call WDist.Equals(WDist, WDist) with invalid arguments."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<return pos:line="135" pos:column="25">return <expr><name pos:line="135" pos:column="32">a</name> <op:operator pos:line="135" pos:column="34">==</op:operator> <name pos:line="135" pos:column="37">b</name></expr>;</return>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="138" pos:column="17">public</specifier> <name pos:line="138" pos:column="24">LuaValue</name></type> <name pos:line="138" pos:column="33">this</name><parameter_list pos:line="138" pos:column="37">[<param><decl><type><name pos:line="138" pos:column="38">LuaRuntime</name></type> <name pos:line="138" pos:column="49">runtime</name></decl></param><op:operator pos:line="138" pos:column="56">,</op:operator> <param><decl><type><name pos:line="138" pos:column="58">LuaValue</name></type> <name pos:line="138" pos:column="67">key</name></decl></param>]</parameter_list>
		<block pos:line="139" pos:column="17">{
			<function><name pos:line="140" pos:column="25">get</name>
			<block pos:line="141" pos:column="25">{
				<switch pos:line="142" pos:column="33">switch <condition pos:line="142" pos:column="40">(<expr><call><name><name pos:line="142" pos:column="41">key</name><op:operator pos:line="142" pos:column="44">.</op:operator><name pos:line="142" pos:column="45">ToString</name></name><argument_list pos:line="142" pos:column="53">()</argument_list></call></expr>)</condition>
				<block pos:line="143" pos:column="33">{
					<case pos:line="144" pos:column="41">case <expr><lit:literal type="string" pos:line="144" pos:column="46">"Length"</lit:literal></expr>: <return pos:line="144" pos:column="56">return <expr><name pos:line="144" pos:column="63">Length</name></expr>;</return>
					</case><case pos:line="145" pos:column="41">case <expr><lit:literal type="string" pos:line="145" pos:column="46">"Range"</lit:literal></expr>: <expr_stmt><expr><call><name><name pos:line="145" pos:column="55">Game</name><op:operator pos:line="145" pos:column="59">.</op:operator><name pos:line="145" pos:column="60">Debug</name></name><argument_list pos:line="145" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="66">"WRange.Range is deprecated. Use WDist.Length instead"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="145" pos:column="123">return <expr><name pos:line="145" pos:column="130">Length</name></expr>;</return>
					</case><default pos:line="146" pos:column="41">default: <throw pos:line="146" pos:column="50">throw <expr><op:operator pos:line="146" pos:column="56">new</op:operator> <call><name pos:line="146" pos:column="60">LuaException</name><argument_list pos:line="146" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="73">"WDist does not define a member '{0}'"</lit:literal><op:operator pos:line="146" pos:column="111">.</op:operator><call><name pos:line="146" pos:column="112">F</name><argument_list pos:line="146" pos:column="113">(<argument><expr><name pos:line="146" pos:column="114">key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
				</default>}</block></switch>
			}</block></function>

			<function><name pos:line="150" pos:column="25">set</name>
			<block pos:line="151" pos:column="25">{
				<throw pos:line="152" pos:column="33">throw <expr><op:operator pos:line="152" pos:column="39">new</op:operator> <call><name pos:line="152" pos:column="43">LuaException</name><argument_list pos:line="152" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="56">"WDist is read-only. Use WDist.New to create a new value"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></function>
		}</block></decl></decl_stmt>
		<cpp:endregion pos:line="155" pos:column="17">#<cpp:directive pos:line="155" pos:column="18">endregion</cpp:directive></cpp:endregion>
	}</block></struct>
}</block></namespace>
</unit>
