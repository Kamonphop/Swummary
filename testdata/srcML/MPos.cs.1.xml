<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\MPos.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Drawing</name></name>;</using>

<namespace pos:line="14" pos:column="1">namespace <name pos:line="14" pos:column="11">OpenRA</name>
<block pos:line="15" pos:column="1">{
	<struct><specifier pos:line="16" pos:column="9">public</specifier> struct <name pos:line="16" pos:column="23">MPos</name> <super pos:line="16" pos:column="28">: <name><name pos:line="16" pos:column="30">IEquatable</name><argument_list pos:line="16" pos:column="40">&lt;<argument><name pos:line="16" pos:column="41">MPos</name></argument>&gt;</argument_list></name></super>
	<block pos:line="17" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="18" pos:column="17">public</specifier> <specifier pos:line="18" pos:column="24">readonly</specifier> <name pos:line="18" pos:column="33">int</name></type> <name pos:line="18" pos:column="37">U</name></decl><op:operator pos:line="18" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="18" pos:column="40">V</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="20" pos:column="17">public</specifier> <name pos:line="20" pos:column="24">MPos</name><parameter_list pos:line="20" pos:column="28">(<param><decl><type><name pos:line="20" pos:column="29">int</name></type> <name pos:line="20" pos:column="33">u</name></decl></param>, <param><decl><type><name pos:line="20" pos:column="36">int</name></type> <name pos:line="20" pos:column="40">v</name></decl></param>)</parameter_list> <block pos:line="20" pos:column="43">{ <expr_stmt><expr><name pos:line="20" pos:column="45">U</name> <op:operator pos:line="20" pos:column="47">=</op:operator> <name pos:line="20" pos:column="49">u</name></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="20" pos:column="52">V</name> <op:operator pos:line="20" pos:column="54">=</op:operator> <name pos:line="20" pos:column="56">v</name></expr>;</expr_stmt> }</block></constructor>
		<decl_stmt><decl><type><specifier pos:line="21" pos:column="17">public</specifier> <specifier pos:line="21" pos:column="24">static</specifier> <specifier pos:line="21" pos:column="31">readonly</specifier> <name pos:line="21" pos:column="40">MPos</name></type> <name pos:line="21" pos:column="45">Zero</name> <init pos:line="21" pos:column="50">= <expr><op:operator pos:line="21" pos:column="52">new</op:operator> <call><name pos:line="21" pos:column="56">MPos</name><argument_list pos:line="21" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="21" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="21" pos:column="64">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="23" pos:column="17">public</specifier> <specifier pos:line="23" pos:column="24">static</specifier> <name pos:line="23" pos:column="31">bool</name></type> <name pos:line="23" pos:column="36">operator ==</name><parameter_list pos:line="23" pos:column="47">(<param><decl><type><name pos:line="23" pos:column="48">MPos</name></type> <name pos:line="23" pos:column="53">me</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="57">MPos</name></type> <name pos:line="23" pos:column="62">other</name></decl></param>)</parameter_list> <block pos:line="23" pos:column="69">{ <return pos:line="23" pos:column="71">return <expr><name><name pos:line="23" pos:column="78">me</name><op:operator pos:line="23" pos:column="80">.</op:operator><name pos:line="23" pos:column="81">U</name></name> <op:operator pos:line="23" pos:column="83">==</op:operator> <name><name pos:line="23" pos:column="86">other</name><op:operator pos:line="23" pos:column="91">.</op:operator><name pos:line="23" pos:column="92">U</name> <type:modifier pos:line="23" pos:column="94">&amp;&amp;</type:modifier></name> <name><name pos:line="23" pos:column="97">me</name><op:operator pos:line="23" pos:column="99">.</op:operator><name pos:line="23" pos:column="100">V</name></name> <op:operator pos:line="23" pos:column="102">==</op:operator> <name><name pos:line="23" pos:column="105">other</name><op:operator pos:line="23" pos:column="110">.</op:operator><name pos:line="23" pos:column="111">V</name></name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="24" pos:column="17">public</specifier> <specifier pos:line="24" pos:column="24">static</specifier> <name pos:line="24" pos:column="31">bool</name></type> <name pos:line="24" pos:column="36">operator !=</name><parameter_list pos:line="24" pos:column="47">(<param><decl><type><name pos:line="24" pos:column="48">MPos</name></type> <name pos:line="24" pos:column="53">me</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="57">MPos</name></type> <name pos:line="24" pos:column="62">other</name></decl></param>)</parameter_list> <block pos:line="24" pos:column="69">{ <return pos:line="24" pos:column="71">return <expr><op:operator pos:line="24" pos:column="78">!</op:operator><op:operator pos:line="24" pos:column="79">(</op:operator><name pos:line="24" pos:column="80">me</name> <op:operator pos:line="24" pos:column="83">==</op:operator> <name pos:line="24" pos:column="86">other</name><op:operator pos:line="24" pos:column="91">)</op:operator></expr>;</return> }</block></function>

		<function><type><specifier pos:line="26" pos:column="17">public</specifier> <specifier pos:line="26" pos:column="24">override</specifier> <name pos:line="26" pos:column="33">int</name></type> <name pos:line="26" pos:column="37">GetHashCode</name><parameter_list pos:line="26" pos:column="48">()</parameter_list> <block pos:line="26" pos:column="51">{ <return pos:line="26" pos:column="53">return <expr><call><name><name pos:line="26" pos:column="60">U</name><op:operator pos:line="26" pos:column="61">.</op:operator><name pos:line="26" pos:column="62">GetHashCode</name></name><argument_list pos:line="26" pos:column="73">()</argument_list></call> <op:operator pos:line="26" pos:column="76">^</op:operator> <call><name><name pos:line="26" pos:column="78">V</name><op:operator pos:line="26" pos:column="79">.</op:operator><name pos:line="26" pos:column="80">GetHashCode</name></name><argument_list pos:line="26" pos:column="91">()</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="28" pos:column="17">public</specifier> <name pos:line="28" pos:column="24">bool</name></type> <name pos:line="28" pos:column="29">Equals</name><parameter_list pos:line="28" pos:column="35">(<param><decl><type><name pos:line="28" pos:column="36">MPos</name></type> <name pos:line="28" pos:column="41">other</name></decl></param>)</parameter_list> <block pos:line="28" pos:column="48">{ <return pos:line="28" pos:column="50">return <expr><name pos:line="28" pos:column="57">other</name> <op:operator pos:line="28" pos:column="63">==</op:operator> <name pos:line="28" pos:column="66">this</name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="29" pos:column="17">public</specifier> <specifier pos:line="29" pos:column="24">override</specifier> <name pos:line="29" pos:column="33">bool</name></type> <name pos:line="29" pos:column="38">Equals</name><parameter_list pos:line="29" pos:column="44">(<param><decl><type><name pos:line="29" pos:column="45">object</name></type> <name pos:line="29" pos:column="52">obj</name></decl></param>)</parameter_list> <block pos:line="29" pos:column="57">{ <return pos:line="29" pos:column="59">return <expr><name pos:line="29" pos:column="66">obj</name> <op:operator pos:line="29" pos:column="70">is</op:operator> <name pos:line="29" pos:column="73">MPos</name> <op:operator pos:line="29" pos:column="78">&amp;&amp;</op:operator> <call><name pos:line="29" pos:column="81">Equals</name><argument_list pos:line="29" pos:column="87">(<argument><expr><op:operator pos:line="29" pos:column="88">(</op:operator><name pos:line="29" pos:column="89">MPos</name><op:operator pos:line="29" pos:column="93">)</op:operator><name pos:line="29" pos:column="94">obj</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="31" pos:column="17">public</specifier> <name pos:line="31" pos:column="24">MPos</name></type> <name pos:line="31" pos:column="29">Clamp</name><parameter_list pos:line="31" pos:column="34">(<param><decl><type><name pos:line="31" pos:column="35">Rectangle</name></type> <name pos:line="31" pos:column="45">r</name></decl></param>)</parameter_list>
		<block pos:line="32" pos:column="17">{
			<return pos:line="33" pos:column="25">return <expr><op:operator pos:line="33" pos:column="32">new</op:operator> <call><name pos:line="33" pos:column="36">MPos</name><argument_list pos:line="33" pos:column="40">(<argument><expr><call><name><name pos:line="33" pos:column="41">Math</name><op:operator pos:line="33" pos:column="45">.</op:operator><name pos:line="33" pos:column="46">Min</name></name><argument_list pos:line="33" pos:column="49">(<argument><expr><name><name pos:line="33" pos:column="50">r</name><op:operator pos:line="33" pos:column="51">.</op:operator><name pos:line="33" pos:column="52">Right</name></name></expr></argument>, <argument><expr><call><name><name pos:line="33" pos:column="59">Math</name><op:operator pos:line="33" pos:column="63">.</op:operator><name pos:line="33" pos:column="64">Max</name></name><argument_list pos:line="33" pos:column="67">(<argument><expr><name pos:line="33" pos:column="68">U</name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="71">r</name><op:operator pos:line="33" pos:column="72">.</op:operator><name pos:line="33" pos:column="73">Left</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name pos:line="34" pos:column="57">Math</name><op:operator pos:line="34" pos:column="61">.</op:operator><name pos:line="34" pos:column="62">Min</name></name><argument_list pos:line="34" pos:column="65">(<argument><expr><name><name pos:line="34" pos:column="66">r</name><op:operator pos:line="34" pos:column="67">.</op:operator><name pos:line="34" pos:column="68">Bottom</name></name></expr></argument>, <argument><expr><call><name><name pos:line="34" pos:column="76">Math</name><op:operator pos:line="34" pos:column="80">.</op:operator><name pos:line="34" pos:column="81">Max</name></name><argument_list pos:line="34" pos:column="84">(<argument><expr><name pos:line="34" pos:column="85">V</name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="88">r</name><op:operator pos:line="34" pos:column="89">.</op:operator><name pos:line="34" pos:column="90">Top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="37" pos:column="17">public</specifier> <specifier pos:line="37" pos:column="24">override</specifier> <name pos:line="37" pos:column="33">string</name></type> <name pos:line="37" pos:column="40">ToString</name><parameter_list pos:line="37" pos:column="48">()</parameter_list> <block pos:line="37" pos:column="51">{ <return pos:line="37" pos:column="53">return <expr><name pos:line="37" pos:column="60">U</name> <op:operator pos:line="37" pos:column="62">+</op:operator> <lit:literal type="string" pos:line="37" pos:column="64">","</lit:literal> <op:operator pos:line="37" pos:column="68">+</op:operator> <name pos:line="37" pos:column="70">V</name></expr>;</return> }</block></function>

		<function><type><specifier pos:line="39" pos:column="17">public</specifier> <name pos:line="39" pos:column="24">CPos</name></type> <name pos:line="39" pos:column="29">ToCPos</name><parameter_list pos:line="39" pos:column="35">(<param><decl><type><name pos:line="39" pos:column="36">Map</name></type> <name pos:line="39" pos:column="40">map</name></decl></param>)</parameter_list>
		<block pos:line="40" pos:column="17">{
			<return pos:line="41" pos:column="25">return <expr><call><name pos:line="41" pos:column="32">ToCPos</name><argument_list pos:line="41" pos:column="38">(<argument><expr><name><name pos:line="41" pos:column="39">map</name><op:operator pos:line="41" pos:column="42">.</op:operator><name pos:line="41" pos:column="43">TileShape</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="44" pos:column="17">public</specifier> <name pos:line="44" pos:column="24">CPos</name></type> <name pos:line="44" pos:column="29">ToCPos</name><parameter_list pos:line="44" pos:column="35">(<param><decl><type><name pos:line="44" pos:column="36">TileShape</name></type> <name pos:line="44" pos:column="46">shape</name></decl></param>)</parameter_list>
		<block pos:line="45" pos:column="17">{
			<if pos:line="46" pos:column="25">if <condition pos:line="46" pos:column="28">(<expr><name pos:line="46" pos:column="29">shape</name> <op:operator pos:line="46" pos:column="35">==</op:operator> <name><name pos:line="46" pos:column="38">TileShape</name><op:operator pos:line="46" pos:column="47">.</op:operator><name pos:line="46" pos:column="48">Rectangle</name></name></expr>)</condition><then pos:line="46" pos:column="58">
				<return pos:line="47" pos:column="33">return <expr><op:operator pos:line="47" pos:column="40">new</op:operator> <call><name pos:line="47" pos:column="44">CPos</name><argument_list pos:line="47" pos:column="48">(<argument><expr><name pos:line="47" pos:column="49">U</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="52">V</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

			<comment type="line" pos:line="49" pos:column="25">// Convert from rectangular map position to diamond cell position</comment>
			<comment type="line" pos:line="50" pos:column="25">//  - The staggered rows make this fiddly (hint: draw a diagram!)</comment>
			<comment type="line" pos:line="51" pos:column="25">// (a) Consider the relationships:</comment>
			<comment type="line" pos:line="52" pos:column="25">//  - +1u (even -&gt; odd) adds (1, -1) to (x, y)</comment>
			<comment type="line" pos:line="53" pos:column="25">//  - +1v (even -&gt; odd) adds (1, 0) to (x, y)</comment>
			<comment type="line" pos:line="54" pos:column="25">//  - +1v (odd -&gt; even) adds (0, 1) to (x, y)</comment>
			<comment type="line" pos:line="55" pos:column="25">// (b) Therefore:</comment>
			<comment type="line" pos:line="56" pos:column="25">//  - au + 2bv adds (a + b) to (x, y)</comment>
			<comment type="line" pos:line="57" pos:column="25">//  - a correction factor is added if v is odd</comment>
			<decl_stmt><decl><type><name pos:line="58" pos:column="25">var</name></type> <name pos:line="58" pos:column="29">offset</name> <init pos:line="58" pos:column="36">= <expr><op:operator pos:line="58" pos:column="38">(</op:operator><name pos:line="58" pos:column="39">V</name> <op:operator pos:line="58" pos:column="41">&amp;</op:operator> <lit:literal type="number" pos:line="58" pos:column="43">1</lit:literal><op:operator pos:line="58" pos:column="44">)</op:operator> <op:operator pos:line="58" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="58" pos:column="49">1</lit:literal> <op:operator pos:line="58" pos:column="51">?</op:operator> <lit:literal type="number" pos:line="58" pos:column="53">1</lit:literal> <op:operator pos:line="58" pos:column="55">:</op:operator> <lit:literal type="number" pos:line="58" pos:column="57">0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="59" pos:column="25">var</name></type> <name pos:line="59" pos:column="29">y</name> <init pos:line="59" pos:column="31">= <expr><op:operator pos:line="59" pos:column="33">(</op:operator><name pos:line="59" pos:column="34">V</name> <op:operator pos:line="59" pos:column="36">-</op:operator> <name pos:line="59" pos:column="38">offset</name><op:operator pos:line="59" pos:column="44">)</op:operator> <op:operator pos:line="59" pos:column="46">/</op:operator> <lit:literal type="number" pos:line="59" pos:column="48">2</lit:literal> <op:operator pos:line="59" pos:column="50">-</op:operator> <name pos:line="59" pos:column="52">U</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="60" pos:column="25">var</name></type> <name pos:line="60" pos:column="29">x</name> <init pos:line="60" pos:column="31">= <expr><name pos:line="60" pos:column="33">V</name> <op:operator pos:line="60" pos:column="35">-</op:operator> <name pos:line="60" pos:column="37">y</name></expr></init></decl>;</decl_stmt>
			<return pos:line="61" pos:column="25">return <expr><op:operator pos:line="61" pos:column="32">new</op:operator> <call><name pos:line="61" pos:column="36">CPos</name><argument_list pos:line="61" pos:column="40">(<argument><expr><name pos:line="61" pos:column="41">x</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="44">y</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>
	}</block></struct>

	<comment type="line" pos:line="65" pos:column="9">/// &lt;summary&gt;</comment>
	<comment type="line" pos:line="66" pos:column="9">/// Projected map position</comment>
	<comment type="line" pos:line="67" pos:column="9">/// &lt;/summary&gt;</comment>
	<struct><specifier pos:line="68" pos:column="9">public</specifier> struct <name pos:line="68" pos:column="23">PPos</name> <super pos:line="68" pos:column="28">: <name><name pos:line="68" pos:column="30">IEquatable</name><argument_list pos:line="68" pos:column="40">&lt;<argument><name pos:line="68" pos:column="41">PPos</name></argument>&gt;</argument_list></name></super>
	<block pos:line="69" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="70" pos:column="17">public</specifier> <specifier pos:line="70" pos:column="24">readonly</specifier> <name pos:line="70" pos:column="33">int</name></type> <name pos:line="70" pos:column="37">U</name></decl><op:operator pos:line="70" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="70" pos:column="40">V</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="72" pos:column="17">public</specifier> <name pos:line="72" pos:column="24">PPos</name><parameter_list pos:line="72" pos:column="28">(<param><decl><type><name pos:line="72" pos:column="29">int</name></type> <name pos:line="72" pos:column="33">u</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="36">int</name></type> <name pos:line="72" pos:column="40">v</name></decl></param>)</parameter_list> <block pos:line="72" pos:column="43">{ <expr_stmt><expr><name pos:line="72" pos:column="45">U</name> <op:operator pos:line="72" pos:column="47">=</op:operator> <name pos:line="72" pos:column="49">u</name></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="72" pos:column="52">V</name> <op:operator pos:line="72" pos:column="54">=</op:operator> <name pos:line="72" pos:column="56">v</name></expr>;</expr_stmt> }</block></constructor>
		<decl_stmt><decl><type><specifier pos:line="73" pos:column="17">public</specifier> <specifier pos:line="73" pos:column="24">static</specifier> <specifier pos:line="73" pos:column="31">readonly</specifier> <name pos:line="73" pos:column="40">PPos</name></type> <name pos:line="73" pos:column="45">Zero</name> <init pos:line="73" pos:column="50">= <expr><op:operator pos:line="73" pos:column="52">new</op:operator> <call><name pos:line="73" pos:column="56">PPos</name><argument_list pos:line="73" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="73" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="73" pos:column="64">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="75" pos:column="17">public</specifier> <specifier pos:line="75" pos:column="24">static</specifier> <name pos:line="75" pos:column="31">bool</name></type> <name pos:line="75" pos:column="36">operator ==</name><parameter_list pos:line="75" pos:column="47">(<param><decl><type><name pos:line="75" pos:column="48">PPos</name></type> <name pos:line="75" pos:column="53">me</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="57">PPos</name></type> <name pos:line="75" pos:column="62">other</name></decl></param>)</parameter_list> <block pos:line="75" pos:column="69">{ <return pos:line="75" pos:column="71">return <expr><name><name pos:line="75" pos:column="78">me</name><op:operator pos:line="75" pos:column="80">.</op:operator><name pos:line="75" pos:column="81">U</name></name> <op:operator pos:line="75" pos:column="83">==</op:operator> <name><name pos:line="75" pos:column="86">other</name><op:operator pos:line="75" pos:column="91">.</op:operator><name pos:line="75" pos:column="92">U</name> <type:modifier pos:line="75" pos:column="94">&amp;&amp;</type:modifier></name> <name><name pos:line="75" pos:column="97">me</name><op:operator pos:line="75" pos:column="99">.</op:operator><name pos:line="75" pos:column="100">V</name></name> <op:operator pos:line="75" pos:column="102">==</op:operator> <name><name pos:line="75" pos:column="105">other</name><op:operator pos:line="75" pos:column="110">.</op:operator><name pos:line="75" pos:column="111">V</name></name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="76" pos:column="17">public</specifier> <specifier pos:line="76" pos:column="24">static</specifier> <name pos:line="76" pos:column="31">bool</name></type> <name pos:line="76" pos:column="36">operator !=</name><parameter_list pos:line="76" pos:column="47">(<param><decl><type><name pos:line="76" pos:column="48">PPos</name></type> <name pos:line="76" pos:column="53">me</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="57">PPos</name></type> <name pos:line="76" pos:column="62">other</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="69">{ <return pos:line="76" pos:column="71">return <expr><op:operator pos:line="76" pos:column="78">!</op:operator><op:operator pos:line="76" pos:column="79">(</op:operator><name pos:line="76" pos:column="80">me</name> <op:operator pos:line="76" pos:column="83">==</op:operator> <name pos:line="76" pos:column="86">other</name><op:operator pos:line="76" pos:column="91">)</op:operator></expr>;</return> }</block></function>

		<function><type><specifier pos:line="78" pos:column="17">public</specifier> <specifier pos:line="78" pos:column="24">static</specifier> <specifier pos:line="78" pos:column="31">explicit</specifier></type> <name pos:line="78" pos:column="40">operator MPos</name><parameter_list pos:line="78" pos:column="53">(<param><decl><type><name pos:line="78" pos:column="54">PPos</name></type> <name pos:line="78" pos:column="59">puv</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="64">{ <return pos:line="78" pos:column="66">return <expr><op:operator pos:line="78" pos:column="73">new</op:operator> <call><name pos:line="78" pos:column="77">MPos</name><argument_list pos:line="78" pos:column="81">(<argument><expr><name><name pos:line="78" pos:column="82">puv</name><op:operator pos:line="78" pos:column="85">.</op:operator><name pos:line="78" pos:column="86">U</name></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="89">puv</name><op:operator pos:line="78" pos:column="92">.</op:operator><name pos:line="78" pos:column="93">V</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="79" pos:column="17">public</specifier> <specifier pos:line="79" pos:column="24">static</specifier> <specifier pos:line="79" pos:column="31">explicit</specifier></type> <name pos:line="79" pos:column="40">operator PPos</name><parameter_list pos:line="79" pos:column="53">(<param><decl><type><name pos:line="79" pos:column="54">MPos</name></type> <name pos:line="79" pos:column="59">uv</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="63">{ <return pos:line="79" pos:column="65">return <expr><op:operator pos:line="79" pos:column="72">new</op:operator> <call><name pos:line="79" pos:column="76">PPos</name><argument_list pos:line="79" pos:column="80">(<argument><expr><name><name pos:line="79" pos:column="81">uv</name><op:operator pos:line="79" pos:column="83">.</op:operator><name pos:line="79" pos:column="84">U</name></name></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="87">uv</name><op:operator pos:line="79" pos:column="89">.</op:operator><name pos:line="79" pos:column="90">V</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="81" pos:column="17">public</specifier> <name pos:line="81" pos:column="24">PPos</name></type> <name pos:line="81" pos:column="29">Clamp</name><parameter_list pos:line="81" pos:column="34">(<param><decl><type><name pos:line="81" pos:column="35">Rectangle</name></type> <name pos:line="81" pos:column="45">r</name></decl></param>)</parameter_list>
		<block pos:line="82" pos:column="17">{
			<return pos:line="83" pos:column="25">return <expr><op:operator pos:line="83" pos:column="32">new</op:operator> <call><name pos:line="83" pos:column="36">PPos</name><argument_list pos:line="83" pos:column="40">(<argument><expr><call><name><name pos:line="83" pos:column="41">Math</name><op:operator pos:line="83" pos:column="45">.</op:operator><name pos:line="83" pos:column="46">Min</name></name><argument_list pos:line="83" pos:column="49">(<argument><expr><name><name pos:line="83" pos:column="50">r</name><op:operator pos:line="83" pos:column="51">.</op:operator><name pos:line="83" pos:column="52">Right</name></name></expr></argument>, <argument><expr><call><name><name pos:line="83" pos:column="59">Math</name><op:operator pos:line="83" pos:column="63">.</op:operator><name pos:line="83" pos:column="64">Max</name></name><argument_list pos:line="83" pos:column="67">(<argument><expr><name pos:line="83" pos:column="68">U</name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="71">r</name><op:operator pos:line="83" pos:column="72">.</op:operator><name pos:line="83" pos:column="73">Left</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><call><name><name pos:line="84" pos:column="33">Math</name><op:operator pos:line="84" pos:column="37">.</op:operator><name pos:line="84" pos:column="38">Min</name></name><argument_list pos:line="84" pos:column="41">(<argument><expr><name><name pos:line="84" pos:column="42">r</name><op:operator pos:line="84" pos:column="43">.</op:operator><name pos:line="84" pos:column="44">Bottom</name></name></expr></argument>, <argument><expr><call><name><name pos:line="84" pos:column="52">Math</name><op:operator pos:line="84" pos:column="56">.</op:operator><name pos:line="84" pos:column="57">Max</name></name><argument_list pos:line="84" pos:column="60">(<argument><expr><name pos:line="84" pos:column="61">V</name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="64">r</name><op:operator pos:line="84" pos:column="65">.</op:operator><name pos:line="84" pos:column="66">Top</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="87" pos:column="17">public</specifier> <specifier pos:line="87" pos:column="24">override</specifier> <name pos:line="87" pos:column="33">int</name></type> <name pos:line="87" pos:column="37">GetHashCode</name><parameter_list pos:line="87" pos:column="48">()</parameter_list> <block pos:line="87" pos:column="51">{ <return pos:line="87" pos:column="53">return <expr><call><name><name pos:line="87" pos:column="60">U</name><op:operator pos:line="87" pos:column="61">.</op:operator><name pos:line="87" pos:column="62">GetHashCode</name></name><argument_list pos:line="87" pos:column="73">()</argument_list></call> <op:operator pos:line="87" pos:column="76">^</op:operator> <call><name><name pos:line="87" pos:column="78">V</name><op:operator pos:line="87" pos:column="79">.</op:operator><name pos:line="87" pos:column="80">GetHashCode</name></name><argument_list pos:line="87" pos:column="91">()</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="89" pos:column="17">public</specifier> <name pos:line="89" pos:column="24">bool</name></type> <name pos:line="89" pos:column="29">Equals</name><parameter_list pos:line="89" pos:column="35">(<param><decl><type><name pos:line="89" pos:column="36">PPos</name></type> <name pos:line="89" pos:column="41">other</name></decl></param>)</parameter_list> <block pos:line="89" pos:column="48">{ <return pos:line="89" pos:column="50">return <expr><name pos:line="89" pos:column="57">other</name> <op:operator pos:line="89" pos:column="63">==</op:operator> <name pos:line="89" pos:column="66">this</name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="90" pos:column="17">public</specifier> <specifier pos:line="90" pos:column="24">override</specifier> <name pos:line="90" pos:column="33">bool</name></type> <name pos:line="90" pos:column="38">Equals</name><parameter_list pos:line="90" pos:column="44">(<param><decl><type><name pos:line="90" pos:column="45">object</name></type> <name pos:line="90" pos:column="52">obj</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="57">{ <return pos:line="90" pos:column="59">return <expr><name pos:line="90" pos:column="66">obj</name> <op:operator pos:line="90" pos:column="70">is</op:operator> <name pos:line="90" pos:column="73">PPos</name> <op:operator pos:line="90" pos:column="78">&amp;&amp;</op:operator> <call><name pos:line="90" pos:column="81">Equals</name><argument_list pos:line="90" pos:column="87">(<argument><expr><op:operator pos:line="90" pos:column="88">(</op:operator><name pos:line="90" pos:column="89">PPos</name><op:operator pos:line="90" pos:column="93">)</op:operator><name pos:line="90" pos:column="94">obj</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="92" pos:column="17">public</specifier> <specifier pos:line="92" pos:column="24">override</specifier> <name pos:line="92" pos:column="33">string</name></type> <name pos:line="92" pos:column="40">ToString</name><parameter_list pos:line="92" pos:column="48">()</parameter_list> <block pos:line="92" pos:column="51">{ <return pos:line="92" pos:column="53">return <expr><name pos:line="92" pos:column="60">U</name> <op:operator pos:line="92" pos:column="62">+</op:operator> <lit:literal type="string" pos:line="92" pos:column="64">","</lit:literal> <op:operator pos:line="92" pos:column="68">+</op:operator> <name pos:line="92" pos:column="70">V</name></expr>;</return> }</block></function>
	}</block></struct>
}</block></namespace></unit>
