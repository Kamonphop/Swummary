<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\Sample Methods\sampleMethods.cpp" pos:tabs="8"><cpp:include pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">include</cpp:directive> <cpp:file pos:line="1" pos:column="10">&lt;iostream&gt;</cpp:file></cpp:include>

<function><type><name pos:line="3" pos:column="1">int</name></type> <name pos:line="3" pos:column="5">main</name><parameter_list pos:line="3" pos:column="9">()</parameter_list> <block pos:line="3" pos:column="12">{ <return pos:line="3" pos:column="14">return <expr><lit:literal type="number" pos:line="3" pos:column="21">0</lit:literal></expr>;</return> }</block></function>

<comment type="block" format="doxygen" pos:line="5" pos:column="1">/**
 * John:	findInOne, setFindInFilesDirFilter
 * Keith:	findInOne, gethurrry, findFilesInOut
 * Dylan: 	return true
*/</comment>
<function><type><name pos:line="10" pos:column="1">bool</name></type> <name pos:line="10" pos:column="6">findInFiles</name><parameter_list pos:line="10" pos:column="17">()</parameter_list>
<block pos:line="11" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="12" pos:column="9">const</specifier> <name pos:line="12" pos:column="15">TCHAR</name> <type:modifier pos:line="12" pos:column="21">*</type:modifier></type><name pos:line="12" pos:column="22">dir2Search</name> <init pos:line="12" pos:column="33">= <expr><call><name><name pos:line="12" pos:column="35">_findReplaceDlg</name><op:operator pos:line="12" pos:column="50">.</op:operator><name pos:line="12" pos:column="51">getDir2Search</name></name><argument_list pos:line="12" pos:column="64">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="14" pos:column="9">findFilesInOut</name><argument_list pos:line="14" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><op:operator pos:line="15" pos:column="13">!</op:operator><name><name pos:line="15" pos:column="14">dir2Search</name><index pos:line="15" pos:column="24">[<expr><lit:literal type="number" pos:line="15" pos:column="25">0</lit:literal></expr>]</index></name> <op:operator pos:line="15" pos:column="28">||</op:operator> <op:operator pos:line="15" pos:column="31">!</op:operator><call><name><op:operator pos:line="15" pos:column="32">::</op:operator><name pos:line="15" pos:column="34">PathFileExists</name></name><argument_list pos:line="15" pos:column="48">(<argument><expr><name pos:line="15" pos:column="49">dir2Search</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="15" pos:column="61">
	<block pos:line="16" pos:column="9">{
		<return pos:line="17" pos:column="17">return <expr><lit:literal type="boolean" pos:line="17" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="19" pos:column="9">string</name></type> <name pos:line="19" pos:column="16">findString</name> <init pos:line="19" pos:column="27">= <expr><lit:literal type="string" pos:line="19" pos:column="29">""</lit:literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="21" pos:column="9">gethurry</name><argument_list pos:line="21" pos:column="17">()</argument_list></call></expr>;</expr_stmt>
	
	<macro><name pos:line="23" pos:column="9">findInOne</name><argument_list pos:line="23" pos:column="18">(<argument pos:line="23" pos:column="19">int a</argument>, <argument pos:line="23" pos:column="26">findString</argument>)</argument_list></macro><empty_stmt pos:line="23" pos:column="37">;</empty_stmt>

	<decl_stmt><decl><type><name pos:line="25" pos:column="9">bool</name></type> <name pos:line="25" pos:column="14">isRecursive</name> <init pos:line="25" pos:column="26">= <expr><call><name><name pos:line="25" pos:column="28">_findReplaceDlg</name><op:operator pos:line="25" pos:column="43">.</op:operator><name pos:line="25" pos:column="44">isRecursive</name></name><argument_list pos:line="25" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="26" pos:column="9">bool</name></type> <name pos:line="26" pos:column="14">isInHiddenDir</name> <init pos:line="26" pos:column="28">= <expr><call><name><name pos:line="26" pos:column="30">_findReplaceDlg</name><op:operator pos:line="26" pos:column="45">.</op:operator><name pos:line="26" pos:column="46">isInHiddenDir</name></name><argument_list pos:line="26" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name><name pos:line="28" pos:column="13">a</name><op:operator pos:line="28" pos:column="14">.</op:operator><name pos:line="28" pos:column="15">size</name></name><argument_list pos:line="28" pos:column="19">()</argument_list></call> <op:operator pos:line="28" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="28" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="28" pos:column="27">
	<block pos:line="29" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="30" pos:column="17">a</name><op:operator pos:line="30" pos:column="18">.</op:operator><name pos:line="30" pos:column="19">setFindInFilesDirFilter</name></name><argument_list pos:line="30" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="43">"dddd"</lit:literal></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="51">TEXT</name><argument_list pos:line="30" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="56">"*.*"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="31" pos:column="17">a</name><op:operator pos:line="31" pos:column="18">.</op:operator><name pos:line="31" pos:column="19">getPatterns</name></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">findString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<return pos:line="34" pos:column="9">return <expr><lit:literal type="boolean" pos:line="34" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>



<comment type="block" format="doxygen" pos:line="39" pos:column="1">/**
 * John		FindAndBreakTwoVerbs
 * Keith	NoVerbreak, voidReturn
 * Dylan	lastRealLine = True;
 */</comment>
 <function><type><name pos:line="44" pos:column="2">void</name></type> <name pos:line="44" pos:column="7">breakEverything</name><parameter_list pos:line="44" pos:column="22">(<param><decl><type><name pos:line="44" pos:column="23">string</name></type> <name pos:line="44" pos:column="30">foo</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="35">int</name></type> <name pos:line="44" pos:column="39">bar</name></decl></param>)</parameter_list><block pos:line="44" pos:column="43">{
	
	
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">string</name></type> <name pos:line="47" pos:column="16">foob</name> <init pos:line="47" pos:column="21">= <expr><call><name pos:line="47" pos:column="23">FindAndBreakTwoVerbs</name><argument_list pos:line="47" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="44">"blahblahbreak"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="49" pos:column="9">int</name></type> <name pos:line="49" pos:column="13">breakDont</name> <init pos:line="49" pos:column="23">= <expr><lit:literal type="number" pos:line="49" pos:column="25">3892</lit:literal></expr></init></decl>;</decl_stmt>
	
	
	
	<expr_stmt><expr><call><name pos:line="53" pos:column="9">NoVerbreak</name><argument_list pos:line="53" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">voidReturn</name><argument_list pos:line="55" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="55" pos:column="20">"EqualsSign = true"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="55" pos:column="41">890</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	 <for pos:line="57" pos:column="10">for (<init><decl><type><name pos:line="57" pos:column="15">x</name> <name pos:line="57" pos:column="17">in</name></type> <name pos:line="57" pos:column="20">foo</name></decl></init>)<block pos:line="57" pos:column="24">{
		 <if pos:line="58" pos:column="18">if <condition pos:line="58" pos:column="21">(<expr><name pos:line="58" pos:column="22">True</name></expr>)</condition><then><block pos:line="58" pos:column="27">{
			 <return pos:line="59" pos:column="26">return <expr><name pos:line="59" pos:column="33">False</name>
			 <name pos:line="60" pos:column="26">lastRealLine</name> <op:operator pos:line="60" pos:column="39">=</op:operator> <name pos:line="60" pos:column="41">True</name></expr>;</return>
		 }</block></then></if>
	 }</block></for>
 }</block></function>
 
 
 <comment type="block" format="doxygen" pos:line="66" pos:column="2">/**
 * John		getOtherInt
 * Keith	intBet
 * Dylan	int gg = getOtherInt(839201);
 */</comment>
 <function><type><name pos:line="71" pos:column="2">void</name></type> <name pos:line="71" pos:column="7">GetInt</name><parameter_list pos:line="71" pos:column="13">(<param><decl><type><name pos:line="71" pos:column="14">int</name></type> <name pos:line="71" pos:column="18">inted</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="25">int</name></type> <name pos:line="71" pos:column="29">on</name></decl></param>)</parameter_list><block pos:line="71" pos:column="32">{
	 <expr_stmt><expr><call><name pos:line="72" pos:column="10">intBet</name><argument_list pos:line="72" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
	 <decl_stmt><decl><type><name pos:line="73" pos:column="10">int</name></type> <name pos:line="73" pos:column="14">gg</name> <init pos:line="73" pos:column="17">= <expr><call><name pos:line="73" pos:column="19">getOtherInt</name><argument_list pos:line="73" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="73" pos:column="31">839201</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	 
}</block></function>

 <comment type="block" format="doxygen" pos:line="77" pos:column="2">/** 
 * John		moveDirectory
 * Keith	moveDirectory
 * Dylan	moveDirectory(blah));
 */</comment>
 <function><type><name pos:line="82" pos:column="2">void</name></type> <name pos:line="82" pos:column="7">moveFiles</name><parameter_list pos:line="82" pos:column="16">(<param><decl><type><name pos:line="82" pos:column="17">string</name></type> <name pos:line="82" pos:column="24">blah</name></decl></param>)</parameter_list><block pos:line="82" pos:column="29">{
	 <expr_stmt><expr><call><name pos:line="83" pos:column="10">moveDirectory</name><argument_list pos:line="83" pos:column="23">(<argument><expr><name pos:line="83" pos:column="24">blah</name></expr></argument>)</argument_list></call></expr></expr_stmt>)</block>;</function>
 }
 

 <comment type="block" format="doxygen" pos:line="87" pos:column="2">/** 
 * John		jumpString
 * Keith	
 * Dylan	bool foo = jumpString(bar);
 */</comment>
int <macro><name pos:line="92" pos:column="5">jumpInt</name><argument_list pos:line="92" pos:column="12">(<argument pos:line="92" pos:column="13">int bar</argument>)</argument_list></macro><block pos:line="92" pos:column="21">{
	<decl_stmt><decl><type><name pos:line="93" pos:column="9">bool</name></type> <name pos:line="93" pos:column="14">foo</name> <init pos:line="93" pos:column="18">= <expr><call><name pos:line="93" pos:column="20">jumpString</name><argument_list pos:line="93" pos:column="30">(<argument><expr><name pos:line="93" pos:column="31">bar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

}</block>

 <comment type="block" format="doxygen" pos:line="97" pos:column="2">/** 
 * John		
 * Keith	
 * Dylan	return True;
 */</comment>
<function><type><name pos:line="102" pos:column="1">int</name></type> <name pos:line="102" pos:column="5">getTrue</name><parameter_list pos:line="102" pos:column="12">()</parameter_list><block pos:line="102" pos:column="14">{
	<return pos:line="103" pos:column="9">return <expr><lit:literal type="boolean" pos:line="103" pos:column="16">true</lit:literal></expr>;</return>
}</block></function></unit>
