<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\FieldLoader.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Drawing</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Drawing</name><op:operator pos:line="15" pos:column="21">.</op:operator><name pos:line="15" pos:column="22">Imaging</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Globalization</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Reflection</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">System</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Text</name><op:operator pos:line="19" pos:column="18">.</op:operator><name pos:line="19" pos:column="19">RegularExpressions</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">OpenRA</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Graphics</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">OpenRA</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Primitives</name></name>;</using>

<namespace pos:line="23" pos:column="1">namespace <name pos:line="23" pos:column="11">OpenRA</name>
<block pos:line="24" pos:column="1">{
	<class><specifier pos:line="25" pos:column="9">public</specifier> <specifier pos:line="25" pos:column="16">static</specifier> class <name pos:line="25" pos:column="29">FieldLoader</name>
	<block pos:line="26" pos:column="9">{
		<class><specifier pos:line="27" pos:column="17">public</specifier> class <name pos:line="27" pos:column="30">MissingFieldsException</name> <super pos:line="27" pos:column="53">: <name pos:line="27" pos:column="55">YamlException</name></super>
		<block pos:line="28" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="29" pos:column="25">public</specifier> <specifier pos:line="29" pos:column="32">readonly</specifier> <name pos:line="29" pos:column="41">string</name><index pos:line="29" pos:column="47">[]</index></type> <name pos:line="29" pos:column="50">Missing</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="30" pos:column="25">public</specifier> <specifier pos:line="30" pos:column="32">readonly</specifier> <name pos:line="30" pos:column="41">string</name></type> <name pos:line="30" pos:column="48">Header</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="31" pos:column="25">public</specifier> <specifier pos:line="31" pos:column="32">override</specifier> <name pos:line="31" pos:column="41">string</name></type> <name pos:line="31" pos:column="48">Message</name>
			<block pos:line="32" pos:column="25">{
				<function><name pos:line="33" pos:column="33">get</name>
				<block pos:line="34" pos:column="33">{
					<return pos:line="35" pos:column="41">return <expr><op:operator pos:line="35" pos:column="48">(</op:operator><call><name><name pos:line="35" pos:column="49">string</name><op:operator pos:line="35" pos:column="55">.</op:operator><name pos:line="35" pos:column="56">IsNullOrEmpty</name></name><argument_list pos:line="35" pos:column="69">(<argument><expr><name pos:line="35" pos:column="70">Header</name></expr></argument>)</argument_list></call> <op:operator pos:line="35" pos:column="78">?</op:operator> <lit:literal type="string" pos:line="35" pos:column="80">""</lit:literal> <op:operator pos:line="35" pos:column="83">:</op:operator> <name pos:line="35" pos:column="85">Header</name> <op:operator pos:line="35" pos:column="92">+</op:operator> <lit:literal type="string" pos:line="35" pos:column="94">": "</lit:literal><op:operator pos:line="35" pos:column="98">)</op:operator> <op:operator pos:line="35" pos:column="100">+</op:operator> <name><name pos:line="35" pos:column="102">Missing</name><index pos:line="35" pos:column="109">[<expr><lit:literal type="number" pos:line="35" pos:column="110">0</lit:literal></expr>]</index></name>
						<op:operator pos:line="36" pos:column="49">+</op:operator> <call><name><name pos:line="36" pos:column="51">string</name><op:operator pos:line="36" pos:column="57">.</op:operator><name pos:line="36" pos:column="58">Concat</name></name><argument_list pos:line="36" pos:column="64">(<argument><expr><call><name><name pos:line="36" pos:column="65">Missing</name><op:operator pos:line="36" pos:column="72">.</op:operator><name pos:line="36" pos:column="73">Skip</name></name><argument_list pos:line="36" pos:column="77">(<argument><expr><lit:literal type="number" pos:line="36" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="80">.</op:operator><call><name pos:line="36" pos:column="81">Select</name><argument_list pos:line="36" pos:column="87">(<argument><expr><lambda><name pos:line="36" pos:column="88">m</name> <op:operator pos:line="36" pos:column="90">=&gt;</op:operator> <lit:literal type="string" pos:line="36" pos:column="93">", "</lit:literal> <op:operator pos:line="36" pos:column="98">+</op:operator> <name pos:line="36" pos:column="100">m</name></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
				}</block></function>
			}</block></decl></decl_stmt>

			<constructor><specifier pos:line="40" pos:column="25">public</specifier> <name pos:line="40" pos:column="32">MissingFieldsException</name><parameter_list pos:line="40" pos:column="54">(<param><decl><type><name><name pos:line="40" pos:column="55">string</name><index pos:line="40" pos:column="61">[]</index></name></type> <name pos:line="40" pos:column="64">missing</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="73">string</name></type> <name pos:line="40" pos:column="80">header</name> <init pos:line="40" pos:column="87">= <expr><name pos:line="40" pos:column="89">null</name></expr></init></decl></param>, <name pos:line="40" pos:column="95">string</name> <name pos:line="40" pos:column="102">headerSingle</name> <op:operator pos:line="40" pos:column="115">=</op:operator> <name pos:line="40" pos:column="117">null</name>)</parameter_list> <member_list pos:line="40" pos:column="123">: <call><name pos:line="40" pos:column="125">base</name><argument_list pos:line="40" pos:column="129">(<argument><expr><name pos:line="40" pos:column="130">null</name></expr></argument>)</argument_list></call>
			</member_list><block pos:line="41" pos:column="25">{
				<expr_stmt><expr><name pos:line="42" pos:column="33">Header</name> <op:operator pos:line="42" pos:column="40">=</op:operator> <name><name pos:line="42" pos:column="42">missing</name><op:operator pos:line="42" pos:column="49">.</op:operator><name pos:line="42" pos:column="50">Length</name></name> <op:operator pos:line="42" pos:column="57">&gt;</op:operator> <lit:literal type="number" pos:line="42" pos:column="59">1</lit:literal> <op:operator pos:line="42" pos:column="61">?</op:operator> <name pos:line="42" pos:column="63">header</name> <op:operator pos:line="42" pos:column="70">:</op:operator> <name pos:line="42" pos:column="72">headerSingle</name> <op:operator pos:line="42" pos:column="85">??</op:operator> <name pos:line="42" pos:column="88">header</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="43" pos:column="33">Missing</name> <op:operator pos:line="43" pos:column="41">=</op:operator> <name pos:line="43" pos:column="43">missing</name></expr>;</expr_stmt>
			}</block></constructor>
		}</block></class>

		<decl_stmt><decl><type><specifier pos:line="47" pos:column="17">public</specifier> <specifier pos:line="47" pos:column="24">static</specifier> <name><name pos:line="47" pos:column="31">Func</name><argument_list pos:line="47" pos:column="35">&lt;<argument><name pos:line="47" pos:column="36">string</name></argument>, <argument><name pos:line="47" pos:column="44">Type</name></argument>, <argument><name pos:line="47" pos:column="50">string</name></argument>, <argument><name pos:line="47" pos:column="58">object</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="66">InvalidValueAction</name> <init pos:line="47" pos:column="85">= <expr><lambda><parameter_list pos:line="47" pos:column="87">(<param><decl><name pos:line="47" pos:column="88">s</name></decl></param>, <param><decl><name pos:line="47" pos:column="91">t</name></decl></param>, <param><decl><name pos:line="47" pos:column="94">f</name></decl></param>)</parameter_list> <op:operator pos:line="47" pos:column="97">=&gt;</op:operator>
		<block pos:line="48" pos:column="17">{
			<throw pos:line="49" pos:column="25">throw <expr><op:operator pos:line="49" pos:column="31">new</op:operator> <call><name pos:line="49" pos:column="35">InvalidOperationException</name><argument_list pos:line="49" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="61">"FieldLoader: Cannot parse `{0}` into `{1}.{2}` "</lit:literal><op:operator pos:line="49" pos:column="110">.</op:operator><call><name pos:line="49" pos:column="111">F</name><argument_list pos:line="49" pos:column="112">(<argument><expr><name pos:line="49" pos:column="113">s</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="116">f</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="119">t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></lambda></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="52" pos:column="17">public</specifier> <specifier pos:line="52" pos:column="24">static</specifier> <name><name pos:line="52" pos:column="31">Action</name><argument_list pos:line="52" pos:column="37">&lt;<argument><name pos:line="52" pos:column="38">string</name></argument>, <argument><name pos:line="52" pos:column="46">Type</name></argument>&gt;</argument_list></name></type> <name pos:line="52" pos:column="52">UnknownFieldAction</name> <init pos:line="52" pos:column="71">= <expr><lambda><parameter_list pos:line="52" pos:column="73">(<param><decl><name pos:line="52" pos:column="74">s</name></decl></param>, <param><decl><name pos:line="52" pos:column="77">f</name></decl></param>)</parameter_list> <op:operator pos:line="52" pos:column="80">=&gt;</op:operator>
		<block pos:line="53" pos:column="17">{
			<throw pos:line="54" pos:column="25">throw <expr><op:operator pos:line="54" pos:column="31">new</op:operator> <call><name pos:line="54" pos:column="35">NotImplementedException</name><argument_list pos:line="54" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="59">"FieldLoader: Missing field `{0}` on `{1}`"</lit:literal><op:operator pos:line="54" pos:column="102">.</op:operator><call><name pos:line="54" pos:column="103">F</name><argument_list pos:line="54" pos:column="104">(<argument><expr><name pos:line="54" pos:column="105">s</name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="108">f</name><op:operator pos:line="54" pos:column="109">.</op:operator><name pos:line="54" pos:column="110">Name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></lambda></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="57" pos:column="17">static</specifier> <specifier pos:line="57" pos:column="24">readonly</specifier> <name><name pos:line="57" pos:column="33">ConcurrentCache</name><argument_list pos:line="57" pos:column="48">&lt;<argument><name pos:line="57" pos:column="49">Type</name></argument>, <argument><name pos:line="57" pos:column="55">FieldLoadInfo</name><index pos:line="57" pos:column="68">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="57" pos:column="72">TypeLoadInfo</name> <init pos:line="57" pos:column="85">=
			<expr><op:operator pos:line="58" pos:column="25">new</op:operator> <call><name><name pos:line="58" pos:column="29">ConcurrentCache</name><argument_list pos:line="58" pos:column="44">&lt;<argument><name pos:line="58" pos:column="45">Type</name></argument>, <argument><name><name pos:line="58" pos:column="51">FieldLoadInfo</name><index pos:line="58" pos:column="64">[]</index></name></argument>&gt;</argument_list></name><argument_list pos:line="58" pos:column="67">(<argument><expr><name pos:line="58" pos:column="68">BuildTypeLoadInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="59" pos:column="17">static</specifier> <specifier pos:line="59" pos:column="24">readonly</specifier> <name><name pos:line="59" pos:column="33">ConcurrentCache</name><argument_list pos:line="59" pos:column="48">&lt;<argument><name pos:line="59" pos:column="49">MemberInfo</name></argument>, <argument><name pos:line="59" pos:column="61">bool</name></argument>&gt;</argument_list></name></type> <name pos:line="59" pos:column="67">MemberHasTranslateAttribute</name> <init pos:line="59" pos:column="95">=
			<expr><op:operator pos:line="60" pos:column="25">new</op:operator> <call><name><name pos:line="60" pos:column="29">ConcurrentCache</name><argument_list pos:line="60" pos:column="44">&lt;<argument><name pos:line="60" pos:column="45">MemberInfo</name></argument>, <argument><name pos:line="60" pos:column="57">bool</name></argument>&gt;</argument_list></name><argument_list pos:line="60" pos:column="62">(<argument><expr><lambda><name pos:line="60" pos:column="63">member</name> <op:operator pos:line="60" pos:column="70">=&gt;</op:operator> <call><name><name pos:line="60" pos:column="73">member</name><op:operator pos:line="60" pos:column="79">.</op:operator><name><name pos:line="60" pos:column="80">HasAttribute</name><argument_list pos:line="60" pos:column="92">&lt;<argument><name pos:line="60" pos:column="93">TranslateAttribute</name></argument>&gt;</argument_list></name></name><argument_list pos:line="60" pos:column="112">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="62" pos:column="17">static</specifier> <specifier pos:line="62" pos:column="24">readonly</specifier> <name pos:line="62" pos:column="33">object</name></type> <name pos:line="62" pos:column="40">TranslationsLock</name> <init pos:line="62" pos:column="57">= <expr><op:operator pos:line="62" pos:column="59">new</op:operator> <call><name pos:line="62" pos:column="63">object</name><argument_list pos:line="62" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="63" pos:column="17">static</specifier> <name><name pos:line="63" pos:column="24">Dictionary</name><argument_list pos:line="63" pos:column="34">&lt;<argument><name pos:line="63" pos:column="35">string</name></argument>, <argument><name pos:line="63" pos:column="43">string</name></argument>&gt;</argument_list></name></type> <name pos:line="63" pos:column="51">translations</name></decl>;</decl_stmt>

		<function><type><specifier pos:line="65" pos:column="17">public</specifier> <specifier pos:line="65" pos:column="24">static</specifier> <name pos:line="65" pos:column="31">void</name></type> <name pos:line="65" pos:column="36">Load</name><parameter_list pos:line="65" pos:column="40">(<param><decl><type><name pos:line="65" pos:column="41">object</name></type> <name pos:line="65" pos:column="48">self</name></decl></param>, <param><decl><type><name pos:line="65" pos:column="54">MiniYaml</name></type> <name pos:line="65" pos:column="63">my</name></decl></param>)</parameter_list>
		<block pos:line="66" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="67" pos:column="25">var</name></type> <name pos:line="67" pos:column="29">loadInfo</name> <init pos:line="67" pos:column="38">= <expr><name><name pos:line="67" pos:column="40">TypeLoadInfo</name><index pos:line="67" pos:column="52">[<expr><call><name><name pos:line="67" pos:column="53">self</name><op:operator pos:line="67" pos:column="57">.</op:operator><name pos:line="67" pos:column="58">GetType</name></name><argument_list pos:line="67" pos:column="65">()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="68" pos:column="25">var</name></type> <name pos:line="68" pos:column="29">missing</name> <init pos:line="68" pos:column="37">= <expr><op:operator pos:line="68" pos:column="39">new</op:operator> <call><name><name pos:line="68" pos:column="43">List</name><argument_list pos:line="68" pos:column="47">&lt;<argument><name pos:line="68" pos:column="48">string</name></argument>&gt;</argument_list></name><argument_list pos:line="68" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name><name pos:line="70" pos:column="25">Dictionary</name><argument_list pos:line="70" pos:column="35">&lt;<argument><name pos:line="70" pos:column="36">string</name></argument>, <argument><name pos:line="70" pos:column="44">MiniYaml</name></argument>&gt;</argument_list></name></type> <name pos:line="70" pos:column="54">md</name> <init pos:line="70" pos:column="57">= <expr><name pos:line="70" pos:column="59">null</name></expr></init></decl>;</decl_stmt>

			<foreach pos:line="72" pos:column="25">foreach (<init><decl><type><name pos:line="72" pos:column="34">var</name></type> <name pos:line="72" pos:column="38">fli</name> <range pos:line="72" pos:column="42">in <expr><name pos:line="72" pos:column="45">loadInfo</name></expr></range></decl></init>)
			<block pos:line="73" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="74" pos:column="33">object</name></type> <name pos:line="74" pos:column="40">val</name></decl>;</decl_stmt>

				<if pos:line="76" pos:column="33">if <condition pos:line="76" pos:column="36">(<expr><name pos:line="76" pos:column="37">md</name> <op:operator pos:line="76" pos:column="40">==</op:operator> <name pos:line="76" pos:column="43">null</name></expr>)</condition><then pos:line="76" pos:column="48">
					<expr_stmt><expr><name pos:line="77" pos:column="41">md</name> <op:operator pos:line="77" pos:column="44">=</op:operator> <call><name><name pos:line="77" pos:column="46">my</name><op:operator pos:line="77" pos:column="48">.</op:operator><name pos:line="77" pos:column="49">ToDictionary</name></name><argument_list pos:line="77" pos:column="61">()</argument_list></call></expr>;</expr_stmt></then></if>
				<if pos:line="78" pos:column="33">if <condition pos:line="78" pos:column="36">(<expr><name><name pos:line="78" pos:column="37">fli</name><op:operator pos:line="78" pos:column="40">.</op:operator><name pos:line="78" pos:column="41">Loader</name></name> <op:operator pos:line="78" pos:column="48">!=</op:operator> <name pos:line="78" pos:column="51">null</name></expr>)</condition><then pos:line="78" pos:column="56">
				<block pos:line="79" pos:column="33">{
					<if pos:line="80" pos:column="41">if <condition pos:line="80" pos:column="44">(<expr><op:operator pos:line="80" pos:column="45">!</op:operator><name><name pos:line="80" pos:column="46">fli</name><op:operator pos:line="80" pos:column="49">.</op:operator><name pos:line="80" pos:column="50">Attribute</name><op:operator pos:line="80" pos:column="59">.</op:operator><name pos:line="80" pos:column="60">Required</name></name> <op:operator pos:line="80" pos:column="69">||</op:operator> <call><name><name pos:line="80" pos:column="72">md</name><op:operator pos:line="80" pos:column="74">.</op:operator><name pos:line="80" pos:column="75">ContainsKey</name></name><argument_list pos:line="80" pos:column="86">(<argument><expr><name><name pos:line="80" pos:column="87">fli</name><op:operator pos:line="80" pos:column="90">.</op:operator><name pos:line="80" pos:column="91">YamlName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="80" pos:column="101">
						<expr_stmt><expr><name pos:line="81" pos:column="49">val</name> <op:operator pos:line="81" pos:column="53">=</op:operator> <call><name><name pos:line="81" pos:column="55">fli</name><op:operator pos:line="81" pos:column="58">.</op:operator><name pos:line="81" pos:column="59">Loader</name></name><argument_list pos:line="81" pos:column="65">(<argument><expr><name pos:line="81" pos:column="66">my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="82" pos:column="41">else
					<block pos:line="83" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="84" pos:column="49">missing</name><op:operator pos:line="84" pos:column="56">.</op:operator><name pos:line="84" pos:column="57">Add</name></name><argument_list pos:line="84" pos:column="60">(<argument><expr><name><name pos:line="84" pos:column="61">fli</name><op:operator pos:line="84" pos:column="64">.</op:operator><name pos:line="84" pos:column="65">YamlName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<continue pos:line="85" pos:column="49">continue;</continue>
					}</block></else></if>
				}</block></then>
				<else pos:line="88" pos:column="33">else
				<block pos:line="89" pos:column="33">{
					<if pos:line="90" pos:column="41">if <condition pos:line="90" pos:column="44">(<expr><op:operator pos:line="90" pos:column="45">!</op:operator><call><name pos:line="90" pos:column="46">TryGetValueFromYaml</name><argument_list pos:line="90" pos:column="65">(<argument><expr><name><name pos:line="90" pos:column="66">fli</name><op:operator pos:line="90" pos:column="69">.</op:operator><name pos:line="90" pos:column="70">YamlName</name></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="80">fli</name><op:operator pos:line="90" pos:column="83">.</op:operator><name pos:line="90" pos:column="84">Field</name></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="91">md</name></expr></argument>, <argument><expr pos:line="90" pos:column="95">out <name pos:line="90" pos:column="99">val</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="90" pos:column="104">
					<block pos:line="91" pos:column="41">{
						<if pos:line="92" pos:column="49">if <condition pos:line="92" pos:column="52">(<expr><name><name pos:line="92" pos:column="53">fli</name><op:operator pos:line="92" pos:column="56">.</op:operator><name pos:line="92" pos:column="57">Attribute</name><op:operator pos:line="92" pos:column="66">.</op:operator><name pos:line="92" pos:column="67">Required</name></name></expr>)</condition><then pos:line="92" pos:column="76">
							<expr_stmt><expr><call><name><name pos:line="93" pos:column="57">missing</name><op:operator pos:line="93" pos:column="64">.</op:operator><name pos:line="93" pos:column="65">Add</name></name><argument_list pos:line="93" pos:column="68">(<argument><expr><name><name pos:line="93" pos:column="69">fli</name><op:operator pos:line="93" pos:column="72">.</op:operator><name pos:line="93" pos:column="73">YamlName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
						<continue pos:line="94" pos:column="49">continue;</continue>
					}</block></then></if>
				}</block></else></if>

				<expr_stmt><expr><call><name><name pos:line="98" pos:column="33">fli</name><op:operator pos:line="98" pos:column="36">.</op:operator><name pos:line="98" pos:column="37">Field</name><op:operator pos:line="98" pos:column="42">.</op:operator><name pos:line="98" pos:column="43">SetValue</name></name><argument_list pos:line="98" pos:column="51">(<argument><expr><name pos:line="98" pos:column="52">self</name></expr></argument>, <argument><expr><name pos:line="98" pos:column="58">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>

			<if pos:line="101" pos:column="25">if <condition pos:line="101" pos:column="28">(<expr><call><name><name pos:line="101" pos:column="29">missing</name><op:operator pos:line="101" pos:column="36">.</op:operator><name pos:line="101" pos:column="37">Any</name></name><argument_list pos:line="101" pos:column="40">()</argument_list></call></expr>)</condition><then pos:line="101" pos:column="43">
				<throw pos:line="102" pos:column="33">throw <expr><op:operator pos:line="102" pos:column="39">new</op:operator> <call><name pos:line="102" pos:column="43">MissingFieldsException</name><argument_list pos:line="102" pos:column="65">(<argument><expr><call><name><name pos:line="102" pos:column="66">missing</name><op:operator pos:line="102" pos:column="73">.</op:operator><name pos:line="102" pos:column="74">ToArray</name></name><argument_list pos:line="102" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
		}</block></function>

		<function><type><specifier pos:line="105" pos:column="17">static</specifier> <name pos:line="105" pos:column="24">bool</name></type> <name pos:line="105" pos:column="29">TryGetValueFromYaml</name><parameter_list pos:line="105" pos:column="48">(<param><decl><type><name pos:line="105" pos:column="49">string</name></type> <name pos:line="105" pos:column="56">yamlName</name></decl></param>, <param><decl><type><name pos:line="105" pos:column="66">FieldInfo</name></type> <name pos:line="105" pos:column="76">field</name></decl></param>, <param><decl><type><name><name pos:line="105" pos:column="83">Dictionary</name><argument_list pos:line="105" pos:column="93">&lt;<argument><name pos:line="105" pos:column="94">string</name></argument>, <argument><name pos:line="105" pos:column="102">MiniYaml</name></argument>&gt;</argument_list></name></type> <name pos:line="105" pos:column="112">md</name></decl></param>, <param><decl><type><specifier pos:line="105" pos:column="116">out</specifier> <name pos:line="105" pos:column="120">object</name></type> <name pos:line="105" pos:column="127">ret</name></decl></param>)</parameter_list>
		<block pos:line="106" pos:column="17">{
			<expr_stmt><expr><name pos:line="107" pos:column="25">ret</name> <op:operator pos:line="107" pos:column="29">=</op:operator> <name pos:line="107" pos:column="31">null</name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="109" pos:column="25">MiniYaml</name></type> <name pos:line="109" pos:column="34">yaml</name></decl>;</decl_stmt>
			<if pos:line="110" pos:column="25">if <condition pos:line="110" pos:column="28">(<expr><op:operator pos:line="110" pos:column="29">!</op:operator><call><name><name pos:line="110" pos:column="30">md</name><op:operator pos:line="110" pos:column="32">.</op:operator><name pos:line="110" pos:column="33">TryGetValue</name></name><argument_list pos:line="110" pos:column="44">(<argument><expr><name pos:line="110" pos:column="45">yamlName</name></expr></argument>, <argument><expr pos:line="110" pos:column="55">out <name pos:line="110" pos:column="59">yaml</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="65">
				<return pos:line="111" pos:column="33">return <expr><lit:literal type="boolean" pos:line="111" pos:column="40">false</lit:literal></expr>;</return></then></if>

			<expr_stmt><expr><name pos:line="113" pos:column="25">ret</name> <op:operator pos:line="113" pos:column="29">=</op:operator> <call><name pos:line="113" pos:column="31">GetValue</name><argument_list pos:line="113" pos:column="39">(<argument><expr><name><name pos:line="113" pos:column="40">field</name><op:operator pos:line="113" pos:column="45">.</op:operator><name pos:line="113" pos:column="46">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="52">field</name><op:operator pos:line="113" pos:column="57">.</op:operator><name pos:line="113" pos:column="58">FieldType</name></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="69">yaml</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="75">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="114" pos:column="25">return <expr><lit:literal type="boolean" pos:line="114" pos:column="32">true</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="117" pos:column="17">public</specifier> <specifier pos:line="117" pos:column="24">static</specifier> <name pos:line="117" pos:column="31">T</name></type> <name><name pos:line="117" pos:column="33">Load</name><argument_list pos:line="117" pos:column="37">&lt;<argument><name pos:line="117" pos:column="38">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="117" pos:column="40">(<param><decl><type><name pos:line="117" pos:column="41">MiniYaml</name></type> <name pos:line="117" pos:column="50">y</name></decl></param>)</parameter_list> <where pos:line="117" pos:column="53">where <name pos:line="117" pos:column="59">T</name> : new()</where>
		<block pos:line="118" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="119" pos:column="25">var</name></type> <name pos:line="119" pos:column="29">t</name> <init pos:line="119" pos:column="31">= <expr><op:operator pos:line="119" pos:column="33">new</op:operator> <call><name pos:line="119" pos:column="37">T</name><argument_list pos:line="119" pos:column="38">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="120" pos:column="25">Load</name><argument_list pos:line="120" pos:column="29">(<argument><expr><name pos:line="120" pos:column="30">t</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="33">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="121" pos:column="25">return <expr><name pos:line="121" pos:column="32">t</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="124" pos:column="17">public</specifier> <specifier pos:line="124" pos:column="24">static</specifier> <name pos:line="124" pos:column="31">void</name></type> <name pos:line="124" pos:column="36">LoadField</name><parameter_list pos:line="124" pos:column="45">(<param><decl><type><name pos:line="124" pos:column="46">object</name></type> <name pos:line="124" pos:column="53">target</name></decl></param>, <param><decl><type><name pos:line="124" pos:column="61">string</name></type> <name pos:line="124" pos:column="68">key</name></decl></param>, <param><decl><type><name pos:line="124" pos:column="73">string</name></type> <name pos:line="124" pos:column="80">value</name></decl></param>)</parameter_list>
		<block pos:line="125" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="126" pos:column="25">const</specifier> <name pos:line="126" pos:column="31">BindingFlags</name></type> <name pos:line="126" pos:column="44">Flags</name> <init pos:line="126" pos:column="50">= <expr><name><name pos:line="126" pos:column="52">BindingFlags</name><op:operator pos:line="126" pos:column="64">.</op:operator><name pos:line="126" pos:column="65">Public</name></name> <op:operator pos:line="126" pos:column="72">|</op:operator> <name><name pos:line="126" pos:column="74">BindingFlags</name><op:operator pos:line="126" pos:column="86">.</op:operator><name pos:line="126" pos:column="87">NonPublic</name></name> <op:operator pos:line="126" pos:column="97">|</op:operator> <name><name pos:line="126" pos:column="99">BindingFlags</name><op:operator pos:line="126" pos:column="111">.</op:operator><name pos:line="126" pos:column="112">Instance</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name pos:line="128" pos:column="25">key</name> <op:operator pos:line="128" pos:column="29">=</op:operator> <call><name><name pos:line="128" pos:column="31">key</name><op:operator pos:line="128" pos:column="34">.</op:operator><name pos:line="128" pos:column="35">Trim</name></name><argument_list pos:line="128" pos:column="39">()</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="130" pos:column="25">var</name></type> <name pos:line="130" pos:column="29">field</name> <init pos:line="130" pos:column="35">= <expr><call><name><name pos:line="130" pos:column="37">target</name><op:operator pos:line="130" pos:column="43">.</op:operator><name pos:line="130" pos:column="44">GetType</name></name><argument_list pos:line="130" pos:column="51">()</argument_list></call><op:operator pos:line="130" pos:column="53">.</op:operator><call><name pos:line="130" pos:column="54">GetField</name><argument_list pos:line="130" pos:column="62">(<argument><expr><name pos:line="130" pos:column="63">key</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="68">Flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="131" pos:column="25">if <condition pos:line="131" pos:column="28">(<expr><name pos:line="131" pos:column="29">field</name> <op:operator pos:line="131" pos:column="35">!=</op:operator> <name pos:line="131" pos:column="38">null</name></expr>)</condition><then pos:line="131" pos:column="43">
			<block pos:line="132" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="133" pos:column="33">var</name></type> <name pos:line="133" pos:column="37">sa</name> <init pos:line="133" pos:column="40">= <expr><call><name><name pos:line="133" pos:column="42">field</name><op:operator pos:line="133" pos:column="47">.</op:operator><name><name pos:line="133" pos:column="48">GetCustomAttributes</name><argument_list pos:line="133" pos:column="67">&lt;<argument><name pos:line="133" pos:column="68">SerializeAttribute</name></argument>&gt;</argument_list></name></name><argument_list pos:line="133" pos:column="87">(<argument><expr><lit:literal type="boolean" pos:line="133" pos:column="88">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="133" pos:column="94">.</op:operator><call><name pos:line="133" pos:column="95">DefaultIfEmpty</name><argument_list pos:line="133" pos:column="109">(<argument><expr><name><name pos:line="133" pos:column="110">SerializeAttribute</name><op:operator pos:line="133" pos:column="128">.</op:operator><name pos:line="133" pos:column="129">Default</name></name></expr></argument>)</argument_list></call><op:operator pos:line="133" pos:column="137">.</op:operator><call><name pos:line="133" pos:column="138">First</name><argument_list pos:line="133" pos:column="143">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="134" pos:column="33">if <condition pos:line="134" pos:column="36">(<expr><op:operator pos:line="134" pos:column="37">!</op:operator><name><name pos:line="134" pos:column="38">sa</name><op:operator pos:line="134" pos:column="40">.</op:operator><name pos:line="134" pos:column="41">FromYamlKey</name></name></expr>)</condition><then pos:line="134" pos:column="53">
					<expr_stmt><expr><call><name><name pos:line="135" pos:column="41">field</name><op:operator pos:line="135" pos:column="46">.</op:operator><name pos:line="135" pos:column="47">SetValue</name></name><argument_list pos:line="135" pos:column="55">(<argument><expr><name pos:line="135" pos:column="56">target</name></expr></argument>, <argument><expr><call><name pos:line="135" pos:column="64">GetValue</name><argument_list pos:line="135" pos:column="72">(<argument><expr><name><name pos:line="135" pos:column="73">field</name><op:operator pos:line="135" pos:column="78">.</op:operator><name pos:line="135" pos:column="79">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="85">field</name><op:operator pos:line="135" pos:column="90">.</op:operator><name pos:line="135" pos:column="91">FieldType</name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="102">value</name></expr></argument>, <argument><expr><name pos:line="135" pos:column="109">field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<return pos:line="136" pos:column="33">return;</return>
			}</block></then></if>

			<decl_stmt><decl><type><name pos:line="139" pos:column="25">var</name></type> <name pos:line="139" pos:column="29">prop</name> <init pos:line="139" pos:column="34">= <expr><call><name><name pos:line="139" pos:column="36">target</name><op:operator pos:line="139" pos:column="42">.</op:operator><name pos:line="139" pos:column="43">GetType</name></name><argument_list pos:line="139" pos:column="50">()</argument_list></call><op:operator pos:line="139" pos:column="52">.</op:operator><call><name pos:line="139" pos:column="53">GetProperty</name><argument_list pos:line="139" pos:column="64">(<argument><expr><name pos:line="139" pos:column="65">key</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="70">Flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="140" pos:column="25">if <condition pos:line="140" pos:column="28">(<expr><name pos:line="140" pos:column="29">prop</name> <op:operator pos:line="140" pos:column="34">!=</op:operator> <name pos:line="140" pos:column="37">null</name></expr>)</condition><then pos:line="140" pos:column="42">
			<block pos:line="141" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="142" pos:column="33">var</name></type> <name pos:line="142" pos:column="37">sa</name> <init pos:line="142" pos:column="40">= <expr><call><name><name pos:line="142" pos:column="42">prop</name><op:operator pos:line="142" pos:column="46">.</op:operator><name><name pos:line="142" pos:column="47">GetCustomAttributes</name><argument_list pos:line="142" pos:column="66">&lt;<argument><name pos:line="142" pos:column="67">SerializeAttribute</name></argument>&gt;</argument_list></name></name><argument_list pos:line="142" pos:column="86">(<argument><expr><lit:literal type="boolean" pos:line="142" pos:column="87">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="142" pos:column="93">.</op:operator><call><name pos:line="142" pos:column="94">DefaultIfEmpty</name><argument_list pos:line="142" pos:column="108">(<argument><expr><name><name pos:line="142" pos:column="109">SerializeAttribute</name><op:operator pos:line="142" pos:column="127">.</op:operator><name pos:line="142" pos:column="128">Default</name></name></expr></argument>)</argument_list></call><op:operator pos:line="142" pos:column="136">.</op:operator><call><name pos:line="142" pos:column="137">First</name><argument_list pos:line="142" pos:column="142">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="143" pos:column="33">if <condition pos:line="143" pos:column="36">(<expr><op:operator pos:line="143" pos:column="37">!</op:operator><name><name pos:line="143" pos:column="38">sa</name><op:operator pos:line="143" pos:column="40">.</op:operator><name pos:line="143" pos:column="41">FromYamlKey</name></name></expr>)</condition><then pos:line="143" pos:column="53">
					<expr_stmt><expr><call><name><name pos:line="144" pos:column="41">prop</name><op:operator pos:line="144" pos:column="45">.</op:operator><name pos:line="144" pos:column="46">SetValue</name></name><argument_list pos:line="144" pos:column="54">(<argument><expr><name pos:line="144" pos:column="55">target</name></expr></argument>, <argument><expr><call><name pos:line="144" pos:column="63">GetValue</name><argument_list pos:line="144" pos:column="71">(<argument><expr><name><name pos:line="144" pos:column="72">prop</name><op:operator pos:line="144" pos:column="76">.</op:operator><name pos:line="144" pos:column="77">Name</name></name></expr></argument>, <argument><expr><name><name pos:line="144" pos:column="83">prop</name><op:operator pos:line="144" pos:column="87">.</op:operator><name pos:line="144" pos:column="88">PropertyType</name></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="102">value</name></expr></argument>, <argument><expr><name pos:line="144" pos:column="109">prop</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="144" pos:column="116">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<return pos:line="145" pos:column="33">return;</return>
			}</block></then></if>

			<expr_stmt><expr><call><name pos:line="148" pos:column="25">UnknownFieldAction</name><argument_list pos:line="148" pos:column="43">(<argument><expr><name pos:line="148" pos:column="44">key</name></expr></argument>, <argument><expr><call><name><name pos:line="148" pos:column="49">target</name><op:operator pos:line="148" pos:column="55">.</op:operator><name pos:line="148" pos:column="56">GetType</name></name><argument_list pos:line="148" pos:column="63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="151" pos:column="17">public</specifier> <specifier pos:line="151" pos:column="24">static</specifier> <name pos:line="151" pos:column="31">T</name></type> <name><name pos:line="151" pos:column="33">GetValue</name><argument_list pos:line="151" pos:column="41">&lt;<argument><name pos:line="151" pos:column="42">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="151" pos:column="44">(<param><decl><type><name pos:line="151" pos:column="45">string</name></type> <name pos:line="151" pos:column="52">field</name></decl></param>, <param><decl><type><name pos:line="151" pos:column="59">string</name></type> <name pos:line="151" pos:column="66">value</name></decl></param>)</parameter_list>
		<block pos:line="152" pos:column="17">{
			<return pos:line="153" pos:column="25">return <expr><op:operator pos:line="153" pos:column="32">(</op:operator><name pos:line="153" pos:column="33">T</name><op:operator pos:line="153" pos:column="34">)</op:operator><call><name pos:line="153" pos:column="35">GetValue</name><argument_list pos:line="153" pos:column="43">(<argument><expr><name pos:line="153" pos:column="44">field</name></expr></argument>, <argument><expr><call><name pos:line="153" pos:column="51">typeof</name><argument_list pos:line="153" pos:column="57">(<argument><expr><name pos:line="153" pos:column="58">T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="153" pos:column="62">value</name></expr></argument>, <argument><expr><name pos:line="153" pos:column="69">null</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="156" pos:column="17">public</specifier> <specifier pos:line="156" pos:column="24">static</specifier> <name pos:line="156" pos:column="31">object</name></type> <name pos:line="156" pos:column="38">GetValue</name><parameter_list pos:line="156" pos:column="46">(<param><decl><type><name pos:line="156" pos:column="47">string</name></type> <name pos:line="156" pos:column="54">fieldName</name></decl></param>, <param><decl><type><name pos:line="156" pos:column="65">Type</name></type> <name pos:line="156" pos:column="70">fieldType</name></decl></param>, <param><decl><type><name pos:line="156" pos:column="81">string</name></type> <name pos:line="156" pos:column="88">value</name></decl></param>)</parameter_list>
		<block pos:line="157" pos:column="17">{
			<return pos:line="158" pos:column="25">return <expr><call><name pos:line="158" pos:column="32">GetValue</name><argument_list pos:line="158" pos:column="40">(<argument><expr><name pos:line="158" pos:column="41">fieldName</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="52">fieldType</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="63">value</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="70">null</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="161" pos:column="17">public</specifier> <specifier pos:line="161" pos:column="24">static</specifier> <name pos:line="161" pos:column="31">object</name></type> <name pos:line="161" pos:column="38">GetValue</name><parameter_list pos:line="161" pos:column="46">(<param><decl><type><name pos:line="161" pos:column="47">string</name></type> <name pos:line="161" pos:column="54">fieldName</name></decl></param>, <param><decl><type><name pos:line="161" pos:column="65">Type</name></type> <name pos:line="161" pos:column="70">fieldType</name></decl></param>, <param><decl><type><name pos:line="161" pos:column="81">string</name></type> <name pos:line="161" pos:column="88">value</name></decl></param>, <param><decl><type><name pos:line="161" pos:column="95">MemberInfo</name></type> <name pos:line="161" pos:column="106">field</name></decl></param>)</parameter_list>
		<block pos:line="162" pos:column="17">{
			<return pos:line="163" pos:column="25">return <expr><call><name pos:line="163" pos:column="32">GetValue</name><argument_list pos:line="163" pos:column="40">(<argument><expr><name pos:line="163" pos:column="41">fieldName</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="52">fieldType</name></expr></argument>, <argument><expr><op:operator pos:line="163" pos:column="63">new</op:operator> <call><name pos:line="163" pos:column="67">MiniYaml</name><argument_list pos:line="163" pos:column="75">(<argument><expr><name pos:line="163" pos:column="76">value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="163" pos:column="84">field</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="166" pos:column="17">public</specifier> <specifier pos:line="166" pos:column="24">static</specifier> <name pos:line="166" pos:column="31">object</name></type> <name pos:line="166" pos:column="38">GetValue</name><parameter_list pos:line="166" pos:column="46">(<param><decl><type><name pos:line="166" pos:column="47">string</name></type> <name pos:line="166" pos:column="54">fieldName</name></decl></param>, <param><decl><type><name pos:line="166" pos:column="65">Type</name></type> <name pos:line="166" pos:column="70">fieldType</name></decl></param>, <param><decl><type><name pos:line="166" pos:column="81">MiniYaml</name></type> <name pos:line="166" pos:column="90">yaml</name></decl></param>, <param><decl><type><name pos:line="166" pos:column="96">MemberInfo</name></type> <name pos:line="166" pos:column="107">field</name></decl></param>)</parameter_list>
		<block pos:line="167" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="168" pos:column="25">var</name></type> <name pos:line="168" pos:column="29">value</name> <init pos:line="168" pos:column="35">= <expr><name><name pos:line="168" pos:column="37">yaml</name><op:operator pos:line="168" pos:column="41">.</op:operator><name pos:line="168" pos:column="42">Value</name></name></expr></init></decl>;</decl_stmt>
			<if pos:line="169" pos:column="25">if <condition pos:line="169" pos:column="28">(<expr><name pos:line="169" pos:column="29">value</name> <op:operator pos:line="169" pos:column="35">!=</op:operator> <name pos:line="169" pos:column="38">null</name></expr>)</condition><then pos:line="169" pos:column="43"> <expr_stmt><expr><name pos:line="169" pos:column="44">value</name> <op:operator pos:line="169" pos:column="50">=</op:operator> <call><name><name pos:line="169" pos:column="52">value</name><op:operator pos:line="169" pos:column="57">.</op:operator><name pos:line="169" pos:column="58">Trim</name></name><argument_list pos:line="169" pos:column="62">()</argument_list></call></expr>;</expr_stmt></then></if>

			<if pos:line="171" pos:column="25">if <condition pos:line="171" pos:column="28">(<expr><name pos:line="171" pos:column="29">fieldType</name> <op:operator pos:line="171" pos:column="39">==</op:operator> <call><name pos:line="171" pos:column="42">typeof</name><argument_list pos:line="171" pos:column="48">(<argument><expr><name pos:line="171" pos:column="49">int</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="171" pos:column="54">
			<block pos:line="172" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="173" pos:column="33">int</name></type> <name pos:line="173" pos:column="37">res</name></decl>;</decl_stmt>
				<if pos:line="174" pos:column="33">if <condition pos:line="174" pos:column="36">(<expr><call><name><name pos:line="174" pos:column="37">Exts</name><op:operator pos:line="174" pos:column="41">.</op:operator><name pos:line="174" pos:column="42">TryParseIntegerInvariant</name></name><argument_list pos:line="174" pos:column="66">(<argument><expr><name pos:line="174" pos:column="67">value</name></expr></argument>, <argument><expr pos:line="174" pos:column="74">out <name pos:line="174" pos:column="78">res</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="174" pos:column="83">
					<return pos:line="175" pos:column="41">return <expr><name pos:line="175" pos:column="48">res</name></expr>;</return></then></if>
				<return pos:line="176" pos:column="33">return <expr><call><name pos:line="176" pos:column="40">InvalidValueAction</name><argument_list pos:line="176" pos:column="58">(<argument><expr><name pos:line="176" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="176" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="176" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="178" pos:column="25">else <if pos:line="178" pos:column="30">if <condition pos:line="178" pos:column="33">(<expr><name pos:line="178" pos:column="34">fieldType</name> <op:operator pos:line="178" pos:column="44">==</op:operator> <call><name pos:line="178" pos:column="47">typeof</name><argument_list pos:line="178" pos:column="53">(<argument><expr><name pos:line="178" pos:column="54">ushort</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="178" pos:column="62">
			<block pos:line="179" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="180" pos:column="33">ushort</name></type> <name pos:line="180" pos:column="40">res</name></decl>;</decl_stmt>
				<if pos:line="181" pos:column="33">if <condition pos:line="181" pos:column="36">(<expr><call><name><name pos:line="181" pos:column="37">ushort</name><op:operator pos:line="181" pos:column="43">.</op:operator><name pos:line="181" pos:column="44">TryParse</name></name><argument_list pos:line="181" pos:column="52">(<argument><expr><name pos:line="181" pos:column="53">value</name></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="60">NumberStyles</name><op:operator pos:line="181" pos:column="72">.</op:operator><name pos:line="181" pos:column="73">Integer</name></name></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="82">NumberFormatInfo</name><op:operator pos:line="181" pos:column="98">.</op:operator><name pos:line="181" pos:column="99">InvariantInfo</name></name></expr></argument>, <argument><expr pos:line="181" pos:column="114">out <name pos:line="181" pos:column="118">res</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="181" pos:column="123">
					<return pos:line="182" pos:column="41">return <expr><name pos:line="182" pos:column="48">res</name></expr>;</return></then></if>
				<return pos:line="183" pos:column="33">return <expr><call><name pos:line="183" pos:column="40">InvalidValueAction</name><argument_list pos:line="183" pos:column="58">(<argument><expr><name pos:line="183" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if></else></if>

			<if pos:line="186" pos:column="25">if <condition pos:line="186" pos:column="28">(<expr><name pos:line="186" pos:column="29">fieldType</name> <op:operator pos:line="186" pos:column="39">==</op:operator> <call><name pos:line="186" pos:column="42">typeof</name><argument_list pos:line="186" pos:column="48">(<argument><expr><name pos:line="186" pos:column="49">long</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="186" pos:column="55">
			<block pos:line="187" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="188" pos:column="33">long</name></type> <name pos:line="188" pos:column="38">res</name></decl>;</decl_stmt>
				<if pos:line="189" pos:column="33">if <condition pos:line="189" pos:column="36">(<expr><call><name><name pos:line="189" pos:column="37">long</name><op:operator pos:line="189" pos:column="41">.</op:operator><name pos:line="189" pos:column="42">TryParse</name></name><argument_list pos:line="189" pos:column="50">(<argument><expr><name pos:line="189" pos:column="51">value</name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="58">NumberStyles</name><op:operator pos:line="189" pos:column="70">.</op:operator><name pos:line="189" pos:column="71">Integer</name></name></expr></argument>, <argument><expr><name><name pos:line="189" pos:column="80">NumberFormatInfo</name><op:operator pos:line="189" pos:column="96">.</op:operator><name pos:line="189" pos:column="97">InvariantInfo</name></name></expr></argument>, <argument><expr pos:line="189" pos:column="112">out <name pos:line="189" pos:column="116">res</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="189" pos:column="121">
					<return pos:line="190" pos:column="41">return <expr><name pos:line="190" pos:column="48">res</name></expr>;</return></then></if>
				<return pos:line="191" pos:column="33">return <expr><call><name pos:line="191" pos:column="40">InvalidValueAction</name><argument_list pos:line="191" pos:column="58">(<argument><expr><name pos:line="191" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="193" pos:column="25">else <if pos:line="193" pos:column="30">if <condition pos:line="193" pos:column="33">(<expr><name pos:line="193" pos:column="34">fieldType</name> <op:operator pos:line="193" pos:column="44">==</op:operator> <call><name pos:line="193" pos:column="47">typeof</name><argument_list pos:line="193" pos:column="53">(<argument><expr><name pos:line="193" pos:column="54">float</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="193" pos:column="61">
			<block pos:line="194" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="195" pos:column="33">float</name></type> <name pos:line="195" pos:column="39">res</name></decl>;</decl_stmt>
				<if pos:line="196" pos:column="33">if <condition pos:line="196" pos:column="36">(<expr><name pos:line="196" pos:column="37">value</name> <op:operator pos:line="196" pos:column="43">!=</op:operator> <name pos:line="196" pos:column="46">null</name> <op:operator pos:line="196" pos:column="51">&amp;&amp;</op:operator> <call><name><name pos:line="196" pos:column="54">float</name><op:operator pos:line="196" pos:column="59">.</op:operator><name pos:line="196" pos:column="60">TryParse</name></name><argument_list pos:line="196" pos:column="68">(<argument><expr><call><name><name pos:line="196" pos:column="69">value</name><op:operator pos:line="196" pos:column="74">.</op:operator><name pos:line="196" pos:column="75">Replace</name></name><argument_list pos:line="196" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="83">"%"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="196" pos:column="88">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="93">NumberStyles</name><op:operator pos:line="196" pos:column="105">.</op:operator><name pos:line="196" pos:column="106">Float</name></name></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="113">NumberFormatInfo</name><op:operator pos:line="196" pos:column="129">.</op:operator><name pos:line="196" pos:column="130">InvariantInfo</name></name></expr></argument>, <argument><expr pos:line="196" pos:column="145">out <name pos:line="196" pos:column="149">res</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="196" pos:column="154">
					<return pos:line="197" pos:column="41">return <expr><name pos:line="197" pos:column="48">res</name> <op:operator pos:line="197" pos:column="52">*</op:operator> <op:operator pos:line="197" pos:column="54">(</op:operator><call><name><name pos:line="197" pos:column="55">value</name><op:operator pos:line="197" pos:column="60">.</op:operator><name pos:line="197" pos:column="61">Contains</name></name><argument_list pos:line="197" pos:column="69">(<argument><expr><lit:literal type="char" pos:line="197" pos:column="70">'%'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="197" pos:column="75">?</op:operator> <lit:literal type="number" pos:line="197" pos:column="77">0.01f</lit:literal> <op:operator pos:line="197" pos:column="83">:</op:operator> <lit:literal type="number" pos:line="197" pos:column="85">1f</lit:literal><op:operator pos:line="197" pos:column="87">)</op:operator></expr>;</return></then></if>
				<return pos:line="198" pos:column="33">return <expr><call><name pos:line="198" pos:column="40">InvalidValueAction</name><argument_list pos:line="198" pos:column="58">(<argument><expr><name pos:line="198" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="200" pos:column="25">else <if pos:line="200" pos:column="30">if <condition pos:line="200" pos:column="33">(<expr><name pos:line="200" pos:column="34">fieldType</name> <op:operator pos:line="200" pos:column="44">==</op:operator> <call><name pos:line="200" pos:column="47">typeof</name><argument_list pos:line="200" pos:column="53">(<argument><expr><name pos:line="200" pos:column="54">decimal</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="200" pos:column="63">
			<block pos:line="201" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="202" pos:column="33">decimal</name></type> <name pos:line="202" pos:column="41">res</name></decl>;</decl_stmt>
				<if pos:line="203" pos:column="33">if <condition pos:line="203" pos:column="36">(<expr><name pos:line="203" pos:column="37">value</name> <op:operator pos:line="203" pos:column="43">!=</op:operator> <name pos:line="203" pos:column="46">null</name> <op:operator pos:line="203" pos:column="51">&amp;&amp;</op:operator> <call><name><name pos:line="203" pos:column="54">decimal</name><op:operator pos:line="203" pos:column="61">.</op:operator><name pos:line="203" pos:column="62">TryParse</name></name><argument_list pos:line="203" pos:column="70">(<argument><expr><call><name><name pos:line="203" pos:column="71">value</name><op:operator pos:line="203" pos:column="76">.</op:operator><name pos:line="203" pos:column="77">Replace</name></name><argument_list pos:line="203" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="203" pos:column="85">"%"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="203" pos:column="90">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="203" pos:column="95">NumberStyles</name><op:operator pos:line="203" pos:column="107">.</op:operator><name pos:line="203" pos:column="108">Float</name></name></expr></argument>, <argument><expr><name><name pos:line="203" pos:column="115">NumberFormatInfo</name><op:operator pos:line="203" pos:column="131">.</op:operator><name pos:line="203" pos:column="132">InvariantInfo</name></name></expr></argument>, <argument><expr pos:line="203" pos:column="147">out <name pos:line="203" pos:column="151">res</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="203" pos:column="156">
					<return pos:line="204" pos:column="41">return <expr><name pos:line="204" pos:column="48">res</name> <op:operator pos:line="204" pos:column="52">*</op:operator> <op:operator pos:line="204" pos:column="54">(</op:operator><call><name><name pos:line="204" pos:column="55">value</name><op:operator pos:line="204" pos:column="60">.</op:operator><name pos:line="204" pos:column="61">Contains</name></name><argument_list pos:line="204" pos:column="69">(<argument><expr><lit:literal type="char" pos:line="204" pos:column="70">'%'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="204" pos:column="75">?</op:operator> <lit:literal type="number" pos:line="204" pos:column="77">0.01m</lit:literal> <op:operator pos:line="204" pos:column="83">:</op:operator> <lit:literal type="number" pos:line="204" pos:column="85">1m</lit:literal><op:operator pos:line="204" pos:column="87">)</op:operator></expr>;</return></then></if>
				<return pos:line="205" pos:column="33">return <expr><call><name pos:line="205" pos:column="40">InvalidValueAction</name><argument_list pos:line="205" pos:column="58">(<argument><expr><name pos:line="205" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="207" pos:column="25">else <if pos:line="207" pos:column="30">if <condition pos:line="207" pos:column="33">(<expr><name pos:line="207" pos:column="34">fieldType</name> <op:operator pos:line="207" pos:column="44">==</op:operator> <call><name pos:line="207" pos:column="47">typeof</name><argument_list pos:line="207" pos:column="53">(<argument><expr><name pos:line="207" pos:column="54">string</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="207" pos:column="62">
			<block pos:line="208" pos:column="25">{
				<if pos:line="209" pos:column="33">if <condition pos:line="209" pos:column="36">(<expr><name pos:line="209" pos:column="37">field</name> <op:operator pos:line="209" pos:column="43">!=</op:operator> <name pos:line="209" pos:column="46">null</name> <op:operator pos:line="209" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="209" pos:column="54">MemberHasTranslateAttribute</name><index pos:line="209" pos:column="81">[<expr><name pos:line="209" pos:column="82">field</name></expr>]</index></name> <op:operator pos:line="209" pos:column="89">&amp;&amp;</op:operator> <name pos:line="209" pos:column="92">value</name> <op:operator pos:line="209" pos:column="98">!=</op:operator> <name pos:line="209" pos:column="101">null</name></expr>)</condition><then pos:line="209" pos:column="106">
					<return pos:line="210" pos:column="41">return <expr><call><name><name pos:line="210" pos:column="48">Regex</name><op:operator pos:line="210" pos:column="53">.</op:operator><name pos:line="210" pos:column="54">Replace</name></name><argument_list pos:line="210" pos:column="61">(<argument><expr><name pos:line="210" pos:column="62">value</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="210" pos:column="69">"@[^@]+@"</lit:literal></expr></argument>, <argument><expr><lambda><name pos:line="210" pos:column="80">m</name> <op:operator pos:line="210" pos:column="82">=&gt;</op:operator> <call><name pos:line="210" pos:column="85">Translate</name><argument_list pos:line="210" pos:column="94">(<argument><expr><call><name><name pos:line="210" pos:column="95">m</name><op:operator pos:line="210" pos:column="96">.</op:operator><name pos:line="210" pos:column="97">Value</name><op:operator pos:line="210" pos:column="102">.</op:operator><name pos:line="210" pos:column="103">Substring</name></name><argument_list pos:line="210" pos:column="112">(<argument><expr><lit:literal type="number" pos:line="210" pos:column="113">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="210" pos:column="116">m</name><op:operator pos:line="210" pos:column="117">.</op:operator><name pos:line="210" pos:column="118">Value</name><op:operator pos:line="210" pos:column="123">.</op:operator><name pos:line="210" pos:column="124">Length</name></name> <op:operator pos:line="210" pos:column="131">-</op:operator> <lit:literal type="number" pos:line="210" pos:column="133">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>, <argument><expr><name><name pos:line="210" pos:column="138">RegexOptions</name><op:operator pos:line="210" pos:column="150">.</op:operator><name pos:line="210" pos:column="151">Compiled</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
				<return pos:line="211" pos:column="33">return <expr><name pos:line="211" pos:column="40">value</name></expr>;</return>
			}</block></then>
			<else pos:line="213" pos:column="25">else <if pos:line="213" pos:column="30">if <condition pos:line="213" pos:column="33">(<expr><name pos:line="213" pos:column="34">fieldType</name> <op:operator pos:line="213" pos:column="44">==</op:operator> <call><name pos:line="213" pos:column="47">typeof</name><argument_list pos:line="213" pos:column="53">(<argument><expr><name pos:line="213" pos:column="54">Color</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="213" pos:column="61">
			<block pos:line="214" pos:column="25">{
				<if pos:line="215" pos:column="33">if <condition pos:line="215" pos:column="36">(<expr><name pos:line="215" pos:column="37">value</name> <op:operator pos:line="215" pos:column="43">!=</op:operator> <name pos:line="215" pos:column="46">null</name></expr>)</condition><then pos:line="215" pos:column="51">
				<block pos:line="216" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="217" pos:column="41">var</name></type> <name pos:line="217" pos:column="45">parts</name> <init pos:line="217" pos:column="51">= <expr><call><name><name pos:line="217" pos:column="53">value</name><op:operator pos:line="217" pos:column="58">.</op:operator><name pos:line="217" pos:column="59">Split</name></name><argument_list pos:line="217" pos:column="64">(<argument><expr><lit:literal type="char" pos:line="217" pos:column="65">','</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="218" pos:column="41">if <condition pos:line="218" pos:column="44">(<expr><name><name pos:line="218" pos:column="45">parts</name><op:operator pos:line="218" pos:column="50">.</op:operator><name pos:line="218" pos:column="51">Length</name></name> <op:operator pos:line="218" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="218" pos:column="61">3</lit:literal></expr>)</condition><then pos:line="218" pos:column="63">
						<return pos:line="219" pos:column="49">return <expr><call><name><name pos:line="219" pos:column="56">Color</name><op:operator pos:line="219" pos:column="61">.</op:operator><name pos:line="219" pos:column="62">FromArgb</name></name><argument_list pos:line="219" pos:column="70">(
							<argument><expr><call><name><name pos:line="220" pos:column="57">Exts</name><op:operator pos:line="220" pos:column="61">.</op:operator><name pos:line="220" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="220" pos:column="83">(<argument><expr><name><name pos:line="220" pos:column="84">parts</name><index pos:line="220" pos:column="89">[<expr><lit:literal type="number" pos:line="220" pos:column="90">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="220" pos:column="93">.</op:operator><call><name pos:line="220" pos:column="94">Clamp</name><argument_list pos:line="220" pos:column="99">(<argument><expr><lit:literal type="number" pos:line="220" pos:column="100">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="220" pos:column="103">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name pos:line="221" pos:column="57">Exts</name><op:operator pos:line="221" pos:column="61">.</op:operator><name pos:line="221" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="221" pos:column="83">(<argument><expr><name><name pos:line="221" pos:column="84">parts</name><index pos:line="221" pos:column="89">[<expr><lit:literal type="number" pos:line="221" pos:column="90">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="221" pos:column="93">.</op:operator><call><name pos:line="221" pos:column="94">Clamp</name><argument_list pos:line="221" pos:column="99">(<argument><expr><lit:literal type="number" pos:line="221" pos:column="100">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="221" pos:column="103">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name pos:line="222" pos:column="57">Exts</name><op:operator pos:line="222" pos:column="61">.</op:operator><name pos:line="222" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="222" pos:column="83">(<argument><expr><name><name pos:line="222" pos:column="84">parts</name><index pos:line="222" pos:column="89">[<expr><lit:literal type="number" pos:line="222" pos:column="90">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="222" pos:column="93">.</op:operator><call><name pos:line="222" pos:column="94">Clamp</name><argument_list pos:line="222" pos:column="99">(<argument><expr><lit:literal type="number" pos:line="222" pos:column="100">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="222" pos:column="103">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
					<if pos:line="223" pos:column="41">if <condition pos:line="223" pos:column="44">(<expr><name><name pos:line="223" pos:column="45">parts</name><op:operator pos:line="223" pos:column="50">.</op:operator><name pos:line="223" pos:column="51">Length</name></name> <op:operator pos:line="223" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="223" pos:column="61">4</lit:literal></expr>)</condition><then pos:line="223" pos:column="63">
						<return pos:line="224" pos:column="49">return <expr><call><name><name pos:line="224" pos:column="56">Color</name><op:operator pos:line="224" pos:column="61">.</op:operator><name pos:line="224" pos:column="62">FromArgb</name></name><argument_list pos:line="224" pos:column="70">(
							<argument><expr><call><name><name pos:line="225" pos:column="57">Exts</name><op:operator pos:line="225" pos:column="61">.</op:operator><name pos:line="225" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="225" pos:column="83">(<argument><expr><name><name pos:line="225" pos:column="84">parts</name><index pos:line="225" pos:column="89">[<expr><lit:literal type="number" pos:line="225" pos:column="90">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="225" pos:column="93">.</op:operator><call><name pos:line="225" pos:column="94">Clamp</name><argument_list pos:line="225" pos:column="99">(<argument><expr><lit:literal type="number" pos:line="225" pos:column="100">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="225" pos:column="103">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name pos:line="226" pos:column="57">Exts</name><op:operator pos:line="226" pos:column="61">.</op:operator><name pos:line="226" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="226" pos:column="83">(<argument><expr><name><name pos:line="226" pos:column="84">parts</name><index pos:line="226" pos:column="89">[<expr><lit:literal type="number" pos:line="226" pos:column="90">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="226" pos:column="93">.</op:operator><call><name pos:line="226" pos:column="94">Clamp</name><argument_list pos:line="226" pos:column="99">(<argument><expr><lit:literal type="number" pos:line="226" pos:column="100">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="226" pos:column="103">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name pos:line="227" pos:column="57">Exts</name><op:operator pos:line="227" pos:column="61">.</op:operator><name pos:line="227" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="227" pos:column="83">(<argument><expr><name><name pos:line="227" pos:column="84">parts</name><index pos:line="227" pos:column="89">[<expr><lit:literal type="number" pos:line="227" pos:column="90">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="227" pos:column="93">.</op:operator><call><name pos:line="227" pos:column="94">Clamp</name><argument_list pos:line="227" pos:column="99">(<argument><expr><lit:literal type="number" pos:line="227" pos:column="100">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="227" pos:column="103">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name pos:line="228" pos:column="57">Exts</name><op:operator pos:line="228" pos:column="61">.</op:operator><name pos:line="228" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="228" pos:column="83">(<argument><expr><name><name pos:line="228" pos:column="84">parts</name><index pos:line="228" pos:column="89">[<expr><lit:literal type="number" pos:line="228" pos:column="90">3</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="228" pos:column="93">.</op:operator><call><name pos:line="228" pos:column="94">Clamp</name><argument_list pos:line="228" pos:column="99">(<argument><expr><lit:literal type="number" pos:line="228" pos:column="100">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="228" pos:column="103">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
				}</block></then></if>

				<return pos:line="231" pos:column="33">return <expr><call><name pos:line="231" pos:column="40">InvalidValueAction</name><argument_list pos:line="231" pos:column="58">(<argument><expr><name pos:line="231" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="233" pos:column="25">else <if pos:line="233" pos:column="30">if <condition pos:line="233" pos:column="33">(<expr><name pos:line="233" pos:column="34">fieldType</name> <op:operator pos:line="233" pos:column="44">==</op:operator> <call><name pos:line="233" pos:column="47">typeof</name><argument_list pos:line="233" pos:column="53">(<argument><expr><name><name pos:line="233" pos:column="54">Color</name><index pos:line="233" pos:column="59">[]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="233" pos:column="63">
			<block pos:line="234" pos:column="25">{
				<if pos:line="235" pos:column="33">if <condition pos:line="235" pos:column="36">(<expr><name pos:line="235" pos:column="37">value</name> <op:operator pos:line="235" pos:column="43">!=</op:operator> <name pos:line="235" pos:column="46">null</name></expr>)</condition><then pos:line="235" pos:column="51">
				<block pos:line="236" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="237" pos:column="41">var</name></type> <name pos:line="237" pos:column="45">parts</name> <init pos:line="237" pos:column="51">= <expr><call><name><name pos:line="237" pos:column="53">value</name><op:operator pos:line="237" pos:column="58">.</op:operator><name pos:line="237" pos:column="59">Split</name></name><argument_list pos:line="237" pos:column="64">(<argument><expr><lit:literal type="char" pos:line="237" pos:column="65">','</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if pos:line="239" pos:column="41">if <condition pos:line="239" pos:column="44">(<expr><name><name pos:line="239" pos:column="45">parts</name><op:operator pos:line="239" pos:column="50">.</op:operator><name pos:line="239" pos:column="51">Length</name></name> <op:operator pos:line="239" pos:column="58">%</op:operator> <lit:literal type="number" pos:line="239" pos:column="60">4</lit:literal> <op:operator pos:line="239" pos:column="62">!=</op:operator> <lit:literal type="number" pos:line="239" pos:column="65">0</lit:literal></expr>)</condition><then pos:line="239" pos:column="67">
						<return pos:line="240" pos:column="49">return <expr><call><name pos:line="240" pos:column="56">InvalidValueAction</name><argument_list pos:line="240" pos:column="74">(<argument><expr><name pos:line="240" pos:column="75">value</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="82">fieldType</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="93">fieldName</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

					<decl_stmt><decl><type><name pos:line="242" pos:column="41">var</name></type> <name pos:line="242" pos:column="45">colors</name> <init pos:line="242" pos:column="52">= <expr><op:operator pos:line="242" pos:column="54">new</op:operator> <name><name pos:line="242" pos:column="58">Color</name><index pos:line="242" pos:column="63">[<expr><name><name pos:line="242" pos:column="64">parts</name><op:operator pos:line="242" pos:column="69">.</op:operator><name pos:line="242" pos:column="70">Length</name></name> <op:operator pos:line="242" pos:column="77">/</op:operator> <lit:literal type="number" pos:line="242" pos:column="79">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

					<for pos:line="244" pos:column="41">for (<init><decl><type><name pos:line="244" pos:column="46">var</name></type> <name pos:line="244" pos:column="50">i</name> <init pos:line="244" pos:column="52">= <expr><lit:literal type="number" pos:line="244" pos:column="54">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="244" pos:column="57">i</name> <op:operator pos:line="244" pos:column="59">&lt;</op:operator> <name><name pos:line="244" pos:column="61">colors</name><op:operator pos:line="244" pos:column="67">.</op:operator><name pos:line="244" pos:column="68">Length</name></name></expr>;</condition> <incr><expr><name pos:line="244" pos:column="76">i</name><op:operator pos:line="244" pos:column="77">++</op:operator></expr></incr>)
					<block pos:line="245" pos:column="41">{
						<expr_stmt><expr><name><name pos:line="246" pos:column="49">colors</name><index pos:line="246" pos:column="55">[<expr><name pos:line="246" pos:column="56">i</name></expr>]</index></name> <op:operator pos:line="246" pos:column="59">=</op:operator> <call><name><name pos:line="246" pos:column="61">Color</name><op:operator pos:line="246" pos:column="66">.</op:operator><name pos:line="246" pos:column="67">FromArgb</name></name><argument_list pos:line="246" pos:column="75">(
							<argument><expr><call><name><name pos:line="247" pos:column="57">Exts</name><op:operator pos:line="247" pos:column="61">.</op:operator><name pos:line="247" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="247" pos:column="83">(<argument><expr><name><name pos:line="247" pos:column="84">parts</name><index pos:line="247" pos:column="89">[<expr><lit:literal type="number" pos:line="247" pos:column="90">4</lit:literal> <op:operator pos:line="247" pos:column="92">*</op:operator> <name pos:line="247" pos:column="94">i</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="247" pos:column="97">.</op:operator><call><name pos:line="247" pos:column="98">Clamp</name><argument_list pos:line="247" pos:column="103">(<argument><expr><lit:literal type="number" pos:line="247" pos:column="104">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="247" pos:column="107">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name pos:line="248" pos:column="57">Exts</name><op:operator pos:line="248" pos:column="61">.</op:operator><name pos:line="248" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="248" pos:column="83">(<argument><expr><name><name pos:line="248" pos:column="84">parts</name><index pos:line="248" pos:column="89">[<expr><lit:literal type="number" pos:line="248" pos:column="90">4</lit:literal> <op:operator pos:line="248" pos:column="92">*</op:operator> <name pos:line="248" pos:column="94">i</name> <op:operator pos:line="248" pos:column="96">+</op:operator> <lit:literal type="number" pos:line="248" pos:column="98">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="248" pos:column="101">.</op:operator><call><name pos:line="248" pos:column="102">Clamp</name><argument_list pos:line="248" pos:column="107">(<argument><expr><lit:literal type="number" pos:line="248" pos:column="108">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="248" pos:column="111">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name pos:line="249" pos:column="57">Exts</name><op:operator pos:line="249" pos:column="61">.</op:operator><name pos:line="249" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="249" pos:column="83">(<argument><expr><name><name pos:line="249" pos:column="84">parts</name><index pos:line="249" pos:column="89">[<expr><lit:literal type="number" pos:line="249" pos:column="90">4</lit:literal> <op:operator pos:line="249" pos:column="92">*</op:operator> <name pos:line="249" pos:column="94">i</name> <op:operator pos:line="249" pos:column="96">+</op:operator> <lit:literal type="number" pos:line="249" pos:column="98">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="249" pos:column="101">.</op:operator><call><name pos:line="249" pos:column="102">Clamp</name><argument_list pos:line="249" pos:column="107">(<argument><expr><lit:literal type="number" pos:line="249" pos:column="108">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="249" pos:column="111">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name><name pos:line="250" pos:column="57">Exts</name><op:operator pos:line="250" pos:column="61">.</op:operator><name pos:line="250" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="250" pos:column="83">(<argument><expr><name><name pos:line="250" pos:column="84">parts</name><index pos:line="250" pos:column="89">[<expr><lit:literal type="number" pos:line="250" pos:column="90">4</lit:literal> <op:operator pos:line="250" pos:column="92">*</op:operator> <name pos:line="250" pos:column="94">i</name> <op:operator pos:line="250" pos:column="96">+</op:operator> <lit:literal type="number" pos:line="250" pos:column="98">3</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="250" pos:column="101">.</op:operator><call><name pos:line="250" pos:column="102">Clamp</name><argument_list pos:line="250" pos:column="107">(<argument><expr><lit:literal type="number" pos:line="250" pos:column="108">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="250" pos:column="111">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for>

					<return pos:line="253" pos:column="41">return <expr><name pos:line="253" pos:column="48">colors</name></expr>;</return>
				}</block></then></if>

				<return pos:line="256" pos:column="33">return <expr><call><name pos:line="256" pos:column="40">InvalidValueAction</name><argument_list pos:line="256" pos:column="58">(<argument><expr><name pos:line="256" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="258" pos:column="25">else <if pos:line="258" pos:column="30">if <condition pos:line="258" pos:column="33">(<expr><name pos:line="258" pos:column="34">fieldType</name> <op:operator pos:line="258" pos:column="44">==</op:operator> <call><name pos:line="258" pos:column="47">typeof</name><argument_list pos:line="258" pos:column="53">(<argument><expr><name pos:line="258" pos:column="54">HSLColor</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="258" pos:column="64">
			<block pos:line="259" pos:column="25">{
				<if pos:line="260" pos:column="33">if <condition pos:line="260" pos:column="36">(<expr><name pos:line="260" pos:column="37">value</name> <op:operator pos:line="260" pos:column="43">!=</op:operator> <name pos:line="260" pos:column="46">null</name></expr>)</condition><then pos:line="260" pos:column="51">
				<block pos:line="261" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="262" pos:column="41">var</name></type> <name pos:line="262" pos:column="45">parts</name> <init pos:line="262" pos:column="51">= <expr><call><name><name pos:line="262" pos:column="53">value</name><op:operator pos:line="262" pos:column="58">.</op:operator><name pos:line="262" pos:column="59">Split</name></name><argument_list pos:line="262" pos:column="64">(<argument><expr><lit:literal type="char" pos:line="262" pos:column="65">','</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<comment type="line" pos:line="264" pos:column="41">// Allow old ColorRamp format to be parsed as HSLColor</comment>
					<if pos:line="265" pos:column="41">if <condition pos:line="265" pos:column="44">(<expr><name><name pos:line="265" pos:column="45">parts</name><op:operator pos:line="265" pos:column="50">.</op:operator><name pos:line="265" pos:column="51">Length</name></name> <op:operator pos:line="265" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="265" pos:column="61">3</lit:literal> <op:operator pos:line="265" pos:column="63">||</op:operator> <name><name pos:line="265" pos:column="66">parts</name><op:operator pos:line="265" pos:column="71">.</op:operator><name pos:line="265" pos:column="72">Length</name></name> <op:operator pos:line="265" pos:column="79">==</op:operator> <lit:literal type="number" pos:line="265" pos:column="82">4</lit:literal></expr>)</condition><then pos:line="265" pos:column="84">
						<return pos:line="266" pos:column="49">return <expr><op:operator pos:line="266" pos:column="56">new</op:operator> <call><name pos:line="266" pos:column="60">HSLColor</name><argument_list pos:line="266" pos:column="68">(
							<argument><expr><op:operator pos:line="267" pos:column="57">(</op:operator><name pos:line="267" pos:column="58">byte</name><op:operator pos:line="267" pos:column="62">)</op:operator><call><name><name pos:line="267" pos:column="63">Exts</name><op:operator pos:line="267" pos:column="67">.</op:operator><name pos:line="267" pos:column="68">ParseIntegerInvariant</name></name><argument_list pos:line="267" pos:column="89">(<argument><expr><name><name pos:line="267" pos:column="90">parts</name><index pos:line="267" pos:column="95">[<expr><lit:literal type="number" pos:line="267" pos:column="96">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="267" pos:column="99">.</op:operator><call><name pos:line="267" pos:column="100">Clamp</name><argument_list pos:line="267" pos:column="105">(<argument><expr><lit:literal type="number" pos:line="267" pos:column="106">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="267" pos:column="109">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><op:operator pos:line="268" pos:column="57">(</op:operator><name pos:line="268" pos:column="58">byte</name><op:operator pos:line="268" pos:column="62">)</op:operator><call><name><name pos:line="268" pos:column="63">Exts</name><op:operator pos:line="268" pos:column="67">.</op:operator><name pos:line="268" pos:column="68">ParseIntegerInvariant</name></name><argument_list pos:line="268" pos:column="89">(<argument><expr><name><name pos:line="268" pos:column="90">parts</name><index pos:line="268" pos:column="95">[<expr><lit:literal type="number" pos:line="268" pos:column="96">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="268" pos:column="99">.</op:operator><call><name pos:line="268" pos:column="100">Clamp</name><argument_list pos:line="268" pos:column="105">(<argument><expr><lit:literal type="number" pos:line="268" pos:column="106">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="268" pos:column="109">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><op:operator pos:line="269" pos:column="57">(</op:operator><name pos:line="269" pos:column="58">byte</name><op:operator pos:line="269" pos:column="62">)</op:operator><call><name><name pos:line="269" pos:column="63">Exts</name><op:operator pos:line="269" pos:column="67">.</op:operator><name pos:line="269" pos:column="68">ParseIntegerInvariant</name></name><argument_list pos:line="269" pos:column="89">(<argument><expr><name><name pos:line="269" pos:column="90">parts</name><index pos:line="269" pos:column="95">[<expr><lit:literal type="number" pos:line="269" pos:column="96">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="269" pos:column="99">.</op:operator><call><name pos:line="269" pos:column="100">Clamp</name><argument_list pos:line="269" pos:column="105">(<argument><expr><lit:literal type="number" pos:line="269" pos:column="106">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="269" pos:column="109">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
				}</block></then></if>

				<return pos:line="272" pos:column="33">return <expr><call><name pos:line="272" pos:column="40">InvalidValueAction</name><argument_list pos:line="272" pos:column="58">(<argument><expr><name pos:line="272" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="274" pos:column="25">else <if pos:line="274" pos:column="30">if <condition pos:line="274" pos:column="33">(<expr><name pos:line="274" pos:column="34">fieldType</name> <op:operator pos:line="274" pos:column="44">==</op:operator> <call><name pos:line="274" pos:column="47">typeof</name><argument_list pos:line="274" pos:column="53">(<argument><expr><name pos:line="274" pos:column="54">Hotkey</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="274" pos:column="62">
			<block pos:line="275" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="276" pos:column="33">Hotkey</name></type> <name pos:line="276" pos:column="40">res</name></decl>;</decl_stmt>
				<if pos:line="277" pos:column="33">if <condition pos:line="277" pos:column="36">(<expr><call><name><name pos:line="277" pos:column="37">Hotkey</name><op:operator pos:line="277" pos:column="43">.</op:operator><name pos:line="277" pos:column="44">TryParse</name></name><argument_list pos:line="277" pos:column="52">(<argument><expr><name pos:line="277" pos:column="53">value</name></expr></argument>, <argument><expr pos:line="277" pos:column="60">out <name pos:line="277" pos:column="64">res</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="277" pos:column="69">
					<return pos:line="278" pos:column="41">return <expr><name pos:line="278" pos:column="48">res</name></expr>;</return></then></if>

				<return pos:line="280" pos:column="33">return <expr><call><name pos:line="280" pos:column="40">InvalidValueAction</name><argument_list pos:line="280" pos:column="58">(<argument><expr><name pos:line="280" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="280" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="280" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="282" pos:column="25">else <if pos:line="282" pos:column="30">if <condition pos:line="282" pos:column="33">(<expr><name pos:line="282" pos:column="34">fieldType</name> <op:operator pos:line="282" pos:column="44">==</op:operator> <call><name pos:line="282" pos:column="47">typeof</name><argument_list pos:line="282" pos:column="53">(<argument><expr><name pos:line="282" pos:column="54">WDist</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="282" pos:column="61">
			<block pos:line="283" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="284" pos:column="33">WDist</name></type> <name pos:line="284" pos:column="39">res</name></decl>;</decl_stmt>
				<if pos:line="285" pos:column="33">if <condition pos:line="285" pos:column="36">(<expr><call><name><name pos:line="285" pos:column="37">WDist</name><op:operator pos:line="285" pos:column="42">.</op:operator><name pos:line="285" pos:column="43">TryParse</name></name><argument_list pos:line="285" pos:column="51">(<argument><expr><name pos:line="285" pos:column="52">value</name></expr></argument>, <argument><expr pos:line="285" pos:column="59">out <name pos:line="285" pos:column="63">res</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="285" pos:column="68">
					<return pos:line="286" pos:column="41">return <expr><name pos:line="286" pos:column="48">res</name></expr>;</return></then></if>

				<return pos:line="288" pos:column="33">return <expr><call><name pos:line="288" pos:column="40">InvalidValueAction</name><argument_list pos:line="288" pos:column="58">(<argument><expr><name pos:line="288" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="290" pos:column="25">else <if pos:line="290" pos:column="30">if <condition pos:line="290" pos:column="33">(<expr><name pos:line="290" pos:column="34">fieldType</name> <op:operator pos:line="290" pos:column="44">==</op:operator> <call><name pos:line="290" pos:column="47">typeof</name><argument_list pos:line="290" pos:column="53">(<argument><expr><name pos:line="290" pos:column="54">WVec</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="290" pos:column="60">
			<block pos:line="291" pos:column="25">{
				<if pos:line="292" pos:column="33">if <condition pos:line="292" pos:column="36">(<expr><name pos:line="292" pos:column="37">value</name> <op:operator pos:line="292" pos:column="43">!=</op:operator> <name pos:line="292" pos:column="46">null</name></expr>)</condition><then pos:line="292" pos:column="51">
				<block pos:line="293" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="294" pos:column="41">var</name></type> <name pos:line="294" pos:column="45">parts</name> <init pos:line="294" pos:column="51">= <expr><call><name><name pos:line="294" pos:column="53">value</name><op:operator pos:line="294" pos:column="58">.</op:operator><name pos:line="294" pos:column="59">Split</name></name><argument_list pos:line="294" pos:column="64">(<argument><expr><lit:literal type="char" pos:line="294" pos:column="65">','</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="295" pos:column="41">if <condition pos:line="295" pos:column="44">(<expr><name><name pos:line="295" pos:column="45">parts</name><op:operator pos:line="295" pos:column="50">.</op:operator><name pos:line="295" pos:column="51">Length</name></name> <op:operator pos:line="295" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="295" pos:column="61">3</lit:literal></expr>)</condition><then pos:line="295" pos:column="63">
					<block pos:line="296" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="297" pos:column="49">WDist</name></type> <name pos:line="297" pos:column="55">rx</name></decl><op:operator pos:line="297" pos:column="57">,</op:operator> <decl><type ref="prev"/><name pos:line="297" pos:column="59">ry</name></decl><op:operator pos:line="297" pos:column="61">,</op:operator> <decl><type ref="prev"/><name pos:line="297" pos:column="63">rz</name></decl>;</decl_stmt>
						<if pos:line="298" pos:column="49">if <condition pos:line="298" pos:column="52">(<expr><call><name><name pos:line="298" pos:column="53">WDist</name><op:operator pos:line="298" pos:column="58">.</op:operator><name pos:line="298" pos:column="59">TryParse</name></name><argument_list pos:line="298" pos:column="67">(<argument><expr><name><name pos:line="298" pos:column="68">parts</name><index pos:line="298" pos:column="73">[<expr><lit:literal type="number" pos:line="298" pos:column="74">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="298" pos:column="78">out <name pos:line="298" pos:column="82">rx</name></expr></argument>)</argument_list></call> <op:operator pos:line="298" pos:column="86">&amp;&amp;</op:operator> <call><name><name pos:line="298" pos:column="89">WDist</name><op:operator pos:line="298" pos:column="94">.</op:operator><name pos:line="298" pos:column="95">TryParse</name></name><argument_list pos:line="298" pos:column="103">(<argument><expr><name><name pos:line="298" pos:column="104">parts</name><index pos:line="298" pos:column="109">[<expr><lit:literal type="number" pos:line="298" pos:column="110">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="298" pos:column="114">out <name pos:line="298" pos:column="118">ry</name></expr></argument>)</argument_list></call> <op:operator pos:line="298" pos:column="122">&amp;&amp;</op:operator> <call><name><name pos:line="298" pos:column="125">WDist</name><op:operator pos:line="298" pos:column="130">.</op:operator><name pos:line="298" pos:column="131">TryParse</name></name><argument_list pos:line="298" pos:column="139">(<argument><expr><name><name pos:line="298" pos:column="140">parts</name><index pos:line="298" pos:column="145">[<expr><lit:literal type="number" pos:line="298" pos:column="146">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="298" pos:column="150">out <name pos:line="298" pos:column="154">rz</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="298" pos:column="158">
							<return pos:line="299" pos:column="57">return <expr><op:operator pos:line="299" pos:column="64">new</op:operator> <call><name pos:line="299" pos:column="68">WVec</name><argument_list pos:line="299" pos:column="72">(<argument><expr><name pos:line="299" pos:column="73">rx</name></expr></argument>, <argument><expr><name pos:line="299" pos:column="77">ry</name></expr></argument>, <argument><expr><name pos:line="299" pos:column="81">rz</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
					}</block></then></if>
				}</block></then></if>

				<return pos:line="303" pos:column="33">return <expr><call><name pos:line="303" pos:column="40">InvalidValueAction</name><argument_list pos:line="303" pos:column="58">(<argument><expr><name pos:line="303" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="303" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="303" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="305" pos:column="25">else <if pos:line="305" pos:column="30">if <condition pos:line="305" pos:column="33">(<expr><name pos:line="305" pos:column="34">fieldType</name> <op:operator pos:line="305" pos:column="44">==</op:operator> <call><name pos:line="305" pos:column="47">typeof</name><argument_list pos:line="305" pos:column="53">(<argument><expr><name><name pos:line="305" pos:column="54">WVec</name><index pos:line="305" pos:column="58">[]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="305" pos:column="62">
			<block pos:line="306" pos:column="25">{
				<if pos:line="307" pos:column="33">if <condition pos:line="307" pos:column="36">(<expr><name pos:line="307" pos:column="37">value</name> <op:operator pos:line="307" pos:column="43">!=</op:operator> <name pos:line="307" pos:column="46">null</name></expr>)</condition><then pos:line="307" pos:column="51">
				<block pos:line="308" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="309" pos:column="41">var</name></type> <name pos:line="309" pos:column="45">parts</name> <init pos:line="309" pos:column="51">= <expr><call><name><name pos:line="309" pos:column="53">value</name><op:operator pos:line="309" pos:column="58">.</op:operator><name pos:line="309" pos:column="59">Split</name></name><argument_list pos:line="309" pos:column="64">(<argument><expr><lit:literal type="char" pos:line="309" pos:column="65">','</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if pos:line="311" pos:column="41">if <condition pos:line="311" pos:column="44">(<expr><name><name pos:line="311" pos:column="45">parts</name><op:operator pos:line="311" pos:column="50">.</op:operator><name pos:line="311" pos:column="51">Length</name></name> <op:operator pos:line="311" pos:column="58">%</op:operator> <lit:literal type="number" pos:line="311" pos:column="60">3</lit:literal> <op:operator pos:line="311" pos:column="62">!=</op:operator> <lit:literal type="number" pos:line="311" pos:column="65">0</lit:literal></expr>)</condition><then pos:line="311" pos:column="67">
						<return pos:line="312" pos:column="49">return <expr><call><name pos:line="312" pos:column="56">InvalidValueAction</name><argument_list pos:line="312" pos:column="74">(<argument><expr><name pos:line="312" pos:column="75">value</name></expr></argument>, <argument><expr><name pos:line="312" pos:column="82">fieldType</name></expr></argument>, <argument><expr><name pos:line="312" pos:column="93">fieldName</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

					<decl_stmt><decl><type><name pos:line="314" pos:column="41">var</name></type> <name pos:line="314" pos:column="45">vecs</name> <init pos:line="314" pos:column="50">= <expr><op:operator pos:line="314" pos:column="52">new</op:operator> <name><name pos:line="314" pos:column="56">WVec</name><index pos:line="314" pos:column="60">[<expr><name><name pos:line="314" pos:column="61">parts</name><op:operator pos:line="314" pos:column="66">.</op:operator><name pos:line="314" pos:column="67">Length</name></name> <op:operator pos:line="314" pos:column="74">/</op:operator> <lit:literal type="number" pos:line="314" pos:column="76">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

					<for pos:line="316" pos:column="41">for (<init><decl><type><name pos:line="316" pos:column="46">var</name></type> <name pos:line="316" pos:column="50">i</name> <init pos:line="316" pos:column="52">= <expr><lit:literal type="number" pos:line="316" pos:column="54">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="316" pos:column="57">i</name> <op:operator pos:line="316" pos:column="59">&lt;</op:operator> <name><name pos:line="316" pos:column="61">vecs</name><op:operator pos:line="316" pos:column="65">.</op:operator><name pos:line="316" pos:column="66">Length</name></name></expr>;</condition> <incr><expr><op:operator pos:line="316" pos:column="74">++</op:operator><name pos:line="316" pos:column="76">i</name></expr></incr>)
					<block pos:line="317" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="318" pos:column="49">WDist</name></type> <name pos:line="318" pos:column="55">rx</name></decl><op:operator pos:line="318" pos:column="57">,</op:operator> <decl><type ref="prev"/><name pos:line="318" pos:column="59">ry</name></decl><op:operator pos:line="318" pos:column="61">,</op:operator> <decl><type ref="prev"/><name pos:line="318" pos:column="63">rz</name></decl>;</decl_stmt>
						<if pos:line="319" pos:column="49">if <condition pos:line="319" pos:column="52">(<expr><call><name><name pos:line="319" pos:column="53">WDist</name><op:operator pos:line="319" pos:column="58">.</op:operator><name pos:line="319" pos:column="59">TryParse</name></name><argument_list pos:line="319" pos:column="67">(<argument><expr><name><name pos:line="319" pos:column="68">parts</name><index pos:line="319" pos:column="73">[<expr><lit:literal type="number" pos:line="319" pos:column="74">3</lit:literal> <op:operator pos:line="319" pos:column="76">*</op:operator> <name pos:line="319" pos:column="78">i</name></expr>]</index></name></expr></argument>, <argument><expr pos:line="319" pos:column="82">out <name pos:line="319" pos:column="86">rx</name></expr></argument>)</argument_list></call> <op:operator pos:line="319" pos:column="90">&amp;&amp;</op:operator> <call><name><name pos:line="319" pos:column="93">WDist</name><op:operator pos:line="319" pos:column="98">.</op:operator><name pos:line="319" pos:column="99">TryParse</name></name><argument_list pos:line="319" pos:column="107">(<argument><expr><name><name pos:line="319" pos:column="108">parts</name><index pos:line="319" pos:column="113">[<expr><lit:literal type="number" pos:line="319" pos:column="114">3</lit:literal> <op:operator pos:line="319" pos:column="116">*</op:operator> <name pos:line="319" pos:column="118">i</name> <op:operator pos:line="319" pos:column="120">+</op:operator> <lit:literal type="number" pos:line="319" pos:column="122">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="319" pos:column="126">out <name pos:line="319" pos:column="130">ry</name></expr></argument>)</argument_list></call> <op:operator pos:line="319" pos:column="134">&amp;&amp;</op:operator> <call><name><name pos:line="319" pos:column="137">WDist</name><op:operator pos:line="319" pos:column="142">.</op:operator><name pos:line="319" pos:column="143">TryParse</name></name><argument_list pos:line="319" pos:column="151">(<argument><expr><name><name pos:line="319" pos:column="152">parts</name><index pos:line="319" pos:column="157">[<expr><lit:literal type="number" pos:line="319" pos:column="158">3</lit:literal> <op:operator pos:line="319" pos:column="160">*</op:operator> <name pos:line="319" pos:column="162">i</name> <op:operator pos:line="319" pos:column="164">+</op:operator> <lit:literal type="number" pos:line="319" pos:column="166">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="319" pos:column="170">out <name pos:line="319" pos:column="174">rz</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="319" pos:column="178">
							<expr_stmt><expr><name><name pos:line="320" pos:column="57">vecs</name><index pos:line="320" pos:column="61">[<expr><name pos:line="320" pos:column="62">i</name></expr>]</index></name> <op:operator pos:line="320" pos:column="65">=</op:operator> <op:operator pos:line="320" pos:column="67">new</op:operator> <call><name pos:line="320" pos:column="71">WVec</name><argument_list pos:line="320" pos:column="75">(<argument><expr><name pos:line="320" pos:column="76">rx</name></expr></argument>, <argument><expr><name pos:line="320" pos:column="80">ry</name></expr></argument>, <argument><expr><name pos:line="320" pos:column="84">rz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					}</block></for>

					<return pos:line="323" pos:column="41">return <expr><name pos:line="323" pos:column="48">vecs</name></expr>;</return>
				}</block></then></if>

				<return pos:line="326" pos:column="33">return <expr><call><name pos:line="326" pos:column="40">InvalidValueAction</name><argument_list pos:line="326" pos:column="58">(<argument><expr><name pos:line="326" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="326" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="326" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="328" pos:column="25">else <if pos:line="328" pos:column="30">if <condition pos:line="328" pos:column="33">(<expr><name pos:line="328" pos:column="34">fieldType</name> <op:operator pos:line="328" pos:column="44">==</op:operator> <call><name pos:line="328" pos:column="47">typeof</name><argument_list pos:line="328" pos:column="53">(<argument><expr><name pos:line="328" pos:column="54">WPos</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="328" pos:column="60">
			<block pos:line="329" pos:column="25">{
				<if pos:line="330" pos:column="33">if <condition pos:line="330" pos:column="36">(<expr><name pos:line="330" pos:column="37">value</name> <op:operator pos:line="330" pos:column="43">!=</op:operator> <name pos:line="330" pos:column="46">null</name></expr>)</condition><then pos:line="330" pos:column="51">
				<block pos:line="331" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="332" pos:column="41">var</name></type> <name pos:line="332" pos:column="45">parts</name> <init pos:line="332" pos:column="51">= <expr><call><name><name pos:line="332" pos:column="53">value</name><op:operator pos:line="332" pos:column="58">.</op:operator><name pos:line="332" pos:column="59">Split</name></name><argument_list pos:line="332" pos:column="64">(<argument><expr><lit:literal type="char" pos:line="332" pos:column="65">','</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="333" pos:column="41">if <condition pos:line="333" pos:column="44">(<expr><name><name pos:line="333" pos:column="45">parts</name><op:operator pos:line="333" pos:column="50">.</op:operator><name pos:line="333" pos:column="51">Length</name></name> <op:operator pos:line="333" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="333" pos:column="61">3</lit:literal></expr>)</condition><then pos:line="333" pos:column="63">
					<block pos:line="334" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="335" pos:column="49">WDist</name></type> <name pos:line="335" pos:column="55">rx</name></decl><op:operator pos:line="335" pos:column="57">,</op:operator> <decl><type ref="prev"/><name pos:line="335" pos:column="59">ry</name></decl><op:operator pos:line="335" pos:column="61">,</op:operator> <decl><type ref="prev"/><name pos:line="335" pos:column="63">rz</name></decl>;</decl_stmt>
						<if pos:line="336" pos:column="49">if <condition pos:line="336" pos:column="52">(<expr><call><name><name pos:line="336" pos:column="53">WDist</name><op:operator pos:line="336" pos:column="58">.</op:operator><name pos:line="336" pos:column="59">TryParse</name></name><argument_list pos:line="336" pos:column="67">(<argument><expr><name><name pos:line="336" pos:column="68">parts</name><index pos:line="336" pos:column="73">[<expr><lit:literal type="number" pos:line="336" pos:column="74">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="336" pos:column="78">out <name pos:line="336" pos:column="82">rx</name></expr></argument>)</argument_list></call> <op:operator pos:line="336" pos:column="86">&amp;&amp;</op:operator> <call><name><name pos:line="336" pos:column="89">WDist</name><op:operator pos:line="336" pos:column="94">.</op:operator><name pos:line="336" pos:column="95">TryParse</name></name><argument_list pos:line="336" pos:column="103">(<argument><expr><name><name pos:line="336" pos:column="104">parts</name><index pos:line="336" pos:column="109">[<expr><lit:literal type="number" pos:line="336" pos:column="110">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="336" pos:column="114">out <name pos:line="336" pos:column="118">ry</name></expr></argument>)</argument_list></call> <op:operator pos:line="336" pos:column="122">&amp;&amp;</op:operator> <call><name><name pos:line="336" pos:column="125">WDist</name><op:operator pos:line="336" pos:column="130">.</op:operator><name pos:line="336" pos:column="131">TryParse</name></name><argument_list pos:line="336" pos:column="139">(<argument><expr><name><name pos:line="336" pos:column="140">parts</name><index pos:line="336" pos:column="145">[<expr><lit:literal type="number" pos:line="336" pos:column="146">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr pos:line="336" pos:column="150">out <name pos:line="336" pos:column="154">rz</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="336" pos:column="158">
							<return pos:line="337" pos:column="57">return <expr><op:operator pos:line="337" pos:column="64">new</op:operator> <call><name pos:line="337" pos:column="68">WPos</name><argument_list pos:line="337" pos:column="72">(<argument><expr><name pos:line="337" pos:column="73">rx</name></expr></argument>, <argument><expr><name pos:line="337" pos:column="77">ry</name></expr></argument>, <argument><expr><name pos:line="337" pos:column="81">rz</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
					}</block></then></if>
				}</block></then></if>

				<return pos:line="341" pos:column="33">return <expr><call><name pos:line="341" pos:column="40">InvalidValueAction</name><argument_list pos:line="341" pos:column="58">(<argument><expr><name pos:line="341" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="341" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="341" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="343" pos:column="25">else <if pos:line="343" pos:column="30">if <condition pos:line="343" pos:column="33">(<expr><name pos:line="343" pos:column="34">fieldType</name> <op:operator pos:line="343" pos:column="44">==</op:operator> <call><name pos:line="343" pos:column="47">typeof</name><argument_list pos:line="343" pos:column="53">(<argument><expr><name pos:line="343" pos:column="54">WAngle</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="343" pos:column="62">
			<block pos:line="344" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="345" pos:column="33">int</name></type> <name pos:line="345" pos:column="37">res</name></decl>;</decl_stmt>
				<if pos:line="346" pos:column="33">if <condition pos:line="346" pos:column="36">(<expr><call><name><name pos:line="346" pos:column="37">Exts</name><op:operator pos:line="346" pos:column="41">.</op:operator><name pos:line="346" pos:column="42">TryParseIntegerInvariant</name></name><argument_list pos:line="346" pos:column="66">(<argument><expr><name pos:line="346" pos:column="67">value</name></expr></argument>, <argument><expr pos:line="346" pos:column="74">out <name pos:line="346" pos:column="78">res</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="346" pos:column="83">
					<return pos:line="347" pos:column="41">return <expr><op:operator pos:line="347" pos:column="48">new</op:operator> <call><name pos:line="347" pos:column="52">WAngle</name><argument_list pos:line="347" pos:column="58">(<argument><expr><name pos:line="347" pos:column="59">res</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
				<return pos:line="348" pos:column="33">return <expr><call><name pos:line="348" pos:column="40">InvalidValueAction</name><argument_list pos:line="348" pos:column="58">(<argument><expr><name pos:line="348" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="350" pos:column="25">else <if pos:line="350" pos:column="30">if <condition pos:line="350" pos:column="33">(<expr><name pos:line="350" pos:column="34">fieldType</name> <op:operator pos:line="350" pos:column="44">==</op:operator> <call><name pos:line="350" pos:column="47">typeof</name><argument_list pos:line="350" pos:column="53">(<argument><expr><name pos:line="350" pos:column="54">WRot</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="350" pos:column="60">
			<block pos:line="351" pos:column="25">{
				<if pos:line="352" pos:column="33">if <condition pos:line="352" pos:column="36">(<expr><name pos:line="352" pos:column="37">value</name> <op:operator pos:line="352" pos:column="43">!=</op:operator> <name pos:line="352" pos:column="46">null</name></expr>)</condition><then pos:line="352" pos:column="51">
				<block pos:line="353" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="354" pos:column="41">var</name></type> <name pos:line="354" pos:column="45">parts</name> <init pos:line="354" pos:column="51">= <expr><call><name><name pos:line="354" pos:column="53">value</name><op:operator pos:line="354" pos:column="58">.</op:operator><name pos:line="354" pos:column="59">Split</name></name><argument_list pos:line="354" pos:column="64">(<argument><expr><lit:literal type="char" pos:line="354" pos:column="65">','</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="355" pos:column="41">if <condition pos:line="355" pos:column="44">(<expr><name><name pos:line="355" pos:column="45">parts</name><op:operator pos:line="355" pos:column="50">.</op:operator><name pos:line="355" pos:column="51">Length</name></name> <op:operator pos:line="355" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="355" pos:column="61">3</lit:literal></expr>)</condition><then pos:line="355" pos:column="63">
					<block pos:line="356" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="357" pos:column="49">int</name></type> <name pos:line="357" pos:column="53">rr</name></decl><op:operator pos:line="357" pos:column="55">,</op:operator> <decl><type ref="prev"/><name pos:line="357" pos:column="57">rp</name></decl><op:operator pos:line="357" pos:column="59">,</op:operator> <decl><type ref="prev"/><name pos:line="357" pos:column="61">ry</name></decl>;</decl_stmt>
						<if pos:line="358" pos:column="49">if <condition pos:line="358" pos:column="52">(<expr><call><name><name pos:line="358" pos:column="53">Exts</name><op:operator pos:line="358" pos:column="57">.</op:operator><name pos:line="358" pos:column="58">TryParseIntegerInvariant</name></name><argument_list pos:line="358" pos:column="82">(<argument><expr><name pos:line="358" pos:column="83">value</name></expr></argument>, <argument><expr pos:line="358" pos:column="90">out <name pos:line="358" pos:column="94">rr</name></expr></argument>)</argument_list></call> <op:operator pos:line="358" pos:column="98">&amp;&amp;</op:operator> <call><name><name pos:line="358" pos:column="101">Exts</name><op:operator pos:line="358" pos:column="105">.</op:operator><name pos:line="358" pos:column="106">TryParseIntegerInvariant</name></name><argument_list pos:line="358" pos:column="130">(<argument><expr><name pos:line="358" pos:column="131">value</name></expr></argument>, <argument><expr pos:line="358" pos:column="138">out <name pos:line="358" pos:column="142">rp</name></expr></argument>)</argument_list></call> <op:operator pos:line="358" pos:column="146">&amp;&amp;</op:operator> <call><name><name pos:line="358" pos:column="149">Exts</name><op:operator pos:line="358" pos:column="153">.</op:operator><name pos:line="358" pos:column="154">TryParseIntegerInvariant</name></name><argument_list pos:line="358" pos:column="178">(<argument><expr><name pos:line="358" pos:column="179">value</name></expr></argument>, <argument><expr pos:line="358" pos:column="186">out <name pos:line="358" pos:column="190">ry</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="358" pos:column="194">
							<return pos:line="359" pos:column="57">return <expr><op:operator pos:line="359" pos:column="64">new</op:operator> <call><name pos:line="359" pos:column="68">WRot</name><argument_list pos:line="359" pos:column="72">(<argument><expr><op:operator pos:line="359" pos:column="73">new</op:operator> <call><name pos:line="359" pos:column="77">WAngle</name><argument_list pos:line="359" pos:column="83">(<argument><expr><name pos:line="359" pos:column="84">rr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="359" pos:column="89">new</op:operator> <call><name pos:line="359" pos:column="93">WAngle</name><argument_list pos:line="359" pos:column="99">(<argument><expr><name pos:line="359" pos:column="100">rp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="359" pos:column="105">new</op:operator> <call><name pos:line="359" pos:column="109">WAngle</name><argument_list pos:line="359" pos:column="115">(<argument><expr><name pos:line="359" pos:column="116">ry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
					}</block></then></if>
				}</block></then></if>

				<return pos:line="363" pos:column="33">return <expr><call><name pos:line="363" pos:column="40">InvalidValueAction</name><argument_list pos:line="363" pos:column="58">(<argument><expr><name pos:line="363" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="363" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="363" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="365" pos:column="25">else <if pos:line="365" pos:column="30">if <condition pos:line="365" pos:column="33">(<expr><name pos:line="365" pos:column="34">fieldType</name> <op:operator pos:line="365" pos:column="44">==</op:operator> <call><name pos:line="365" pos:column="47">typeof</name><argument_list pos:line="365" pos:column="53">(<argument><expr><name pos:line="365" pos:column="54">CPos</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="365" pos:column="60">
			<block pos:line="366" pos:column="25">{
				<if pos:line="367" pos:column="33">if <condition pos:line="367" pos:column="36">(<expr><name pos:line="367" pos:column="37">value</name> <op:operator pos:line="367" pos:column="43">!=</op:operator> <name pos:line="367" pos:column="46">null</name></expr>)</condition><then pos:line="367" pos:column="51">
				<block pos:line="368" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="369" pos:column="41">var</name></type> <name pos:line="369" pos:column="45">parts</name> <init pos:line="369" pos:column="51">= <expr><call><name><name pos:line="369" pos:column="53">value</name><op:operator pos:line="369" pos:column="58">.</op:operator><name pos:line="369" pos:column="59">Split</name></name><argument_list pos:line="369" pos:column="64">(<argument><expr><op:operator pos:line="369" pos:column="65">new</op:operator> <name><name pos:line="369" pos:column="69">char</name><index pos:line="369" pos:column="73">[]</index></name> <block pos:line="369" pos:column="76">{ <expr><lit:literal type="char" pos:line="369" pos:column="78">','</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="369" pos:column="85">StringSplitOptions</name><op:operator pos:line="369" pos:column="103">.</op:operator><name pos:line="369" pos:column="104">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<return pos:line="370" pos:column="41">return <expr><op:operator pos:line="370" pos:column="48">new</op:operator> <call><name pos:line="370" pos:column="52">CPos</name><argument_list pos:line="370" pos:column="56">(<argument><expr><call><name><name pos:line="370" pos:column="57">Exts</name><op:operator pos:line="370" pos:column="61">.</op:operator><name pos:line="370" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="370" pos:column="83">(<argument><expr><name><name pos:line="370" pos:column="84">parts</name><index pos:line="370" pos:column="89">[<expr><lit:literal type="number" pos:line="370" pos:column="90">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="370" pos:column="95">Exts</name><op:operator pos:line="370" pos:column="99">.</op:operator><name pos:line="370" pos:column="100">ParseIntegerInvariant</name></name><argument_list pos:line="370" pos:column="121">(<argument><expr><name><name pos:line="370" pos:column="122">parts</name><index pos:line="370" pos:column="127">[<expr><lit:literal type="number" pos:line="370" pos:column="128">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
				}</block></then></if>

				<return pos:line="373" pos:column="33">return <expr><call><name pos:line="373" pos:column="40">InvalidValueAction</name><argument_list pos:line="373" pos:column="58">(<argument><expr><name pos:line="373" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="375" pos:column="25">else <if pos:line="375" pos:column="30">if <condition pos:line="375" pos:column="33">(<expr><name pos:line="375" pos:column="34">fieldType</name> <op:operator pos:line="375" pos:column="44">==</op:operator> <call><name pos:line="375" pos:column="47">typeof</name><argument_list pos:line="375" pos:column="53">(<argument><expr><name pos:line="375" pos:column="54">CVec</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="375" pos:column="60">
			<block pos:line="376" pos:column="25">{
				<if pos:line="377" pos:column="33">if <condition pos:line="377" pos:column="36">(<expr><name pos:line="377" pos:column="37">value</name> <op:operator pos:line="377" pos:column="43">!=</op:operator> <name pos:line="377" pos:column="46">null</name></expr>)</condition><then pos:line="377" pos:column="51">
				<block pos:line="378" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="379" pos:column="41">var</name></type> <name pos:line="379" pos:column="45">parts</name> <init pos:line="379" pos:column="51">= <expr><call><name><name pos:line="379" pos:column="53">value</name><op:operator pos:line="379" pos:column="58">.</op:operator><name pos:line="379" pos:column="59">Split</name></name><argument_list pos:line="379" pos:column="64">(<argument><expr><op:operator pos:line="379" pos:column="65">new</op:operator> <name><name pos:line="379" pos:column="69">char</name><index pos:line="379" pos:column="73">[]</index></name> <block pos:line="379" pos:column="76">{ <expr><lit:literal type="char" pos:line="379" pos:column="78">','</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="379" pos:column="85">StringSplitOptions</name><op:operator pos:line="379" pos:column="103">.</op:operator><name pos:line="379" pos:column="104">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<return pos:line="380" pos:column="41">return <expr><op:operator pos:line="380" pos:column="48">new</op:operator> <call><name pos:line="380" pos:column="52">CVec</name><argument_list pos:line="380" pos:column="56">(<argument><expr><call><name><name pos:line="380" pos:column="57">Exts</name><op:operator pos:line="380" pos:column="61">.</op:operator><name pos:line="380" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="380" pos:column="83">(<argument><expr><name><name pos:line="380" pos:column="84">parts</name><index pos:line="380" pos:column="89">[<expr><lit:literal type="number" pos:line="380" pos:column="90">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="380" pos:column="95">Exts</name><op:operator pos:line="380" pos:column="99">.</op:operator><name pos:line="380" pos:column="100">ParseIntegerInvariant</name></name><argument_list pos:line="380" pos:column="121">(<argument><expr><name><name pos:line="380" pos:column="122">parts</name><index pos:line="380" pos:column="127">[<expr><lit:literal type="number" pos:line="380" pos:column="128">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
				}</block></then></if>

				<return pos:line="383" pos:column="33">return <expr><call><name pos:line="383" pos:column="40">InvalidValueAction</name><argument_list pos:line="383" pos:column="58">(<argument><expr><name pos:line="383" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="383" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="383" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="385" pos:column="25">else <if pos:line="385" pos:column="30">if <condition pos:line="385" pos:column="33">(<expr><name><name pos:line="385" pos:column="34">fieldType</name><op:operator pos:line="385" pos:column="43">.</op:operator><name pos:line="385" pos:column="44">IsEnum</name></name></expr>)</condition><then pos:line="385" pos:column="51">
			<block pos:line="386" pos:column="25">{
				<try pos:line="387" pos:column="33">try
				<block pos:line="388" pos:column="33">{
					<return pos:line="389" pos:column="41">return <expr><call><name><name pos:line="389" pos:column="48">Enum</name><op:operator pos:line="389" pos:column="52">.</op:operator><name pos:line="389" pos:column="53">Parse</name></name><argument_list pos:line="389" pos:column="58">(<argument><expr><name pos:line="389" pos:column="59">fieldType</name></expr></argument>, <argument><expr><name pos:line="389" pos:column="70">value</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="389" pos:column="77">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
				}</block>
				<catch pos:line="391" pos:column="33">catch <parameter_list pos:line="391" pos:column="39">(<param><decl><type><name pos:line="391" pos:column="40">ArgumentException</name></type></decl></param>)</parameter_list>
				<block pos:line="392" pos:column="33">{
					<return pos:line="393" pos:column="41">return <expr><call><name pos:line="393" pos:column="48">InvalidValueAction</name><argument_list pos:line="393" pos:column="66">(<argument><expr><name pos:line="393" pos:column="67">value</name></expr></argument>, <argument><expr><name pos:line="393" pos:column="74">fieldType</name></expr></argument>, <argument><expr><name pos:line="393" pos:column="85">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
				}</block></catch></try>
			}</block></then>
			<else pos:line="396" pos:column="25">else <if pos:line="396" pos:column="30">if <condition pos:line="396" pos:column="33">(<expr><name pos:line="396" pos:column="34">fieldType</name> <op:operator pos:line="396" pos:column="44">==</op:operator> <call><name pos:line="396" pos:column="47">typeof</name><argument_list pos:line="396" pos:column="53">(<argument><expr><name pos:line="396" pos:column="54">ImageFormat</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="396" pos:column="67">
			<block pos:line="397" pos:column="25">{
				<if pos:line="398" pos:column="33">if <condition pos:line="398" pos:column="36">(<expr><name pos:line="398" pos:column="37">value</name> <op:operator pos:line="398" pos:column="43">!=</op:operator> <name pos:line="398" pos:column="46">null</name></expr>)</condition><then pos:line="398" pos:column="51">
				<block pos:line="399" pos:column="33">{
					<switch pos:line="400" pos:column="41">switch <condition pos:line="400" pos:column="48">(<expr><call><name><name pos:line="400" pos:column="49">value</name><op:operator pos:line="400" pos:column="54">.</op:operator><name pos:line="400" pos:column="55">ToLowerInvariant</name></name><argument_list pos:line="400" pos:column="71">()</argument_list></call></expr>)</condition>
					<block pos:line="401" pos:column="41">{
					<case pos:line="402" pos:column="41">case <expr><lit:literal type="string" pos:line="402" pos:column="46">"bmp"</lit:literal></expr>:
						<return pos:line="403" pos:column="49">return <expr><name><name pos:line="403" pos:column="56">ImageFormat</name><op:operator pos:line="403" pos:column="67">.</op:operator><name pos:line="403" pos:column="68">Bmp</name></name></expr>;</return>
					</case><case pos:line="404" pos:column="41">case <expr><lit:literal type="string" pos:line="404" pos:column="46">"gif"</lit:literal></expr>:
						<return pos:line="405" pos:column="49">return <expr><name><name pos:line="405" pos:column="56">ImageFormat</name><op:operator pos:line="405" pos:column="67">.</op:operator><name pos:line="405" pos:column="68">Gif</name></name></expr>;</return>
					</case><case pos:line="406" pos:column="41">case <expr><lit:literal type="string" pos:line="406" pos:column="46">"jpg"</lit:literal></expr>:
					</case><case pos:line="407" pos:column="41">case <expr><lit:literal type="string" pos:line="407" pos:column="46">"jpeg"</lit:literal></expr>:
						<return pos:line="408" pos:column="49">return <expr><name><name pos:line="408" pos:column="56">ImageFormat</name><op:operator pos:line="408" pos:column="67">.</op:operator><name pos:line="408" pos:column="68">Jpeg</name></name></expr>;</return>
					</case><case pos:line="409" pos:column="41">case <expr><lit:literal type="string" pos:line="409" pos:column="46">"tif"</lit:literal></expr>:
					</case><case pos:line="410" pos:column="41">case <expr><lit:literal type="string" pos:line="410" pos:column="46">"tiff"</lit:literal></expr>:
						<return pos:line="411" pos:column="49">return <expr><name><name pos:line="411" pos:column="56">ImageFormat</name><op:operator pos:line="411" pos:column="67">.</op:operator><name pos:line="411" pos:column="68">Tiff</name></name></expr>;</return>
					</case><default pos:line="412" pos:column="41">default:
						<return pos:line="413" pos:column="49">return <expr><name><name pos:line="413" pos:column="56">ImageFormat</name><op:operator pos:line="413" pos:column="67">.</op:operator><name pos:line="413" pos:column="68">Png</name></name></expr>;</return>
					</default>}</block></switch>
				}</block></then></if>

				<return pos:line="417" pos:column="33">return <expr><call><name pos:line="417" pos:column="40">InvalidValueAction</name><argument_list pos:line="417" pos:column="58">(<argument><expr><name pos:line="417" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="419" pos:column="25">else <if pos:line="419" pos:column="30">if <condition pos:line="419" pos:column="33">(<expr><name pos:line="419" pos:column="34">fieldType</name> <op:operator pos:line="419" pos:column="44">==</op:operator> <call><name pos:line="419" pos:column="47">typeof</name><argument_list pos:line="419" pos:column="53">(<argument><expr><name pos:line="419" pos:column="54">bool</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="419" pos:column="60">
				<return pos:line="420" pos:column="33">return <expr><call><name pos:line="420" pos:column="40">ParseYesNo</name><argument_list pos:line="420" pos:column="50">(<argument><expr><name pos:line="420" pos:column="51">value</name></expr></argument>, <argument><expr><name pos:line="420" pos:column="58">fieldType</name></expr></argument>, <argument><expr><name pos:line="420" pos:column="69">fieldName</name></expr></argument>)</argument_list></call></expr>;</return></then>
			<else pos:line="421" pos:column="25">else <if pos:line="421" pos:column="30">if <condition pos:line="421" pos:column="33">(<expr><name><name pos:line="421" pos:column="34">fieldType</name><op:operator pos:line="421" pos:column="43">.</op:operator><name pos:line="421" pos:column="44">IsArray</name> <type:modifier pos:line="421" pos:column="52">&amp;&amp;</type:modifier></name> <call><name><name pos:line="421" pos:column="55">fieldType</name><op:operator pos:line="421" pos:column="64">.</op:operator><name pos:line="421" pos:column="65">GetArrayRank</name></name><argument_list pos:line="421" pos:column="77">()</argument_list></call> <op:operator pos:line="421" pos:column="80">==</op:operator> <lit:literal type="number" pos:line="421" pos:column="83">1</lit:literal></expr>)</condition><then pos:line="421" pos:column="85">
			<block pos:line="422" pos:column="25">{
				<if pos:line="423" pos:column="33">if <condition pos:line="423" pos:column="36">(<expr><name pos:line="423" pos:column="37">value</name> <op:operator pos:line="423" pos:column="43">==</op:operator> <name pos:line="423" pos:column="46">null</name></expr>)</condition><then pos:line="423" pos:column="51">
					<return pos:line="424" pos:column="41">return <expr><call><name><name pos:line="424" pos:column="48">Array</name><op:operator pos:line="424" pos:column="53">.</op:operator><name pos:line="424" pos:column="54">CreateInstance</name></name><argument_list pos:line="424" pos:column="68">(<argument><expr><call><name><name pos:line="424" pos:column="69">fieldType</name><op:operator pos:line="424" pos:column="78">.</op:operator><name pos:line="424" pos:column="79">GetElementType</name></name><argument_list pos:line="424" pos:column="93">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="424" pos:column="97">0</lit:literal></expr></argument>)</argument_list></call></expr>;</return></then></if>

				<decl_stmt><decl><type><name pos:line="426" pos:column="33">var</name></type> <name pos:line="426" pos:column="37">parts</name> <init pos:line="426" pos:column="43">= <expr><call><name><name pos:line="426" pos:column="45">value</name><op:operator pos:line="426" pos:column="50">.</op:operator><name pos:line="426" pos:column="51">Split</name></name><argument_list pos:line="426" pos:column="56">(<argument><expr><op:operator pos:line="426" pos:column="57">new</op:operator> <name><name pos:line="426" pos:column="61">char</name><index pos:line="426" pos:column="65">[]</index></name> <block pos:line="426" pos:column="68">{ <expr><lit:literal type="char" pos:line="426" pos:column="70">','</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="426" pos:column="77">StringSplitOptions</name><op:operator pos:line="426" pos:column="95">.</op:operator><name pos:line="426" pos:column="96">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name pos:line="428" pos:column="33">var</name></type> <name pos:line="428" pos:column="37">ret</name> <init pos:line="428" pos:column="41">= <expr><call><name><name pos:line="428" pos:column="43">Array</name><op:operator pos:line="428" pos:column="48">.</op:operator><name pos:line="428" pos:column="49">CreateInstance</name></name><argument_list pos:line="428" pos:column="63">(<argument><expr><call><name><name pos:line="428" pos:column="64">fieldType</name><op:operator pos:line="428" pos:column="73">.</op:operator><name pos:line="428" pos:column="74">GetElementType</name></name><argument_list pos:line="428" pos:column="88">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="428" pos:column="92">parts</name><op:operator pos:line="428" pos:column="97">.</op:operator><name pos:line="428" pos:column="98">Length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<for pos:line="429" pos:column="33">for (<init><decl><type><name pos:line="429" pos:column="38">var</name></type> <name pos:line="429" pos:column="42">i</name> <init pos:line="429" pos:column="44">= <expr><lit:literal type="number" pos:line="429" pos:column="46">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="429" pos:column="49">i</name> <op:operator pos:line="429" pos:column="51">&lt;</op:operator> <name><name pos:line="429" pos:column="53">parts</name><op:operator pos:line="429" pos:column="58">.</op:operator><name pos:line="429" pos:column="59">Length</name></name></expr>;</condition> <incr><expr><name pos:line="429" pos:column="67">i</name><op:operator pos:line="429" pos:column="68">++</op:operator></expr></incr>)
					<expr_stmt><expr><call><name><name pos:line="430" pos:column="41">ret</name><op:operator pos:line="430" pos:column="44">.</op:operator><name pos:line="430" pos:column="45">SetValue</name></name><argument_list pos:line="430" pos:column="53">(<argument><expr><call><name pos:line="430" pos:column="54">GetValue</name><argument_list pos:line="430" pos:column="62">(<argument><expr><name pos:line="430" pos:column="63">fieldName</name></expr></argument>, <argument><expr><call><name><name pos:line="430" pos:column="74">fieldType</name><op:operator pos:line="430" pos:column="83">.</op:operator><name pos:line="430" pos:column="84">GetElementType</name></name><argument_list pos:line="430" pos:column="98">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="430" pos:column="102">parts</name><index pos:line="430" pos:column="107">[<expr><name pos:line="430" pos:column="108">i</name></expr>]</index></name><op:operator pos:line="430" pos:column="110">.</op:operator><call><name pos:line="430" pos:column="111">Trim</name><argument_list pos:line="430" pos:column="115">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="430" pos:column="119">field</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="430" pos:column="127">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
				<return pos:line="431" pos:column="33">return <expr><name pos:line="431" pos:column="40">ret</name></expr>;</return>
			}</block></then>
			<else pos:line="433" pos:column="25">else <if pos:line="433" pos:column="30">if <condition pos:line="433" pos:column="33">(<expr><name><name pos:line="433" pos:column="34">fieldType</name><op:operator pos:line="433" pos:column="43">.</op:operator><name pos:line="433" pos:column="44">IsGenericType</name> <type:modifier pos:line="433" pos:column="58">&amp;&amp;</type:modifier></name> <call><name><name pos:line="433" pos:column="61">fieldType</name><op:operator pos:line="433" pos:column="70">.</op:operator><name pos:line="433" pos:column="71">GetGenericTypeDefinition</name></name><argument_list pos:line="433" pos:column="95">()</argument_list></call> <op:operator pos:line="433" pos:column="98">==</op:operator> <call><name pos:line="433" pos:column="101">typeof</name><argument_list pos:line="433" pos:column="107">(<argument><expr><name><name pos:line="433" pos:column="108">HashSet</name><argument_list pos:line="433" pos:column="115">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="433" pos:column="119">
			<block pos:line="434" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="435" pos:column="33">var</name></type> <name pos:line="435" pos:column="37">set</name> <init pos:line="435" pos:column="41">= <expr><call><name><name pos:line="435" pos:column="43">Activator</name><op:operator pos:line="435" pos:column="52">.</op:operator><name pos:line="435" pos:column="53">CreateInstance</name></name><argument_list pos:line="435" pos:column="67">(<argument><expr><name pos:line="435" pos:column="68">fieldType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="436" pos:column="33">if <condition pos:line="436" pos:column="36">(<expr><name pos:line="436" pos:column="37">value</name> <op:operator pos:line="436" pos:column="43">==</op:operator> <name pos:line="436" pos:column="46">null</name></expr>)</condition><then pos:line="436" pos:column="51">
					<return pos:line="437" pos:column="41">return <expr><name pos:line="437" pos:column="48">set</name></expr>;</return></then></if>

				<decl_stmt><decl><type><name pos:line="439" pos:column="33">var</name></type> <name pos:line="439" pos:column="37">parts</name> <init pos:line="439" pos:column="43">= <expr><call><name><name pos:line="439" pos:column="45">value</name><op:operator pos:line="439" pos:column="50">.</op:operator><name pos:line="439" pos:column="51">Split</name></name><argument_list pos:line="439" pos:column="56">(<argument><expr><op:operator pos:line="439" pos:column="57">new</op:operator> <name><name pos:line="439" pos:column="61">char</name><index pos:line="439" pos:column="65">[]</index></name> <block pos:line="439" pos:column="68">{ <expr><lit:literal type="char" pos:line="439" pos:column="70">','</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="439" pos:column="77">StringSplitOptions</name><op:operator pos:line="439" pos:column="95">.</op:operator><name pos:line="439" pos:column="96">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="440" pos:column="33">var</name></type> <name pos:line="440" pos:column="37">addMethod</name> <init pos:line="440" pos:column="47">= <expr><call><name><name pos:line="440" pos:column="49">fieldType</name><op:operator pos:line="440" pos:column="58">.</op:operator><name pos:line="440" pos:column="59">GetMethod</name></name><argument_list pos:line="440" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="440" pos:column="69">"Add"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="440" pos:column="76">fieldType</name><op:operator pos:line="440" pos:column="85">.</op:operator><name pos:line="440" pos:column="86">GetGenericArguments</name></name><argument_list pos:line="440" pos:column="105">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<for pos:line="441" pos:column="33">for (<init><decl><type><name pos:line="441" pos:column="38">var</name></type> <name pos:line="441" pos:column="42">i</name> <init pos:line="441" pos:column="44">= <expr><lit:literal type="number" pos:line="441" pos:column="46">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="441" pos:column="49">i</name> <op:operator pos:line="441" pos:column="51">&lt;</op:operator> <name><name pos:line="441" pos:column="53">parts</name><op:operator pos:line="441" pos:column="58">.</op:operator><name pos:line="441" pos:column="59">Length</name></name></expr>;</condition> <incr><expr><name pos:line="441" pos:column="67">i</name><op:operator pos:line="441" pos:column="68">++</op:operator></expr></incr>)
					<expr_stmt><expr><call><name><name pos:line="442" pos:column="41">addMethod</name><op:operator pos:line="442" pos:column="50">.</op:operator><name pos:line="442" pos:column="51">Invoke</name></name><argument_list pos:line="442" pos:column="57">(<argument><expr><name pos:line="442" pos:column="58">set</name></expr></argument>, <argument><expr><op:operator pos:line="442" pos:column="63">new</op:operator><index pos:line="442" pos:column="66">[]</index> <block pos:line="442" pos:column="69">{ <expr><call><name pos:line="442" pos:column="71">GetValue</name><argument_list pos:line="442" pos:column="79">(<argument><expr><name pos:line="442" pos:column="80">fieldName</name></expr></argument>, <argument><expr><call><name><name pos:line="442" pos:column="91">fieldType</name><op:operator pos:line="442" pos:column="100">.</op:operator><name pos:line="442" pos:column="101">GetGenericArguments</name></name><argument_list pos:line="442" pos:column="120">()</argument_list></call><index pos:line="442" pos:column="122">[<expr><lit:literal type="number" pos:line="442" pos:column="123">0</lit:literal></expr>]</index></expr></argument>, <argument><expr><name><name pos:line="442" pos:column="127">parts</name><index pos:line="442" pos:column="132">[<expr><name pos:line="442" pos:column="133">i</name></expr>]</index></name><op:operator pos:line="442" pos:column="135">.</op:operator><call><name pos:line="442" pos:column="136">Trim</name><argument_list pos:line="442" pos:column="140">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="442" pos:column="144">field</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
				<return pos:line="443" pos:column="33">return <expr><name pos:line="443" pos:column="40">set</name></expr>;</return>
			}</block></then>
			<else pos:line="445" pos:column="25">else <if pos:line="445" pos:column="30">if <condition pos:line="445" pos:column="33">(<expr><name><name pos:line="445" pos:column="34">fieldType</name><op:operator pos:line="445" pos:column="43">.</op:operator><name pos:line="445" pos:column="44">IsGenericType</name> <type:modifier pos:line="445" pos:column="58">&amp;&amp;</type:modifier></name> <call><name><name pos:line="445" pos:column="61">fieldType</name><op:operator pos:line="445" pos:column="70">.</op:operator><name pos:line="445" pos:column="71">GetGenericTypeDefinition</name></name><argument_list pos:line="445" pos:column="95">()</argument_list></call> <op:operator pos:line="445" pos:column="98">==</op:operator> <call><name pos:line="445" pos:column="101">typeof</name><argument_list pos:line="445" pos:column="107">(<argument><expr><name><name pos:line="445" pos:column="108">Dictionary</name><argument_list pos:line="445" pos:column="118">&lt;,&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="445" pos:column="123">
			<block pos:line="446" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="447" pos:column="33">var</name></type> <name pos:line="447" pos:column="37">dict</name> <init pos:line="447" pos:column="42">= <expr><call><name><name pos:line="447" pos:column="44">Activator</name><op:operator pos:line="447" pos:column="53">.</op:operator><name pos:line="447" pos:column="54">CreateInstance</name></name><argument_list pos:line="447" pos:column="68">(<argument><expr><name pos:line="447" pos:column="69">fieldType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="448" pos:column="33">var</name></type> <name pos:line="448" pos:column="37">arguments</name> <init pos:line="448" pos:column="47">= <expr><call><name><name pos:line="448" pos:column="49">fieldType</name><op:operator pos:line="448" pos:column="58">.</op:operator><name pos:line="448" pos:column="59">GetGenericArguments</name></name><argument_list pos:line="448" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="449" pos:column="33">var</name></type> <name pos:line="449" pos:column="37">addMethod</name> <init pos:line="449" pos:column="47">= <expr><call><name><name pos:line="449" pos:column="49">fieldType</name><op:operator pos:line="449" pos:column="58">.</op:operator><name pos:line="449" pos:column="59">GetMethod</name></name><argument_list pos:line="449" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="449" pos:column="69">"Add"</lit:literal></expr></argument>, <argument><expr><name pos:line="449" pos:column="76">arguments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<foreach pos:line="451" pos:column="33">foreach (<init><decl><type><name pos:line="451" pos:column="42">var</name></type> <name pos:line="451" pos:column="46">node</name> <range pos:line="451" pos:column="51">in <expr><name><name pos:line="451" pos:column="54">yaml</name><op:operator pos:line="451" pos:column="58">.</op:operator><name pos:line="451" pos:column="59">Nodes</name></name></expr></range></decl></init>)
				<block pos:line="452" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="453" pos:column="41">var</name></type> <name pos:line="453" pos:column="45">key</name> <init pos:line="453" pos:column="49">= <expr><call><name pos:line="453" pos:column="51">GetValue</name><argument_list pos:line="453" pos:column="59">(<argument><expr><name pos:line="453" pos:column="60">fieldName</name></expr></argument>, <argument><expr><name><name pos:line="453" pos:column="71">arguments</name><index pos:line="453" pos:column="80">[<expr><lit:literal type="number" pos:line="453" pos:column="81">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="453" pos:column="85">node</name><op:operator pos:line="453" pos:column="89">.</op:operator><name pos:line="453" pos:column="90">Key</name></name></expr></argument>, <argument><expr><name pos:line="453" pos:column="95">field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="454" pos:column="41">var</name></type> <name pos:line="454" pos:column="45">val</name> <init pos:line="454" pos:column="49">= <expr><call><name pos:line="454" pos:column="51">GetValue</name><argument_list pos:line="454" pos:column="59">(<argument><expr><name pos:line="454" pos:column="60">fieldName</name></expr></argument>, <argument><expr><name><name pos:line="454" pos:column="71">arguments</name><index pos:line="454" pos:column="80">[<expr><lit:literal type="number" pos:line="454" pos:column="81">1</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="454" pos:column="85">node</name><op:operator pos:line="454" pos:column="89">.</op:operator><name pos:line="454" pos:column="90">Value</name></name></expr></argument>, <argument><expr><name pos:line="454" pos:column="97">field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="455" pos:column="41">addMethod</name><op:operator pos:line="455" pos:column="50">.</op:operator><name pos:line="455" pos:column="51">Invoke</name></name><argument_list pos:line="455" pos:column="57">(<argument><expr><name pos:line="455" pos:column="58">dict</name></expr></argument>, <argument><expr><op:operator pos:line="455" pos:column="64">new</op:operator><index pos:line="455" pos:column="67">[]</index> <block pos:line="455" pos:column="70">{ <expr><name pos:line="455" pos:column="72">key</name></expr><op:operator pos:line="455" pos:column="75">,</op:operator> <expr><name pos:line="455" pos:column="77">val</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></foreach>

				<return pos:line="458" pos:column="33">return <expr><name pos:line="458" pos:column="40">dict</name></expr>;</return>
			}</block></then>
			<else pos:line="460" pos:column="25">else <if pos:line="460" pos:column="30">if <condition pos:line="460" pos:column="33">(<expr><name pos:line="460" pos:column="34">fieldType</name> <op:operator pos:line="460" pos:column="44">==</op:operator> <call><name pos:line="460" pos:column="47">typeof</name><argument_list pos:line="460" pos:column="53">(<argument><expr><name pos:line="460" pos:column="54">Size</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="460" pos:column="60">
			<block pos:line="461" pos:column="25">{
				<if pos:line="462" pos:column="33">if <condition pos:line="462" pos:column="36">(<expr><name pos:line="462" pos:column="37">value</name> <op:operator pos:line="462" pos:column="43">!=</op:operator> <name pos:line="462" pos:column="46">null</name></expr>)</condition><then pos:line="462" pos:column="51">
				<block pos:line="463" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="464" pos:column="41">var</name></type> <name pos:line="464" pos:column="45">parts</name> <init pos:line="464" pos:column="51">= <expr><call><name><name pos:line="464" pos:column="53">value</name><op:operator pos:line="464" pos:column="58">.</op:operator><name pos:line="464" pos:column="59">Split</name></name><argument_list pos:line="464" pos:column="64">(<argument><expr><op:operator pos:line="464" pos:column="65">new</op:operator> <name><name pos:line="464" pos:column="69">char</name><index pos:line="464" pos:column="73">[]</index></name> <block pos:line="464" pos:column="76">{ <expr><lit:literal type="char" pos:line="464" pos:column="78">','</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="464" pos:column="85">StringSplitOptions</name><op:operator pos:line="464" pos:column="103">.</op:operator><name pos:line="464" pos:column="104">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<return pos:line="465" pos:column="41">return <expr><op:operator pos:line="465" pos:column="48">new</op:operator> <call><name pos:line="465" pos:column="52">Size</name><argument_list pos:line="465" pos:column="56">(<argument><expr><call><name><name pos:line="465" pos:column="57">Exts</name><op:operator pos:line="465" pos:column="61">.</op:operator><name pos:line="465" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="465" pos:column="83">(<argument><expr><name><name pos:line="465" pos:column="84">parts</name><index pos:line="465" pos:column="89">[<expr><lit:literal type="number" pos:line="465" pos:column="90">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="465" pos:column="95">Exts</name><op:operator pos:line="465" pos:column="99">.</op:operator><name pos:line="465" pos:column="100">ParseIntegerInvariant</name></name><argument_list pos:line="465" pos:column="121">(<argument><expr><name><name pos:line="465" pos:column="122">parts</name><index pos:line="465" pos:column="127">[<expr><lit:literal type="number" pos:line="465" pos:column="128">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
				}</block></then></if>

				<return pos:line="468" pos:column="33">return <expr><call><name pos:line="468" pos:column="40">InvalidValueAction</name><argument_list pos:line="468" pos:column="58">(<argument><expr><name pos:line="468" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="468" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="468" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="470" pos:column="25">else <if pos:line="470" pos:column="30">if <condition pos:line="470" pos:column="33">(<expr><name pos:line="470" pos:column="34">fieldType</name> <op:operator pos:line="470" pos:column="44">==</op:operator> <call><name pos:line="470" pos:column="47">typeof</name><argument_list pos:line="470" pos:column="53">(<argument><expr><name pos:line="470" pos:column="54">int2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="470" pos:column="60">
			<block pos:line="471" pos:column="25">{
				<if pos:line="472" pos:column="33">if <condition pos:line="472" pos:column="36">(<expr><name pos:line="472" pos:column="37">value</name> <op:operator pos:line="472" pos:column="43">!=</op:operator> <name pos:line="472" pos:column="46">null</name></expr>)</condition><then pos:line="472" pos:column="51">
				<block pos:line="473" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="474" pos:column="41">var</name></type> <name pos:line="474" pos:column="45">parts</name> <init pos:line="474" pos:column="51">= <expr><call><name><name pos:line="474" pos:column="53">value</name><op:operator pos:line="474" pos:column="58">.</op:operator><name pos:line="474" pos:column="59">Split</name></name><argument_list pos:line="474" pos:column="64">(<argument><expr><op:operator pos:line="474" pos:column="65">new</op:operator> <name><name pos:line="474" pos:column="69">char</name><index pos:line="474" pos:column="73">[]</index></name> <block pos:line="474" pos:column="76">{ <expr><lit:literal type="char" pos:line="474" pos:column="78">','</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="474" pos:column="85">StringSplitOptions</name><op:operator pos:line="474" pos:column="103">.</op:operator><name pos:line="474" pos:column="104">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<return pos:line="475" pos:column="41">return <expr><op:operator pos:line="475" pos:column="48">new</op:operator> <call><name pos:line="475" pos:column="52">int2</name><argument_list pos:line="475" pos:column="56">(<argument><expr><call><name><name pos:line="475" pos:column="57">Exts</name><op:operator pos:line="475" pos:column="61">.</op:operator><name pos:line="475" pos:column="62">ParseIntegerInvariant</name></name><argument_list pos:line="475" pos:column="83">(<argument><expr><name><name pos:line="475" pos:column="84">parts</name><index pos:line="475" pos:column="89">[<expr><lit:literal type="number" pos:line="475" pos:column="90">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="475" pos:column="95">Exts</name><op:operator pos:line="475" pos:column="99">.</op:operator><name pos:line="475" pos:column="100">ParseIntegerInvariant</name></name><argument_list pos:line="475" pos:column="121">(<argument><expr><name><name pos:line="475" pos:column="122">parts</name><index pos:line="475" pos:column="127">[<expr><lit:literal type="number" pos:line="475" pos:column="128">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
				}</block></then></if>

				<return pos:line="478" pos:column="33">return <expr><call><name pos:line="478" pos:column="40">InvalidValueAction</name><argument_list pos:line="478" pos:column="58">(<argument><expr><name pos:line="478" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="478" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="478" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="480" pos:column="25">else <if pos:line="480" pos:column="30">if <condition pos:line="480" pos:column="33">(<expr><name pos:line="480" pos:column="34">fieldType</name> <op:operator pos:line="480" pos:column="44">==</op:operator> <call><name pos:line="480" pos:column="47">typeof</name><argument_list pos:line="480" pos:column="53">(<argument><expr><name pos:line="480" pos:column="54">float2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="480" pos:column="62">
			<block pos:line="481" pos:column="25">{
				<if pos:line="482" pos:column="33">if <condition pos:line="482" pos:column="36">(<expr><name pos:line="482" pos:column="37">value</name> <op:operator pos:line="482" pos:column="43">!=</op:operator> <name pos:line="482" pos:column="46">null</name></expr>)</condition><then pos:line="482" pos:column="51">
				<block pos:line="483" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="484" pos:column="41">var</name></type> <name pos:line="484" pos:column="45">parts</name> <init pos:line="484" pos:column="51">= <expr><call><name><name pos:line="484" pos:column="53">value</name><op:operator pos:line="484" pos:column="58">.</op:operator><name pos:line="484" pos:column="59">Split</name></name><argument_list pos:line="484" pos:column="64">(<argument><expr><op:operator pos:line="484" pos:column="65">new</op:operator> <name><name pos:line="484" pos:column="69">char</name><index pos:line="484" pos:column="73">[]</index></name> <block pos:line="484" pos:column="76">{ <expr><lit:literal type="char" pos:line="484" pos:column="78">','</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="484" pos:column="85">StringSplitOptions</name><op:operator pos:line="484" pos:column="103">.</op:operator><name pos:line="484" pos:column="104">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="485" pos:column="41">float</name></type> <name pos:line="485" pos:column="47">xx</name> <init pos:line="485" pos:column="50">= <expr><lit:literal type="number" pos:line="485" pos:column="52">0</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="486" pos:column="41">float</name></type> <name pos:line="486" pos:column="47">yy</name> <init pos:line="486" pos:column="50">= <expr><lit:literal type="number" pos:line="486" pos:column="52">0</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="487" pos:column="41">float</name></type> <name pos:line="487" pos:column="47">res</name></decl>;</decl_stmt>
					<if pos:line="488" pos:column="41">if <condition pos:line="488" pos:column="44">(<expr><call><name><name pos:line="488" pos:column="45">float</name><op:operator pos:line="488" pos:column="50">.</op:operator><name pos:line="488" pos:column="51">TryParse</name></name><argument_list pos:line="488" pos:column="59">(<argument><expr><name><name pos:line="488" pos:column="60">parts</name><index pos:line="488" pos:column="65">[<expr><lit:literal type="number" pos:line="488" pos:column="66">0</lit:literal></expr>]</index></name><op:operator pos:line="488" pos:column="68">.</op:operator><call><name pos:line="488" pos:column="69">Replace</name><argument_list pos:line="488" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="488" pos:column="77">"%"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="488" pos:column="82">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="488" pos:column="87">NumberStyles</name><op:operator pos:line="488" pos:column="99">.</op:operator><name pos:line="488" pos:column="100">Float</name></name></expr></argument>, <argument><expr><name><name pos:line="488" pos:column="107">NumberFormatInfo</name><op:operator pos:line="488" pos:column="123">.</op:operator><name pos:line="488" pos:column="124">InvariantInfo</name></name></expr></argument>, <argument><expr pos:line="488" pos:column="139">out <name pos:line="488" pos:column="143">res</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="488" pos:column="148">
						<expr_stmt><expr><name pos:line="489" pos:column="49">xx</name> <op:operator pos:line="489" pos:column="52">=</op:operator> <name pos:line="489" pos:column="54">res</name> <op:operator pos:line="489" pos:column="58">*</op:operator> <op:operator pos:line="489" pos:column="60">(</op:operator><name><name pos:line="489" pos:column="61">parts</name><index pos:line="489" pos:column="66">[<expr><lit:literal type="number" pos:line="489" pos:column="67">0</lit:literal></expr>]</index></name><op:operator pos:line="489" pos:column="69">.</op:operator><call><name pos:line="489" pos:column="70">Contains</name><argument_list pos:line="489" pos:column="78">(<argument><expr><lit:literal type="char" pos:line="489" pos:column="79">'%'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="489" pos:column="84">?</op:operator> <lit:literal type="number" pos:line="489" pos:column="86">0.01f</lit:literal> <op:operator pos:line="489" pos:column="92">:</op:operator> <lit:literal type="number" pos:line="489" pos:column="94">1f</lit:literal><op:operator pos:line="489" pos:column="96">)</op:operator></expr>;</expr_stmt></then></if>
					<if pos:line="490" pos:column="41">if <condition pos:line="490" pos:column="44">(<expr><call><name><name pos:line="490" pos:column="45">float</name><op:operator pos:line="490" pos:column="50">.</op:operator><name pos:line="490" pos:column="51">TryParse</name></name><argument_list pos:line="490" pos:column="59">(<argument><expr><name><name pos:line="490" pos:column="60">parts</name><index pos:line="490" pos:column="65">[<expr><lit:literal type="number" pos:line="490" pos:column="66">1</lit:literal></expr>]</index></name><op:operator pos:line="490" pos:column="68">.</op:operator><call><name pos:line="490" pos:column="69">Replace</name><argument_list pos:line="490" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="490" pos:column="77">"%"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="490" pos:column="82">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="490" pos:column="87">NumberStyles</name><op:operator pos:line="490" pos:column="99">.</op:operator><name pos:line="490" pos:column="100">Float</name></name></expr></argument>, <argument><expr><name><name pos:line="490" pos:column="107">NumberFormatInfo</name><op:operator pos:line="490" pos:column="123">.</op:operator><name pos:line="490" pos:column="124">InvariantInfo</name></name></expr></argument>, <argument><expr pos:line="490" pos:column="139">out <name pos:line="490" pos:column="143">res</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="490" pos:column="148">
						<expr_stmt><expr><name pos:line="491" pos:column="49">yy</name> <op:operator pos:line="491" pos:column="52">=</op:operator> <name pos:line="491" pos:column="54">res</name> <op:operator pos:line="491" pos:column="58">*</op:operator> <op:operator pos:line="491" pos:column="60">(</op:operator><name><name pos:line="491" pos:column="61">parts</name><index pos:line="491" pos:column="66">[<expr><lit:literal type="number" pos:line="491" pos:column="67">1</lit:literal></expr>]</index></name><op:operator pos:line="491" pos:column="69">.</op:operator><call><name pos:line="491" pos:column="70">Contains</name><argument_list pos:line="491" pos:column="78">(<argument><expr><lit:literal type="char" pos:line="491" pos:column="79">'%'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="491" pos:column="84">?</op:operator> <lit:literal type="number" pos:line="491" pos:column="86">0.01f</lit:literal> <op:operator pos:line="491" pos:column="92">:</op:operator> <lit:literal type="number" pos:line="491" pos:column="94">1f</lit:literal><op:operator pos:line="491" pos:column="96">)</op:operator></expr>;</expr_stmt></then></if>
					<return pos:line="492" pos:column="41">return <expr><op:operator pos:line="492" pos:column="48">new</op:operator> <call><name pos:line="492" pos:column="52">float2</name><argument_list pos:line="492" pos:column="58">(<argument><expr><name pos:line="492" pos:column="59">xx</name></expr></argument>, <argument><expr><name pos:line="492" pos:column="63">yy</name></expr></argument>)</argument_list></call></expr>;</return>
				}</block></then></if>

				<return pos:line="495" pos:column="33">return <expr><call><name pos:line="495" pos:column="40">InvalidValueAction</name><argument_list pos:line="495" pos:column="58">(<argument><expr><name pos:line="495" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="495" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="495" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="497" pos:column="25">else <if pos:line="497" pos:column="30">if <condition pos:line="497" pos:column="33">(<expr><name pos:line="497" pos:column="34">fieldType</name> <op:operator pos:line="497" pos:column="44">==</op:operator> <call><name pos:line="497" pos:column="47">typeof</name><argument_list pos:line="497" pos:column="53">(<argument><expr><name pos:line="497" pos:column="54">Rectangle</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="497" pos:column="65">
			<block pos:line="498" pos:column="25">{
				<if pos:line="499" pos:column="33">if <condition pos:line="499" pos:column="36">(<expr><name pos:line="499" pos:column="37">value</name> <op:operator pos:line="499" pos:column="43">!=</op:operator> <name pos:line="499" pos:column="46">null</name></expr>)</condition><then pos:line="499" pos:column="51">
				<block pos:line="500" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="501" pos:column="41">var</name></type> <name pos:line="501" pos:column="45">parts</name> <init pos:line="501" pos:column="51">= <expr><call><name><name pos:line="501" pos:column="53">value</name><op:operator pos:line="501" pos:column="58">.</op:operator><name pos:line="501" pos:column="59">Split</name></name><argument_list pos:line="501" pos:column="64">(<argument><expr><op:operator pos:line="501" pos:column="65">new</op:operator> <name><name pos:line="501" pos:column="69">char</name><index pos:line="501" pos:column="73">[]</index></name> <block pos:line="501" pos:column="76">{ <expr><lit:literal type="char" pos:line="501" pos:column="78">','</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="501" pos:column="85">StringSplitOptions</name><op:operator pos:line="501" pos:column="103">.</op:operator><name pos:line="501" pos:column="104">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<return pos:line="502" pos:column="41">return <expr><op:operator pos:line="502" pos:column="48">new</op:operator> <call><name pos:line="502" pos:column="52">Rectangle</name><argument_list pos:line="502" pos:column="61">(
						<argument><expr><call><name><name pos:line="503" pos:column="49">Exts</name><op:operator pos:line="503" pos:column="53">.</op:operator><name pos:line="503" pos:column="54">ParseIntegerInvariant</name></name><argument_list pos:line="503" pos:column="75">(<argument><expr><name><name pos:line="503" pos:column="76">parts</name><index pos:line="503" pos:column="81">[<expr><lit:literal type="number" pos:line="503" pos:column="82">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name><name pos:line="504" pos:column="49">Exts</name><op:operator pos:line="504" pos:column="53">.</op:operator><name pos:line="504" pos:column="54">ParseIntegerInvariant</name></name><argument_list pos:line="504" pos:column="75">(<argument><expr><name><name pos:line="504" pos:column="76">parts</name><index pos:line="504" pos:column="81">[<expr><lit:literal type="number" pos:line="504" pos:column="82">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name><name pos:line="505" pos:column="49">Exts</name><op:operator pos:line="505" pos:column="53">.</op:operator><name pos:line="505" pos:column="54">ParseIntegerInvariant</name></name><argument_list pos:line="505" pos:column="75">(<argument><expr><name><name pos:line="505" pos:column="76">parts</name><index pos:line="505" pos:column="81">[<expr><lit:literal type="number" pos:line="505" pos:column="82">2</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name><name pos:line="506" pos:column="49">Exts</name><op:operator pos:line="506" pos:column="53">.</op:operator><name pos:line="506" pos:column="54">ParseIntegerInvariant</name></name><argument_list pos:line="506" pos:column="75">(<argument><expr><name><name pos:line="506" pos:column="76">parts</name><index pos:line="506" pos:column="81">[<expr><lit:literal type="number" pos:line="506" pos:column="82">3</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
				}</block></then></if>

				<return pos:line="509" pos:column="33">return <expr><call><name pos:line="509" pos:column="40">InvalidValueAction</name><argument_list pos:line="509" pos:column="58">(<argument><expr><name pos:line="509" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="509" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="509" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="511" pos:column="25">else <if pos:line="511" pos:column="30">if <condition pos:line="511" pos:column="33">(<expr><name><name pos:line="511" pos:column="34">fieldType</name><op:operator pos:line="511" pos:column="43">.</op:operator><name pos:line="511" pos:column="44">IsGenericType</name> <type:modifier pos:line="511" pos:column="58">&amp;&amp;</type:modifier></name> <call><name><name pos:line="511" pos:column="61">fieldType</name><op:operator pos:line="511" pos:column="70">.</op:operator><name pos:line="511" pos:column="71">GetGenericTypeDefinition</name></name><argument_list pos:line="511" pos:column="95">()</argument_list></call> <op:operator pos:line="511" pos:column="98">==</op:operator> <call><name pos:line="511" pos:column="101">typeof</name><argument_list pos:line="511" pos:column="107">(<argument><expr><name><name pos:line="511" pos:column="108">Bits</name><argument_list pos:line="511" pos:column="112">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="511" pos:column="116">
			<block pos:line="512" pos:column="25">{
				<if pos:line="513" pos:column="33">if <condition pos:line="513" pos:column="36">(<expr><name pos:line="513" pos:column="37">value</name> <op:operator pos:line="513" pos:column="43">!=</op:operator> <name pos:line="513" pos:column="46">null</name></expr>)</condition><then pos:line="513" pos:column="51">
				<block pos:line="514" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="515" pos:column="41">var</name></type> <name pos:line="515" pos:column="45">parts</name> <init pos:line="515" pos:column="51">= <expr><call><name><name pos:line="515" pos:column="53">value</name><op:operator pos:line="515" pos:column="58">.</op:operator><name pos:line="515" pos:column="59">Split</name></name><argument_list pos:line="515" pos:column="64">(<argument><expr><op:operator pos:line="515" pos:column="65">new</op:operator> <name><name pos:line="515" pos:column="69">char</name><index pos:line="515" pos:column="73">[]</index></name> <block pos:line="515" pos:column="76">{ <expr><lit:literal type="char" pos:line="515" pos:column="78">','</lit:literal></expr> }</block></expr></argument>, <argument><expr><name><name pos:line="515" pos:column="85">StringSplitOptions</name><op:operator pos:line="515" pos:column="103">.</op:operator><name pos:line="515" pos:column="104">RemoveEmptyEntries</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="516" pos:column="41">var</name></type> <name pos:line="516" pos:column="45">argTypes</name> <init pos:line="516" pos:column="54">= <expr><op:operator pos:line="516" pos:column="56">new</op:operator> <name><name pos:line="516" pos:column="60">Type</name><index pos:line="516" pos:column="64">[]</index></name> <block pos:line="516" pos:column="67">{ <expr><call><name pos:line="516" pos:column="69">typeof</name><argument_list pos:line="516" pos:column="75">(<argument><expr><name><name pos:line="516" pos:column="76">string</name><index pos:line="516" pos:column="82">[]</index></name></expr></argument>)</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="517" pos:column="41">var</name></type> <name pos:line="517" pos:column="45">argValues</name> <init pos:line="517" pos:column="55">= <expr><op:operator pos:line="517" pos:column="57">new</op:operator> <name><name pos:line="517" pos:column="61">object</name><index pos:line="517" pos:column="67">[]</index></name> <block pos:line="517" pos:column="70">{ <expr><name pos:line="517" pos:column="72">parts</name></expr> }</block></expr></init></decl>;</decl_stmt>
					<return pos:line="518" pos:column="41">return <expr><call><name><name pos:line="518" pos:column="48">fieldType</name><op:operator pos:line="518" pos:column="57">.</op:operator><name pos:line="518" pos:column="58">GetConstructor</name></name><argument_list pos:line="518" pos:column="72">(<argument><expr><name pos:line="518" pos:column="73">argTypes</name></expr></argument>)</argument_list></call><op:operator pos:line="518" pos:column="82">.</op:operator><call><name pos:line="518" pos:column="83">Invoke</name><argument_list pos:line="518" pos:column="89">(<argument><expr><name pos:line="518" pos:column="90">argValues</name></expr></argument>)</argument_list></call></expr>;</return>
				}</block></then></if>

				<return pos:line="521" pos:column="33">return <expr><call><name pos:line="521" pos:column="40">InvalidValueAction</name><argument_list pos:line="521" pos:column="58">(<argument><expr><name pos:line="521" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="521" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="521" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="523" pos:column="25">else <if pos:line="523" pos:column="30">if <condition pos:line="523" pos:column="33">(<expr><name><name pos:line="523" pos:column="34">fieldType</name><op:operator pos:line="523" pos:column="43">.</op:operator><name pos:line="523" pos:column="44">IsGenericType</name> <type:modifier pos:line="523" pos:column="58">&amp;&amp;</type:modifier></name> <call><name><name pos:line="523" pos:column="61">fieldType</name><op:operator pos:line="523" pos:column="70">.</op:operator><name pos:line="523" pos:column="71">GetGenericTypeDefinition</name></name><argument_list pos:line="523" pos:column="95">()</argument_list></call> <op:operator pos:line="523" pos:column="98">==</op:operator> <call><name pos:line="523" pos:column="101">typeof</name><argument_list pos:line="523" pos:column="107">(<argument><expr><name><name pos:line="523" pos:column="108">Nullable</name><argument_list pos:line="523" pos:column="116">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="523" pos:column="120">
			<block pos:line="524" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="525" pos:column="33">var</name></type> <name pos:line="525" pos:column="37">innerType</name> <init pos:line="525" pos:column="47">= <expr><call><name><name pos:line="525" pos:column="49">fieldType</name><op:operator pos:line="525" pos:column="58">.</op:operator><name pos:line="525" pos:column="59">GetGenericArguments</name></name><argument_list pos:line="525" pos:column="78">()</argument_list></call><op:operator pos:line="525" pos:column="80">.</op:operator><call><name pos:line="525" pos:column="81">First</name><argument_list pos:line="525" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="526" pos:column="33">var</name></type> <name pos:line="526" pos:column="37">innerValue</name> <init pos:line="526" pos:column="48">= <expr><call><name pos:line="526" pos:column="50">GetValue</name><argument_list pos:line="526" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="526" pos:column="59">"Nullable&lt;T&gt;"</lit:literal></expr></argument>, <argument><expr><name pos:line="526" pos:column="74">innerType</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="85">value</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="92">field</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<return pos:line="527" pos:column="33">return <expr><call><name><name pos:line="527" pos:column="40">fieldType</name><op:operator pos:line="527" pos:column="49">.</op:operator><name pos:line="527" pos:column="50">GetConstructor</name></name><argument_list pos:line="527" pos:column="64">(<argument><expr><op:operator pos:line="527" pos:column="65">new</op:operator><index pos:line="527" pos:column="68">[]</index> <block pos:line="527" pos:column="71">{ <expr><name pos:line="527" pos:column="73">innerType</name></expr> }</block></expr></argument>)</argument_list></call><op:operator pos:line="527" pos:column="85">.</op:operator><call><name pos:line="527" pos:column="86">Invoke</name><argument_list pos:line="527" pos:column="92">(<argument><expr><op:operator pos:line="527" pos:column="93">new</op:operator><index pos:line="527" pos:column="96">[]</index> <block pos:line="527" pos:column="99">{ <expr><name pos:line="527" pos:column="101">innerValue</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="529" pos:column="25">else <if pos:line="529" pos:column="30">if <condition pos:line="529" pos:column="33">(<expr><name pos:line="529" pos:column="34">fieldType</name> <op:operator pos:line="529" pos:column="44">==</op:operator> <call><name pos:line="529" pos:column="47">typeof</name><argument_list pos:line="529" pos:column="53">(<argument><expr><name pos:line="529" pos:column="54">DateTime</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="529" pos:column="64">
			<block pos:line="530" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="531" pos:column="33">DateTime</name></type> <name pos:line="531" pos:column="42">dt</name></decl>;</decl_stmt>
				<if pos:line="532" pos:column="33">if <condition pos:line="532" pos:column="36">(<expr><call><name><name pos:line="532" pos:column="37">DateTime</name><op:operator pos:line="532" pos:column="45">.</op:operator><name pos:line="532" pos:column="46">TryParseExact</name></name><argument_list pos:line="532" pos:column="59">(<argument><expr><name pos:line="532" pos:column="60">value</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="532" pos:column="67">"yyyy-MM-dd HH-mm-ss"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="532" pos:column="90">CultureInfo</name><op:operator pos:line="532" pos:column="101">.</op:operator><name pos:line="532" pos:column="102">InvariantCulture</name></name></expr></argument>, <argument><expr><name><name pos:line="532" pos:column="120">DateTimeStyles</name><op:operator pos:line="532" pos:column="134">.</op:operator><name pos:line="532" pos:column="135">AssumeUniversal</name></name></expr></argument>, <argument><expr pos:line="532" pos:column="152">out <name pos:line="532" pos:column="156">dt</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="532" pos:column="160">
					<return pos:line="533" pos:column="41">return <expr><name pos:line="533" pos:column="48">dt</name></expr>;</return></then></if>
				<return pos:line="534" pos:column="33">return <expr><call><name pos:line="534" pos:column="40">InvalidValueAction</name><argument_list pos:line="534" pos:column="58">(<argument><expr><name pos:line="534" pos:column="59">value</name></expr></argument>, <argument><expr><name pos:line="534" pos:column="66">fieldType</name></expr></argument>, <argument><expr><name pos:line="534" pos:column="77">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="536" pos:column="25">else
			<block pos:line="537" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="538" pos:column="33">var</name></type> <name pos:line="538" pos:column="37">conv</name> <init pos:line="538" pos:column="42">= <expr><call><name><name pos:line="538" pos:column="44">TypeDescriptor</name><op:operator pos:line="538" pos:column="58">.</op:operator><name pos:line="538" pos:column="59">GetConverter</name></name><argument_list pos:line="538" pos:column="71">(<argument><expr><name pos:line="538" pos:column="72">fieldType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="539" pos:column="33">if <condition pos:line="539" pos:column="36">(<expr><call><name><name pos:line="539" pos:column="37">conv</name><op:operator pos:line="539" pos:column="41">.</op:operator><name pos:line="539" pos:column="42">CanConvertFrom</name></name><argument_list pos:line="539" pos:column="56">(<argument><expr><call><name pos:line="539" pos:column="57">typeof</name><argument_list pos:line="539" pos:column="63">(<argument><expr><name pos:line="539" pos:column="64">string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="539" pos:column="73">
				<block pos:line="540" pos:column="33">{
					<try pos:line="541" pos:column="41">try
					<block pos:line="542" pos:column="41">{
						<return pos:line="543" pos:column="49">return <expr><call><name><name pos:line="543" pos:column="56">conv</name><op:operator pos:line="543" pos:column="60">.</op:operator><name pos:line="543" pos:column="61">ConvertFromInvariantString</name></name><argument_list pos:line="543" pos:column="87">(<argument><expr><name pos:line="543" pos:column="88">value</name></expr></argument>)</argument_list></call></expr>;</return>
					}</block>
					<catch pos:line="545" pos:column="41">catch
					<block pos:line="546" pos:column="41">{
						<return pos:line="547" pos:column="49">return <expr><call><name pos:line="547" pos:column="56">InvalidValueAction</name><argument_list pos:line="547" pos:column="74">(<argument><expr><name pos:line="547" pos:column="75">value</name></expr></argument>, <argument><expr><name pos:line="547" pos:column="82">fieldType</name></expr></argument>, <argument><expr><name pos:line="547" pos:column="93">fieldName</name></expr></argument>)</argument_list></call></expr>;</return>
					}</block></catch></try>
				}</block></then></if>
			}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

			<expr_stmt><expr><call><name pos:line="552" pos:column="25">UnknownFieldAction</name><argument_list pos:line="552" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="552" pos:column="44">"[Type] {0}"</lit:literal><op:operator pos:line="552" pos:column="56">.</op:operator><call><name pos:line="552" pos:column="57">F</name><argument_list pos:line="552" pos:column="58">(<argument><expr><name pos:line="552" pos:column="59">value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="552" pos:column="67">fieldType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="553" pos:column="25">return <expr><name pos:line="553" pos:column="32">null</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="556" pos:column="17">static</specifier> <name pos:line="556" pos:column="24">object</name></type> <name pos:line="556" pos:column="31">ParseYesNo</name><parameter_list pos:line="556" pos:column="41">(<param><decl><type><name pos:line="556" pos:column="42">string</name></type> <name pos:line="556" pos:column="49">p</name></decl></param>, <param><decl><type><name pos:line="556" pos:column="52">Type</name></type> <name pos:line="556" pos:column="57">fieldType</name></decl></param>, <param><decl><type><name pos:line="556" pos:column="68">string</name></type> <name pos:line="556" pos:column="75">field</name></decl></param>)</parameter_list>
		<block pos:line="557" pos:column="17">{
			<if pos:line="558" pos:column="25">if <condition pos:line="558" pos:column="28">(<expr><call><name><name pos:line="558" pos:column="29">string</name><op:operator pos:line="558" pos:column="35">.</op:operator><name pos:line="558" pos:column="36">IsNullOrEmpty</name></name><argument_list pos:line="558" pos:column="49">(<argument><expr><name pos:line="558" pos:column="50">p</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="558" pos:column="53">
				<return pos:line="559" pos:column="33">return <expr><call><name pos:line="559" pos:column="40">InvalidValueAction</name><argument_list pos:line="559" pos:column="58">(<argument><expr><name pos:line="559" pos:column="59">p</name></expr></argument>, <argument><expr><name pos:line="559" pos:column="62">fieldType</name></expr></argument>, <argument><expr><name pos:line="559" pos:column="73">field</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

			<expr_stmt><expr><name pos:line="561" pos:column="25">p</name> <op:operator pos:line="561" pos:column="27">=</op:operator> <call><name><name pos:line="561" pos:column="29">p</name><op:operator pos:line="561" pos:column="30">.</op:operator><name pos:line="561" pos:column="31">ToLowerInvariant</name></name><argument_list pos:line="561" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="562" pos:column="25">if <condition pos:line="562" pos:column="28">(<expr><name pos:line="562" pos:column="29">p</name> <op:operator pos:line="562" pos:column="31">==</op:operator> <lit:literal type="string" pos:line="562" pos:column="34">"yes"</lit:literal></expr>)</condition><then pos:line="562" pos:column="40"> <return pos:line="562" pos:column="41">return <expr><lit:literal type="boolean" pos:line="562" pos:column="48">true</lit:literal></expr>;</return></then></if>
			<if pos:line="563" pos:column="25">if <condition pos:line="563" pos:column="28">(<expr><name pos:line="563" pos:column="29">p</name> <op:operator pos:line="563" pos:column="31">==</op:operator> <lit:literal type="string" pos:line="563" pos:column="34">"true"</lit:literal></expr>)</condition><then pos:line="563" pos:column="41"> <return pos:line="563" pos:column="42">return <expr><lit:literal type="boolean" pos:line="563" pos:column="49">true</lit:literal></expr>;</return></then></if>
			<if pos:line="564" pos:column="25">if <condition pos:line="564" pos:column="28">(<expr><name pos:line="564" pos:column="29">p</name> <op:operator pos:line="564" pos:column="31">==</op:operator> <lit:literal type="string" pos:line="564" pos:column="34">"no"</lit:literal></expr>)</condition><then pos:line="564" pos:column="39"> <return pos:line="564" pos:column="40">return <expr><lit:literal type="boolean" pos:line="564" pos:column="47">false</lit:literal></expr>;</return></then></if>
			<if pos:line="565" pos:column="25">if <condition pos:line="565" pos:column="28">(<expr><name pos:line="565" pos:column="29">p</name> <op:operator pos:line="565" pos:column="31">==</op:operator> <lit:literal type="string" pos:line="565" pos:column="34">"false"</lit:literal></expr>)</condition><then pos:line="565" pos:column="42"> <return pos:line="565" pos:column="43">return <expr><lit:literal type="boolean" pos:line="565" pos:column="50">false</lit:literal></expr>;</return></then></if>

			<return pos:line="567" pos:column="25">return <expr><call><name pos:line="567" pos:column="32">InvalidValueAction</name><argument_list pos:line="567" pos:column="50">(<argument><expr><name pos:line="567" pos:column="51">p</name></expr></argument>, <argument><expr><name pos:line="567" pos:column="54">fieldType</name></expr></argument>, <argument><expr><name pos:line="567" pos:column="65">field</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<class><specifier pos:line="570" pos:column="17">public</specifier> <specifier pos:line="570" pos:column="24">sealed</specifier> class <name pos:line="570" pos:column="37">FieldLoadInfo</name>
		<block pos:line="571" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="572" pos:column="25">public</specifier> <specifier pos:line="572" pos:column="32">readonly</specifier> <name pos:line="572" pos:column="41">FieldInfo</name></type> <name pos:line="572" pos:column="51">Field</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="573" pos:column="25">public</specifier> <specifier pos:line="573" pos:column="32">readonly</specifier> <name pos:line="573" pos:column="41">SerializeAttribute</name></type> <name pos:line="573" pos:column="60">Attribute</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="574" pos:column="25">public</specifier> <specifier pos:line="574" pos:column="32">readonly</specifier> <name pos:line="574" pos:column="41">string</name></type> <name pos:line="574" pos:column="48">YamlName</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="575" pos:column="25">public</specifier> <specifier pos:line="575" pos:column="32">readonly</specifier> <name><name pos:line="575" pos:column="41">Func</name><argument_list pos:line="575" pos:column="45">&lt;<argument><name pos:line="575" pos:column="46">MiniYaml</name></argument>, <argument><name pos:line="575" pos:column="56">object</name></argument>&gt;</argument_list></name></type> <name pos:line="575" pos:column="64">Loader</name></decl>;</decl_stmt>

			<constructor><specifier pos:line="577" pos:column="25">internal</specifier> <name pos:line="577" pos:column="34">FieldLoadInfo</name><parameter_list pos:line="577" pos:column="47">(<param><decl><type><name pos:line="577" pos:column="48">FieldInfo</name></type> <name pos:line="577" pos:column="58">field</name></decl></param>, <param><decl><type><name pos:line="577" pos:column="65">SerializeAttribute</name></type> <name pos:line="577" pos:column="84">attr</name></decl></param>, <param><decl><type><name pos:line="577" pos:column="90">string</name></type> <name pos:line="577" pos:column="97">yamlName</name></decl></param>, <param><decl><type><name><name pos:line="577" pos:column="107">Func</name><argument_list pos:line="577" pos:column="111">&lt;<argument><name pos:line="577" pos:column="112">MiniYaml</name></argument>, <argument><name pos:line="577" pos:column="122">object</name></argument>&gt;</argument_list></name></type> <name pos:line="577" pos:column="130">loader</name> <init pos:line="577" pos:column="137">= <expr><name pos:line="577" pos:column="139">null</name></expr></init></decl></param>)</parameter_list>
			<block pos:line="578" pos:column="25">{
				<expr_stmt><expr><name pos:line="579" pos:column="33">Field</name> <op:operator pos:line="579" pos:column="39">=</op:operator> <name pos:line="579" pos:column="41">field</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="580" pos:column="33">Attribute</name> <op:operator pos:line="580" pos:column="43">=</op:operator> <name pos:line="580" pos:column="45">attr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="581" pos:column="33">YamlName</name> <op:operator pos:line="581" pos:column="42">=</op:operator> <name pos:line="581" pos:column="44">yamlName</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="582" pos:column="33">Loader</name> <op:operator pos:line="582" pos:column="40">=</op:operator> <name pos:line="582" pos:column="42">loader</name></expr>;</expr_stmt>
			}</block></constructor>
		}</block></class>

		<function><type><specifier pos:line="586" pos:column="17">public</specifier> <specifier pos:line="586" pos:column="24">static</specifier> <name><name pos:line="586" pos:column="31">IEnumerable</name><argument_list pos:line="586" pos:column="42">&lt;<argument><name pos:line="586" pos:column="43">FieldLoadInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="586" pos:column="58">GetTypeLoadInfo</name><parameter_list pos:line="586" pos:column="73">(<param><decl><type><name pos:line="586" pos:column="74">Type</name></type> <name pos:line="586" pos:column="79">type</name></decl></param>, <param><decl><type><name pos:line="586" pos:column="85">bool</name></type> <name pos:line="586" pos:column="90">includePrivateByDefault</name> <init pos:line="586" pos:column="114">= <expr><lit:literal type="boolean" pos:line="586" pos:column="116">false</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="587" pos:column="17">{
			<return pos:line="588" pos:column="25">return <expr><name><name pos:line="588" pos:column="32">TypeLoadInfo</name><index pos:line="588" pos:column="44">[<expr><name pos:line="588" pos:column="45">type</name></expr>]</index></name><op:operator pos:line="588" pos:column="50">.</op:operator><call><name pos:line="588" pos:column="51">Where</name><argument_list pos:line="588" pos:column="56">(<argument><expr><lambda><name pos:line="588" pos:column="57">fli</name> <op:operator pos:line="588" pos:column="61">=&gt;</op:operator> <name pos:line="588" pos:column="64">includePrivateByDefault</name> <op:operator pos:line="588" pos:column="88">||</op:operator> <name><name pos:line="588" pos:column="91">fli</name><op:operator pos:line="588" pos:column="94">.</op:operator><name pos:line="588" pos:column="95">Field</name><op:operator pos:line="588" pos:column="100">.</op:operator><name pos:line="588" pos:column="101">IsPublic</name></name> <op:operator pos:line="588" pos:column="110">||</op:operator> <op:operator pos:line="588" pos:column="113">(</op:operator><name><name pos:line="588" pos:column="114">fli</name><op:operator pos:line="588" pos:column="117">.</op:operator><name pos:line="588" pos:column="118">Attribute</name><op:operator pos:line="588" pos:column="127">.</op:operator><name pos:line="588" pos:column="128">Serialize</name> <type:modifier pos:line="588" pos:column="138">&amp;&amp;</type:modifier></name> <op:operator pos:line="588" pos:column="141">!</op:operator><name><name pos:line="588" pos:column="142">fli</name><op:operator pos:line="588" pos:column="145">.</op:operator><name pos:line="588" pos:column="146">Attribute</name><op:operator pos:line="588" pos:column="155">.</op:operator><name pos:line="588" pos:column="156">IsDefault</name></name><op:operator pos:line="588" pos:column="165">)</op:operator></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="591" pos:column="17">static</specifier> <name pos:line="591" pos:column="24">FieldLoadInfo</name><index pos:line="591" pos:column="37">[]</index></type> <name pos:line="591" pos:column="40">BuildTypeLoadInfo</name><parameter_list pos:line="591" pos:column="57">(<param><decl><type><name pos:line="591" pos:column="58">Type</name></type> <name pos:line="591" pos:column="63">type</name></decl></param>)</parameter_list>
		<block pos:line="592" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="593" pos:column="25">var</name></type> <name pos:line="593" pos:column="29">ret</name> <init pos:line="593" pos:column="33">= <expr><op:operator pos:line="593" pos:column="35">new</op:operator> <call><name><name pos:line="593" pos:column="39">List</name><argument_list pos:line="593" pos:column="43">&lt;<argument><name pos:line="593" pos:column="44">FieldLoadInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="593" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<foreach pos:line="595" pos:column="25">foreach (<init><decl><type><name pos:line="595" pos:column="34">var</name></type> <name pos:line="595" pos:column="38">ff</name> <range pos:line="595" pos:column="41">in <expr><call><name><name pos:line="595" pos:column="44">type</name><op:operator pos:line="595" pos:column="48">.</op:operator><name pos:line="595" pos:column="49">GetFields</name></name><argument_list pos:line="595" pos:column="58">(<argument><expr><name><name pos:line="595" pos:column="59">BindingFlags</name><op:operator pos:line="595" pos:column="71">.</op:operator><name pos:line="595" pos:column="72">Public</name></name> <op:operator pos:line="595" pos:column="79">|</op:operator> <name><name pos:line="595" pos:column="81">BindingFlags</name><op:operator pos:line="595" pos:column="93">.</op:operator><name pos:line="595" pos:column="94">NonPublic</name></name> <op:operator pos:line="595" pos:column="104">|</op:operator> <name><name pos:line="595" pos:column="106">BindingFlags</name><op:operator pos:line="595" pos:column="118">.</op:operator><name pos:line="595" pos:column="119">Instance</name></name></expr></argument>)</argument_list></call></expr></range></decl></init>)
			<block pos:line="596" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="597" pos:column="33">var</name></type> <name pos:line="597" pos:column="37">field</name> <init pos:line="597" pos:column="43">= <expr><name pos:line="597" pos:column="45">ff</name></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name pos:line="599" pos:column="33">var</name></type> <name pos:line="599" pos:column="37">sa</name> <init pos:line="599" pos:column="40">= <expr><call><name><name pos:line="599" pos:column="42">field</name><op:operator pos:line="599" pos:column="47">.</op:operator><name><name pos:line="599" pos:column="48">GetCustomAttributes</name><argument_list pos:line="599" pos:column="67">&lt;<argument><name pos:line="599" pos:column="68">SerializeAttribute</name></argument>&gt;</argument_list></name></name><argument_list pos:line="599" pos:column="87">(<argument><expr><lit:literal type="boolean" pos:line="599" pos:column="88">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="599" pos:column="94">.</op:operator><call><name pos:line="599" pos:column="95">DefaultIfEmpty</name><argument_list pos:line="599" pos:column="109">(<argument><expr><name><name pos:line="599" pos:column="110">SerializeAttribute</name><op:operator pos:line="599" pos:column="128">.</op:operator><name pos:line="599" pos:column="129">Default</name></name></expr></argument>)</argument_list></call><op:operator pos:line="599" pos:column="137">.</op:operator><call><name pos:line="599" pos:column="138">First</name><argument_list pos:line="599" pos:column="143">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="600" pos:column="33">if <condition pos:line="600" pos:column="36">(<expr><op:operator pos:line="600" pos:column="37">!</op:operator><name><name pos:line="600" pos:column="38">sa</name><op:operator pos:line="600" pos:column="40">.</op:operator><name pos:line="600" pos:column="41">Serialize</name></name></expr>)</condition><then pos:line="600" pos:column="51">
					<continue pos:line="601" pos:column="41">continue;</continue></then></if>

				<decl_stmt><decl><type><name pos:line="603" pos:column="33">var</name></type> <name pos:line="603" pos:column="37">yamlName</name> <init pos:line="603" pos:column="46">= <expr><call><name><name pos:line="603" pos:column="48">string</name><op:operator pos:line="603" pos:column="54">.</op:operator><name pos:line="603" pos:column="55">IsNullOrEmpty</name></name><argument_list pos:line="603" pos:column="68">(<argument><expr><name><name pos:line="603" pos:column="69">sa</name><op:operator pos:line="603" pos:column="71">.</op:operator><name pos:line="603" pos:column="72">YamlName</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="603" pos:column="82">?</op:operator> <name><name pos:line="603" pos:column="84">field</name><op:operator pos:line="603" pos:column="89">.</op:operator><name pos:line="603" pos:column="90">Name</name></name> <op:operator pos:line="603" pos:column="95">:</op:operator> <name><name pos:line="603" pos:column="97">sa</name><op:operator pos:line="603" pos:column="99">.</op:operator><name pos:line="603" pos:column="100">YamlName</name></name></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name pos:line="605" pos:column="33">var</name></type> <name pos:line="605" pos:column="37">loader</name> <init pos:line="605" pos:column="44">= <expr><call><name><name pos:line="605" pos:column="46">sa</name><op:operator pos:line="605" pos:column="48">.</op:operator><name pos:line="605" pos:column="49">GetLoader</name></name><argument_list pos:line="605" pos:column="58">(<argument><expr><name pos:line="605" pos:column="59">type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="606" pos:column="33">if <condition pos:line="606" pos:column="36">(<expr><name pos:line="606" pos:column="37">loader</name> <op:operator pos:line="606" pos:column="44">==</op:operator> <name pos:line="606" pos:column="47">null</name> <op:operator pos:line="606" pos:column="52">&amp;&amp;</op:operator> <name><name pos:line="606" pos:column="55">sa</name><op:operator pos:line="606" pos:column="57">.</op:operator><name pos:line="606" pos:column="58">FromYamlKey</name></name></expr>)</condition><then pos:line="606" pos:column="70">
					<expr_stmt><expr><name pos:line="607" pos:column="41">loader</name> <op:operator pos:line="607" pos:column="48">=</op:operator> <lambda><name pos:line="607" pos:column="50">yaml</name> <op:operator pos:line="607" pos:column="55">=&gt;</op:operator> <call><name pos:line="607" pos:column="58">GetValue</name><argument_list pos:line="607" pos:column="66">(<argument><expr><name pos:line="607" pos:column="67">yamlName</name></expr></argument>, <argument><expr><name><name pos:line="607" pos:column="77">field</name><op:operator pos:line="607" pos:column="82">.</op:operator><name pos:line="607" pos:column="83">FieldType</name></name></expr></argument>, <argument><expr><name pos:line="607" pos:column="94">yaml</name></expr></argument>, <argument><expr><name pos:line="607" pos:column="100">field</name></expr></argument>)</argument_list></call></lambda></expr>;</expr_stmt></then></if>

				<decl_stmt><decl><type><name pos:line="609" pos:column="33">var</name></type> <name pos:line="609" pos:column="37">fli</name> <init pos:line="609" pos:column="41">= <expr><op:operator pos:line="609" pos:column="43">new</op:operator> <call><name pos:line="609" pos:column="47">FieldLoadInfo</name><argument_list pos:line="609" pos:column="60">(<argument><expr><name pos:line="609" pos:column="61">field</name></expr></argument>, <argument><expr><name pos:line="609" pos:column="68">sa</name></expr></argument>, <argument><expr><name pos:line="609" pos:column="72">yamlName</name></expr></argument>, <argument><expr><name pos:line="609" pos:column="82">loader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="610" pos:column="33">ret</name><op:operator pos:line="610" pos:column="36">.</op:operator><name pos:line="610" pos:column="37">Add</name></name><argument_list pos:line="610" pos:column="40">(<argument><expr><name pos:line="610" pos:column="41">fli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>

			<return pos:line="613" pos:column="25">return <expr><call><name><name pos:line="613" pos:column="32">ret</name><op:operator pos:line="613" pos:column="35">.</op:operator><name pos:line="613" pos:column="36">ToArray</name></name><argument_list pos:line="613" pos:column="43">()</argument_list></call></expr>;</return>
		}</block></function>

		<class><attribute pos:line="616" pos:column="17">[<expr><call><name pos:line="616" pos:column="18">AttributeUsage</name><argument_list pos:line="616" pos:column="32">(<argument><expr><name><name pos:line="616" pos:column="33">AttributeTargets</name><op:operator pos:line="616" pos:column="49">.</op:operator><name pos:line="616" pos:column="50">Field</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
		<specifier pos:line="617" pos:column="17">public</specifier> <specifier pos:line="617" pos:column="24">sealed</specifier> class <name pos:line="617" pos:column="37">IgnoreAttribute</name> <super pos:line="617" pos:column="53">: <name pos:line="617" pos:column="55">SerializeAttribute</name></super>
		<block pos:line="618" pos:column="17">{
			<constructor><specifier pos:line="619" pos:column="25">public</specifier> <name pos:line="619" pos:column="32">IgnoreAttribute</name><parameter_list pos:line="619" pos:column="47">()</parameter_list>
				<member_list pos:line="620" pos:column="33">: <call><name pos:line="620" pos:column="35">base</name><argument_list pos:line="620" pos:column="39">(<argument><expr><lit:literal type="boolean" pos:line="620" pos:column="40">false</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="620" pos:column="47">{ }</block></constructor>
		}</block></class>

		<class><attribute pos:line="623" pos:column="17">[<expr><call><name pos:line="623" pos:column="18">AttributeUsage</name><argument_list pos:line="623" pos:column="32">(<argument><expr><name><name pos:line="623" pos:column="33">AttributeTargets</name><op:operator pos:line="623" pos:column="49">.</op:operator><name pos:line="623" pos:column="50">Field</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
		<specifier pos:line="624" pos:column="17">public</specifier> <specifier pos:line="624" pos:column="24">sealed</specifier> class <name pos:line="624" pos:column="37">RequireAttribute</name> <super pos:line="624" pos:column="54">: <name pos:line="624" pos:column="56">SerializeAttribute</name></super>
		<block pos:line="625" pos:column="17">{
			<constructor><specifier pos:line="626" pos:column="25">public</specifier> <name pos:line="626" pos:column="32">RequireAttribute</name><parameter_list pos:line="626" pos:column="48">()</parameter_list>
				<member_list pos:line="627" pos:column="33">: <call><name pos:line="627" pos:column="35">base</name><argument_list pos:line="627" pos:column="39">(<argument><expr><lit:literal type="boolean" pos:line="627" pos:column="40">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="627" pos:column="46">true</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="627" pos:column="52">{ }</block></constructor>
		}</block></class>

		<class><attribute pos:line="630" pos:column="17">[<expr><call><name pos:line="630" pos:column="18">AttributeUsage</name><argument_list pos:line="630" pos:column="32">(<argument><expr><name><name pos:line="630" pos:column="33">AttributeTargets</name><op:operator pos:line="630" pos:column="49">.</op:operator><name pos:line="630" pos:column="50">Field</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
		<specifier pos:line="631" pos:column="17">public</specifier> <specifier pos:line="631" pos:column="24">sealed</specifier> class <name pos:line="631" pos:column="37">LoadUsingAttribute</name> <super pos:line="631" pos:column="56">: <name pos:line="631" pos:column="58">SerializeAttribute</name></super>
		<block pos:line="632" pos:column="17">{
			<constructor><specifier pos:line="633" pos:column="25">public</specifier> <name pos:line="633" pos:column="32">LoadUsingAttribute</name><parameter_list pos:line="633" pos:column="50">(<param><decl><type><name pos:line="633" pos:column="51">string</name></type> <name pos:line="633" pos:column="58">loader</name></decl></param>, <param><decl><type><name pos:line="633" pos:column="66">bool</name></type> <name pos:line="633" pos:column="71">required</name> <init pos:line="633" pos:column="80">= <expr><lit:literal type="boolean" pos:line="633" pos:column="82">false</lit:literal></expr></init></decl></param>)</parameter_list>
			<block pos:line="634" pos:column="25">{
				<expr_stmt><expr><name pos:line="635" pos:column="33">Loader</name> <op:operator pos:line="635" pos:column="40">=</op:operator> <name pos:line="635" pos:column="42">loader</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="636" pos:column="33">Required</name> <op:operator pos:line="636" pos:column="42">=</op:operator> <name pos:line="636" pos:column="44">required</name></expr>;</expr_stmt>
			}</block></constructor>
		}</block></class>

		<class><attribute pos:line="640" pos:column="17">[<expr><call><name pos:line="640" pos:column="18">AttributeUsage</name><argument_list pos:line="640" pos:column="32">(<argument><expr><name><name pos:line="640" pos:column="33">AttributeTargets</name><op:operator pos:line="640" pos:column="49">.</op:operator><name pos:line="640" pos:column="50">Field</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
		<specifier pos:line="641" pos:column="17">public</specifier> class <name pos:line="641" pos:column="30">SerializeAttribute</name> <super pos:line="641" pos:column="49">: <name pos:line="641" pos:column="51">Attribute</name></super>
		<block pos:line="642" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="643" pos:column="25">public</specifier> <specifier pos:line="643" pos:column="32">static</specifier> <specifier pos:line="643" pos:column="39">readonly</specifier> <name pos:line="643" pos:column="48">SerializeAttribute</name></type> <name pos:line="643" pos:column="67">Default</name> <init pos:line="643" pos:column="75">= <expr><op:operator pos:line="643" pos:column="77">new</op:operator> <call><name pos:line="643" pos:column="81">SerializeAttribute</name><argument_list pos:line="643" pos:column="99">(<argument><expr><lit:literal type="boolean" pos:line="643" pos:column="100">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><specifier pos:line="645" pos:column="25">public</specifier> <name pos:line="645" pos:column="32">bool</name></type> <name pos:line="645" pos:column="37">IsDefault</name> <block pos:line="645" pos:column="47">{ <function><name pos:line="645" pos:column="49">get</name> <block pos:line="645" pos:column="53">{ <return pos:line="645" pos:column="55">return <expr><name pos:line="645" pos:column="62">this</name> <op:operator pos:line="645" pos:column="67">==</op:operator> <name pos:line="645" pos:column="70">Default</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

			<decl_stmt><decl><type><specifier pos:line="647" pos:column="25">public</specifier> <specifier pos:line="647" pos:column="32">readonly</specifier> <name pos:line="647" pos:column="41">bool</name></type> <name pos:line="647" pos:column="46">Serialize</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="648" pos:column="25">public</specifier> <name pos:line="648" pos:column="32">string</name></type> <name pos:line="648" pos:column="39">YamlName</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="649" pos:column="25">public</specifier> <name pos:line="649" pos:column="32">string</name></type> <name pos:line="649" pos:column="39">Loader</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="650" pos:column="25">public</specifier> <name pos:line="650" pos:column="32">bool</name></type> <name pos:line="650" pos:column="37">FromYamlKey</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="651" pos:column="25">public</specifier> <name pos:line="651" pos:column="32">bool</name></type> <name pos:line="651" pos:column="37">DictionaryFromYamlKey</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="652" pos:column="25">public</specifier> <name pos:line="652" pos:column="32">bool</name></type> <name pos:line="652" pos:column="37">Required</name></decl>;</decl_stmt>

			<constructor><specifier pos:line="654" pos:column="25">public</specifier> <name pos:line="654" pos:column="32">SerializeAttribute</name><parameter_list pos:line="654" pos:column="50">(<param><decl><type><name pos:line="654" pos:column="51">bool</name></type> <name pos:line="654" pos:column="56">serialize</name> <init pos:line="654" pos:column="66">= <expr><lit:literal type="boolean" pos:line="654" pos:column="68">true</lit:literal></expr></init></decl></param>, <name pos:line="654" pos:column="74">bool</name> <name pos:line="654" pos:column="79">required</name> <op:operator pos:line="654" pos:column="88">=</op:operator> <lit:literal type="boolean" pos:line="654" pos:column="90">false</lit:literal>)</parameter_list>
			<block pos:line="655" pos:column="25">{
				<expr_stmt><expr><name pos:line="656" pos:column="33">Serialize</name> <op:operator pos:line="656" pos:column="43">=</op:operator> <name pos:line="656" pos:column="45">serialize</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="657" pos:column="33">Required</name> <op:operator pos:line="657" pos:column="42">=</op:operator> <name pos:line="657" pos:column="44">required</name></expr>;</expr_stmt>
			}</block></constructor>

			<function><type><specifier pos:line="660" pos:column="25">internal</specifier> <name><name pos:line="660" pos:column="34">Func</name><argument_list pos:line="660" pos:column="38">&lt;<argument><name pos:line="660" pos:column="39">MiniYaml</name></argument>, <argument><name pos:line="660" pos:column="49">object</name></argument>&gt;</argument_list></name></type> <name pos:line="660" pos:column="57">GetLoader</name><parameter_list pos:line="660" pos:column="66">(<param><decl><type><name pos:line="660" pos:column="67">Type</name></type> <name pos:line="660" pos:column="72">type</name></decl></param>)</parameter_list>
			<block pos:line="661" pos:column="25">{
				<decl_stmt><decl><type><specifier pos:line="662" pos:column="33">const</specifier> <name pos:line="662" pos:column="39">BindingFlags</name></type> <name pos:line="662" pos:column="52">Flags</name> <init pos:line="662" pos:column="58">= <expr><name><name pos:line="662" pos:column="60">BindingFlags</name><op:operator pos:line="662" pos:column="72">.</op:operator><name pos:line="662" pos:column="73">Public</name></name> <op:operator pos:line="662" pos:column="80">|</op:operator> <name><name pos:line="662" pos:column="82">BindingFlags</name><op:operator pos:line="662" pos:column="94">.</op:operator><name pos:line="662" pos:column="95">NonPublic</name></name> <op:operator pos:line="662" pos:column="105">|</op:operator> <name><name pos:line="662" pos:column="107">BindingFlags</name><op:operator pos:line="662" pos:column="119">.</op:operator><name pos:line="662" pos:column="120">Static</name></name> <op:operator pos:line="662" pos:column="127">|</op:operator> <name><name pos:line="662" pos:column="129">BindingFlags</name><op:operator pos:line="662" pos:column="141">.</op:operator><name pos:line="662" pos:column="142">FlattenHierarchy</name></name></expr></init></decl>;</decl_stmt>

				<if pos:line="664" pos:column="33">if <condition pos:line="664" pos:column="36">(<expr><op:operator pos:line="664" pos:column="37">!</op:operator><call><name><name pos:line="664" pos:column="38">string</name><op:operator pos:line="664" pos:column="44">.</op:operator><name pos:line="664" pos:column="45">IsNullOrEmpty</name></name><argument_list pos:line="664" pos:column="58">(<argument><expr><name pos:line="664" pos:column="59">Loader</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="664" pos:column="67">
				<block pos:line="665" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="666" pos:column="41">var</name></type> <name pos:line="666" pos:column="45">method</name> <init pos:line="666" pos:column="52">= <expr><call><name><name pos:line="666" pos:column="54">type</name><op:operator pos:line="666" pos:column="58">.</op:operator><name pos:line="666" pos:column="59">GetMethod</name></name><argument_list pos:line="666" pos:column="68">(<argument><expr><name pos:line="666" pos:column="69">Loader</name></expr></argument>, <argument><expr><name pos:line="666" pos:column="77">Flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="667" pos:column="41">if <condition pos:line="667" pos:column="44">(<expr><name pos:line="667" pos:column="45">method</name> <op:operator pos:line="667" pos:column="52">==</op:operator> <name pos:line="667" pos:column="55">null</name></expr>)</condition><then pos:line="667" pos:column="60">
						<throw pos:line="668" pos:column="49">throw <expr><op:operator pos:line="668" pos:column="55">new</op:operator> <call><name pos:line="668" pos:column="59">InvalidOperationException</name><argument_list pos:line="668" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="668" pos:column="85">"{0} does not specify a loader function '{1}'"</lit:literal><op:operator pos:line="668" pos:column="131">.</op:operator><call><name pos:line="668" pos:column="132">F</name><argument_list pos:line="668" pos:column="133">(<argument><expr><name><name pos:line="668" pos:column="134">type</name><op:operator pos:line="668" pos:column="138">.</op:operator><name pos:line="668" pos:column="139">Name</name></name></expr></argument>, <argument><expr><name pos:line="668" pos:column="145">Loader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

					<return pos:line="670" pos:column="41">return <expr><op:operator pos:line="670" pos:column="48">(</op:operator><name><name pos:line="670" pos:column="49">Func</name><argument_list pos:line="670" pos:column="53">&lt;<argument><name pos:line="670" pos:column="54">MiniYaml</name></argument>, <argument><name pos:line="670" pos:column="64">object</name></argument>&gt;</argument_list></name><op:operator pos:line="670" pos:column="71">)</op:operator><call><name><name pos:line="670" pos:column="72">Delegate</name><op:operator pos:line="670" pos:column="80">.</op:operator><name pos:line="670" pos:column="81">CreateDelegate</name></name><argument_list pos:line="670" pos:column="95">(<argument><expr><call><name pos:line="670" pos:column="96">typeof</name><argument_list pos:line="670" pos:column="102">(<argument><expr><name><name pos:line="670" pos:column="103">Func</name><argument_list pos:line="670" pos:column="107">&lt;<argument><name pos:line="670" pos:column="108">MiniYaml</name></argument>, <argument><name pos:line="670" pos:column="118">object</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="670" pos:column="128">method</name></expr></argument>)</argument_list></call></expr>;</return>
				}</block></then></if>

				<return pos:line="673" pos:column="33">return <expr><name pos:line="673" pos:column="40">null</name></expr>;</return>
			}</block></function>
		}</block></class>

		<function><type><specifier pos:line="677" pos:column="17">public</specifier> <specifier pos:line="677" pos:column="24">static</specifier> <name pos:line="677" pos:column="31">string</name></type> <name pos:line="677" pos:column="38">Translate</name><parameter_list pos:line="677" pos:column="47">(<param><decl><type><name pos:line="677" pos:column="48">string</name></type> <name pos:line="677" pos:column="55">key</name></decl></param>)</parameter_list>
		<block pos:line="678" pos:column="17">{
			<if pos:line="679" pos:column="25">if <condition pos:line="679" pos:column="28">(<expr><call><name><name pos:line="679" pos:column="29">string</name><op:operator pos:line="679" pos:column="35">.</op:operator><name pos:line="679" pos:column="36">IsNullOrEmpty</name></name><argument_list pos:line="679" pos:column="49">(<argument><expr><name pos:line="679" pos:column="50">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="679" pos:column="55">
				<return pos:line="680" pos:column="33">return <expr><name pos:line="680" pos:column="40">key</name></expr>;</return></then></if>

			<lock pos:line="682" pos:column="25">lock (<expr><name pos:line="682" pos:column="31">TranslationsLock</name></expr>)
			<block pos:line="683" pos:column="25">{
				<if pos:line="684" pos:column="33">if <condition pos:line="684" pos:column="36">(<expr><name pos:line="684" pos:column="37">translations</name> <op:operator pos:line="684" pos:column="50">==</op:operator> <name pos:line="684" pos:column="53">null</name></expr>)</condition><then pos:line="684" pos:column="58">
					<return pos:line="685" pos:column="41">return <expr><name pos:line="685" pos:column="48">key</name></expr>;</return></then></if>

				<decl_stmt><decl><type><name pos:line="687" pos:column="33">string</name></type> <name pos:line="687" pos:column="40">value</name></decl>;</decl_stmt>
				<if pos:line="688" pos:column="33">if <condition pos:line="688" pos:column="36">(<expr><op:operator pos:line="688" pos:column="37">!</op:operator><call><name><name pos:line="688" pos:column="38">translations</name><op:operator pos:line="688" pos:column="50">.</op:operator><name pos:line="688" pos:column="51">TryGetValue</name></name><argument_list pos:line="688" pos:column="62">(<argument><expr><name pos:line="688" pos:column="63">key</name></expr></argument>, <argument><expr pos:line="688" pos:column="68">out <name pos:line="688" pos:column="72">value</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="688" pos:column="79">
					<return pos:line="689" pos:column="41">return <expr><name pos:line="689" pos:column="48">key</name></expr>;</return></then></if>

				<return pos:line="691" pos:column="33">return <expr><name pos:line="691" pos:column="40">value</name></expr>;</return>
			}</block></lock>
		}</block></function>

		<function><type><specifier pos:line="695" pos:column="17">public</specifier> <specifier pos:line="695" pos:column="24">static</specifier> <name pos:line="695" pos:column="31">void</name></type> <name pos:line="695" pos:column="36">SetTranslations</name><parameter_list pos:line="695" pos:column="51">(<param><decl><type><name><name pos:line="695" pos:column="52">IDictionary</name><argument_list pos:line="695" pos:column="63">&lt;<argument><name pos:line="695" pos:column="64">string</name></argument>, <argument><name pos:line="695" pos:column="72">string</name></argument>&gt;</argument_list></name></type> <name pos:line="695" pos:column="80">translations</name></decl></param>)</parameter_list>
		<block pos:line="696" pos:column="17">{
			<lock pos:line="697" pos:column="25">lock (<expr><name pos:line="697" pos:column="31">TranslationsLock</name></expr>)
				<expr_stmt><expr><name><name pos:line="698" pos:column="33">FieldLoader</name><op:operator pos:line="698" pos:column="44">.</op:operator><name pos:line="698" pos:column="45">translations</name></name> <op:operator pos:line="698" pos:column="58">=</op:operator> <op:operator pos:line="698" pos:column="60">new</op:operator> <call><name><name pos:line="698" pos:column="64">Dictionary</name><argument_list pos:line="698" pos:column="74">&lt;<argument><name pos:line="698" pos:column="75">string</name></argument>, <argument><name pos:line="698" pos:column="83">string</name></argument>&gt;</argument_list></name><argument_list pos:line="698" pos:column="90">(<argument><expr><name pos:line="698" pos:column="91">translations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></lock>
		}</block></function>
	}</block></class>

	<class><attribute pos:line="702" pos:column="9">[<expr><call><name pos:line="702" pos:column="10">AttributeUsage</name><argument_list pos:line="702" pos:column="24">(<argument><expr><name><name pos:line="702" pos:column="25">AttributeTargets</name><op:operator pos:line="702" pos:column="41">.</op:operator><name pos:line="702" pos:column="42">Field</name></name> <op:operator pos:line="702" pos:column="48">|</op:operator> <name><name pos:line="702" pos:column="50">AttributeTargets</name><op:operator pos:line="702" pos:column="66">.</op:operator><name pos:line="702" pos:column="67">Property</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
	<specifier pos:line="703" pos:column="9">public</specifier> <specifier pos:line="703" pos:column="16">sealed</specifier> class <name pos:line="703" pos:column="29">TranslateAttribute</name> <super pos:line="703" pos:column="48">: <name pos:line="703" pos:column="50">Attribute</name></super> <block pos:line="703" pos:column="60">{ }</block></class>

	<class><attribute pos:line="705" pos:column="9">[<expr><call><name pos:line="705" pos:column="10">AttributeUsage</name><argument_list pos:line="705" pos:column="24">(<argument><expr><name><name pos:line="705" pos:column="25">AttributeTargets</name><op:operator pos:line="705" pos:column="41">.</op:operator><name pos:line="705" pos:column="42">Field</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
	<specifier pos:line="706" pos:column="9">public</specifier> <specifier pos:line="706" pos:column="16">sealed</specifier> class <name pos:line="706" pos:column="29">FieldFromYamlKeyAttribute</name> <super pos:line="706" pos:column="55">: <name><name pos:line="706" pos:column="57">FieldLoader</name><op:operator pos:line="706" pos:column="68">.</op:operator><name pos:line="706" pos:column="69">SerializeAttribute</name></name></super>
	<block pos:line="707" pos:column="9">{
		<constructor><specifier pos:line="708" pos:column="17">public</specifier> <name pos:line="708" pos:column="24">FieldFromYamlKeyAttribute</name><parameter_list pos:line="708" pos:column="49">()</parameter_list>
		<block pos:line="709" pos:column="17">{
			<expr_stmt><expr><name pos:line="710" pos:column="25">FromYamlKey</name> <op:operator pos:line="710" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="710" pos:column="39">true</lit:literal></expr>;</expr_stmt>
		}</block></constructor>
	}</block></class>

	<comment type="line" pos:line="714" pos:column="9">// Special-cases FieldFromYamlKeyAttribute for use with Dictionary&lt;K,V&gt;.</comment>
	<class><attribute pos:line="715" pos:column="9">[<expr><call><name pos:line="715" pos:column="10">AttributeUsage</name><argument_list pos:line="715" pos:column="24">(<argument><expr><name><name pos:line="715" pos:column="25">AttributeTargets</name><op:operator pos:line="715" pos:column="41">.</op:operator><name pos:line="715" pos:column="42">Field</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
	<specifier pos:line="716" pos:column="9">public</specifier> <specifier pos:line="716" pos:column="16">sealed</specifier> class <name pos:line="716" pos:column="29">DictionaryFromYamlKeyAttribute</name> <super pos:line="716" pos:column="60">: <name><name pos:line="716" pos:column="62">FieldLoader</name><op:operator pos:line="716" pos:column="73">.</op:operator><name pos:line="716" pos:column="74">SerializeAttribute</name></name></super>
	<block pos:line="717" pos:column="9">{
		<constructor><specifier pos:line="718" pos:column="17">public</specifier> <name pos:line="718" pos:column="24">DictionaryFromYamlKeyAttribute</name><parameter_list pos:line="718" pos:column="54">()</parameter_list>
		<block pos:line="719" pos:column="17">{
			<expr_stmt><expr><name pos:line="720" pos:column="25">FromYamlKey</name> <op:operator pos:line="720" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="720" pos:column="39">true</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="721" pos:column="25">DictionaryFromYamlKey</name> <op:operator pos:line="721" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="721" pos:column="49">true</lit:literal></expr>;</expr_stmt>
		}</block></constructor>
	}</block></class>

	<comment type="line" pos:line="725" pos:column="9">// mirrors DescriptionAttribute from System.ComponentModel but we dont want to have to use that everywhere.</comment>
	<class><attribute pos:line="726" pos:column="9">[<expr><call><name pos:line="726" pos:column="10">AttributeUsage</name><argument_list pos:line="726" pos:column="24">(<argument><expr><name><name pos:line="726" pos:column="25">AttributeTargets</name><op:operator pos:line="726" pos:column="41">.</op:operator><name pos:line="726" pos:column="42">All</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
	<specifier pos:line="727" pos:column="9">public</specifier> <specifier pos:line="727" pos:column="16">sealed</specifier> class <name pos:line="727" pos:column="29">DescAttribute</name> <super pos:line="727" pos:column="43">: <name pos:line="727" pos:column="45">Attribute</name></super>
	<block pos:line="728" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="729" pos:column="17">public</specifier> <specifier pos:line="729" pos:column="24">readonly</specifier> <name pos:line="729" pos:column="33">string</name><index pos:line="729" pos:column="39">[]</index></type> <name pos:line="729" pos:column="42">Lines</name></decl>;</decl_stmt>
		<constructor><specifier pos:line="730" pos:column="17">public</specifier> <name pos:line="730" pos:column="24">DescAttribute</name><parameter_list pos:line="730" pos:column="37">(<param><decl><type><specifier pos:line="730" pos:column="38">params</specifier> <name><name pos:line="730" pos:column="45">string</name><index pos:line="730" pos:column="51">[]</index></name></type> <name pos:line="730" pos:column="54">lines</name></decl></param>)</parameter_list> <block pos:line="730" pos:column="61">{ <expr_stmt><expr><name pos:line="730" pos:column="63">Lines</name> <op:operator pos:line="730" pos:column="69">=</op:operator> <name pos:line="730" pos:column="71">lines</name></expr>;</expr_stmt> }</block></constructor>
	}</block></class>
}</block></namespace>
</unit>
