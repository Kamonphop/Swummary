<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\CPos.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name pos:line="12" pos:column="7">Eluant</name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">Eluant</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">ObjectBinding</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">OpenRA</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Scripting</name></name>;</using>

<namespace pos:line="16" pos:column="1">namespace <name pos:line="16" pos:column="11">OpenRA</name>
<block pos:line="17" pos:column="1">{
	<struct><specifier pos:line="18" pos:column="9">public</specifier> struct <name pos:line="18" pos:column="23">CPos</name> <super pos:line="18" pos:column="28">: <name pos:line="18" pos:column="30">IScriptBindable</name>, <name pos:line="18" pos:column="47">ILuaAdditionBinding</name>, <name pos:line="18" pos:column="68">ILuaSubtractionBinding</name>, <name pos:line="18" pos:column="92">ILuaEqualityBinding</name>, <name pos:line="18" pos:column="113">ILuaTableBinding</name>, <name><name pos:line="18" pos:column="131">IEquatable</name><argument_list pos:line="18" pos:column="141">&lt;<argument><name pos:line="18" pos:column="142">CPos</name></argument>&gt;</argument_list></name></super>
	<block pos:line="19" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="20" pos:column="17">public</specifier> <specifier pos:line="20" pos:column="24">readonly</specifier> <name pos:line="20" pos:column="33">int</name></type> <name pos:line="20" pos:column="37">X</name></decl><op:operator pos:line="20" pos:column="38">,</op:operator> <decl><type ref="prev"/><name pos:line="20" pos:column="40">Y</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="22" pos:column="17">public</specifier> <name pos:line="22" pos:column="24">CPos</name><parameter_list pos:line="22" pos:column="28">(<param><decl><type><name pos:line="22" pos:column="29">int</name></type> <name pos:line="22" pos:column="33">x</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="36">int</name></type> <name pos:line="22" pos:column="40">y</name></decl></param>)</parameter_list> <block pos:line="22" pos:column="43">{ <expr_stmt><expr><name pos:line="22" pos:column="45">X</name> <op:operator pos:line="22" pos:column="47">=</op:operator> <name pos:line="22" pos:column="49">x</name></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="22" pos:column="52">Y</name> <op:operator pos:line="22" pos:column="54">=</op:operator> <name pos:line="22" pos:column="56">y</name></expr>;</expr_stmt> }</block></constructor>
		<decl_stmt><decl><type><specifier pos:line="23" pos:column="17">public</specifier> <specifier pos:line="23" pos:column="24">static</specifier> <specifier pos:line="23" pos:column="31">readonly</specifier> <name pos:line="23" pos:column="40">CPos</name></type> <name pos:line="23" pos:column="45">Zero</name> <init pos:line="23" pos:column="50">= <expr><op:operator pos:line="23" pos:column="52">new</op:operator> <call><name pos:line="23" pos:column="56">CPos</name><argument_list pos:line="23" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="23" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="23" pos:column="64">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="25" pos:column="17">public</specifier> <specifier pos:line="25" pos:column="24">static</specifier> <specifier pos:line="25" pos:column="31">explicit</specifier></type> <name pos:line="25" pos:column="40">operator CPos</name><parameter_list pos:line="25" pos:column="53">(<param><decl><type><name pos:line="25" pos:column="54">int2</name></type> <name pos:line="25" pos:column="59">a</name></decl></param>)</parameter_list> <block pos:line="25" pos:column="62">{ <return pos:line="25" pos:column="64">return <expr><op:operator pos:line="25" pos:column="71">new</op:operator> <call><name pos:line="25" pos:column="75">CPos</name><argument_list pos:line="25" pos:column="79">(<argument><expr><name><name pos:line="25" pos:column="80">a</name><op:operator pos:line="25" pos:column="81">.</op:operator><name pos:line="25" pos:column="82">X</name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="85">a</name><op:operator pos:line="25" pos:column="86">.</op:operator><name pos:line="25" pos:column="87">Y</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="27" pos:column="17">public</specifier> <specifier pos:line="27" pos:column="24">static</specifier> <name pos:line="27" pos:column="31">CPos</name></type> <name pos:line="27" pos:column="36">operator +</name><parameter_list pos:line="27" pos:column="46">(<param><decl><type><name pos:line="27" pos:column="47">CVec</name></type> <name pos:line="27" pos:column="52">a</name></decl></param>, <param><decl><type><name pos:line="27" pos:column="55">CPos</name></type> <name pos:line="27" pos:column="60">b</name></decl></param>)</parameter_list> <block pos:line="27" pos:column="63">{ <return pos:line="27" pos:column="65">return <expr><op:operator pos:line="27" pos:column="72">new</op:operator> <call><name pos:line="27" pos:column="76">CPos</name><argument_list pos:line="27" pos:column="80">(<argument><expr><name><name pos:line="27" pos:column="81">a</name><op:operator pos:line="27" pos:column="82">.</op:operator><name pos:line="27" pos:column="83">X</name></name> <op:operator pos:line="27" pos:column="85">+</op:operator> <name><name pos:line="27" pos:column="87">b</name><op:operator pos:line="27" pos:column="88">.</op:operator><name pos:line="27" pos:column="89">X</name></name></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="92">a</name><op:operator pos:line="27" pos:column="93">.</op:operator><name pos:line="27" pos:column="94">Y</name></name> <op:operator pos:line="27" pos:column="96">+</op:operator> <name><name pos:line="27" pos:column="98">b</name><op:operator pos:line="27" pos:column="99">.</op:operator><name pos:line="27" pos:column="100">Y</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="28" pos:column="17">public</specifier> <specifier pos:line="28" pos:column="24">static</specifier> <name pos:line="28" pos:column="31">CPos</name></type> <name pos:line="28" pos:column="36">operator +</name><parameter_list pos:line="28" pos:column="46">(<param><decl><type><name pos:line="28" pos:column="47">CPos</name></type> <name pos:line="28" pos:column="52">a</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="55">CVec</name></type> <name pos:line="28" pos:column="60">b</name></decl></param>)</parameter_list> <block pos:line="28" pos:column="63">{ <return pos:line="28" pos:column="65">return <expr><op:operator pos:line="28" pos:column="72">new</op:operator> <call><name pos:line="28" pos:column="76">CPos</name><argument_list pos:line="28" pos:column="80">(<argument><expr><name><name pos:line="28" pos:column="81">a</name><op:operator pos:line="28" pos:column="82">.</op:operator><name pos:line="28" pos:column="83">X</name></name> <op:operator pos:line="28" pos:column="85">+</op:operator> <name><name pos:line="28" pos:column="87">b</name><op:operator pos:line="28" pos:column="88">.</op:operator><name pos:line="28" pos:column="89">X</name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="92">a</name><op:operator pos:line="28" pos:column="93">.</op:operator><name pos:line="28" pos:column="94">Y</name></name> <op:operator pos:line="28" pos:column="96">+</op:operator> <name><name pos:line="28" pos:column="98">b</name><op:operator pos:line="28" pos:column="99">.</op:operator><name pos:line="28" pos:column="100">Y</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="29" pos:column="17">public</specifier> <specifier pos:line="29" pos:column="24">static</specifier> <name pos:line="29" pos:column="31">CPos</name></type> <name pos:line="29" pos:column="36">operator -</name><parameter_list pos:line="29" pos:column="46">(<param><decl><type><name pos:line="29" pos:column="47">CPos</name></type> <name pos:line="29" pos:column="52">a</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="55">CVec</name></type> <name pos:line="29" pos:column="60">b</name></decl></param>)</parameter_list> <block pos:line="29" pos:column="63">{ <return pos:line="29" pos:column="65">return <expr><op:operator pos:line="29" pos:column="72">new</op:operator> <call><name pos:line="29" pos:column="76">CPos</name><argument_list pos:line="29" pos:column="80">(<argument><expr><name><name pos:line="29" pos:column="81">a</name><op:operator pos:line="29" pos:column="82">.</op:operator><name pos:line="29" pos:column="83">X</name></name> <op:operator pos:line="29" pos:column="85">-</op:operator> <name><name pos:line="29" pos:column="87">b</name><op:operator pos:line="29" pos:column="88">.</op:operator><name pos:line="29" pos:column="89">X</name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="92">a</name><op:operator pos:line="29" pos:column="93">.</op:operator><name pos:line="29" pos:column="94">Y</name></name> <op:operator pos:line="29" pos:column="96">-</op:operator> <name><name pos:line="29" pos:column="98">b</name><op:operator pos:line="29" pos:column="99">.</op:operator><name pos:line="29" pos:column="100">Y</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="30" pos:column="17">public</specifier> <specifier pos:line="30" pos:column="24">static</specifier> <name pos:line="30" pos:column="31">CVec</name></type> <name pos:line="30" pos:column="36">operator -</name><parameter_list pos:line="30" pos:column="46">(<param><decl><type><name pos:line="30" pos:column="47">CPos</name></type> <name pos:line="30" pos:column="52">a</name></decl></param>, <param><decl><type><name pos:line="30" pos:column="55">CPos</name></type> <name pos:line="30" pos:column="60">b</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="63">{ <return pos:line="30" pos:column="65">return <expr><op:operator pos:line="30" pos:column="72">new</op:operator> <call><name pos:line="30" pos:column="76">CVec</name><argument_list pos:line="30" pos:column="80">(<argument><expr><name><name pos:line="30" pos:column="81">a</name><op:operator pos:line="30" pos:column="82">.</op:operator><name pos:line="30" pos:column="83">X</name></name> <op:operator pos:line="30" pos:column="85">-</op:operator> <name><name pos:line="30" pos:column="87">b</name><op:operator pos:line="30" pos:column="88">.</op:operator><name pos:line="30" pos:column="89">X</name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="92">a</name><op:operator pos:line="30" pos:column="93">.</op:operator><name pos:line="30" pos:column="94">Y</name></name> <op:operator pos:line="30" pos:column="96">-</op:operator> <name><name pos:line="30" pos:column="98">b</name><op:operator pos:line="30" pos:column="99">.</op:operator><name pos:line="30" pos:column="100">Y</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="32" pos:column="17">public</specifier> <specifier pos:line="32" pos:column="24">static</specifier> <name pos:line="32" pos:column="31">bool</name></type> <name pos:line="32" pos:column="36">operator ==</name><parameter_list pos:line="32" pos:column="47">(<param><decl><type><name pos:line="32" pos:column="48">CPos</name></type> <name pos:line="32" pos:column="53">me</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="57">CPos</name></type> <name pos:line="32" pos:column="62">other</name></decl></param>)</parameter_list> <block pos:line="32" pos:column="69">{ <return pos:line="32" pos:column="71">return <expr><name><name pos:line="32" pos:column="78">me</name><op:operator pos:line="32" pos:column="80">.</op:operator><name pos:line="32" pos:column="81">X</name></name> <op:operator pos:line="32" pos:column="83">==</op:operator> <name><name pos:line="32" pos:column="86">other</name><op:operator pos:line="32" pos:column="91">.</op:operator><name pos:line="32" pos:column="92">X</name> <type:modifier pos:line="32" pos:column="94">&amp;&amp;</type:modifier></name> <name><name pos:line="32" pos:column="97">me</name><op:operator pos:line="32" pos:column="99">.</op:operator><name pos:line="32" pos:column="100">Y</name></name> <op:operator pos:line="32" pos:column="102">==</op:operator> <name><name pos:line="32" pos:column="105">other</name><op:operator pos:line="32" pos:column="110">.</op:operator><name pos:line="32" pos:column="111">Y</name></name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="33" pos:column="17">public</specifier> <specifier pos:line="33" pos:column="24">static</specifier> <name pos:line="33" pos:column="31">bool</name></type> <name pos:line="33" pos:column="36">operator !=</name><parameter_list pos:line="33" pos:column="47">(<param><decl><type><name pos:line="33" pos:column="48">CPos</name></type> <name pos:line="33" pos:column="53">me</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="57">CPos</name></type> <name pos:line="33" pos:column="62">other</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="69">{ <return pos:line="33" pos:column="71">return <expr><op:operator pos:line="33" pos:column="78">!</op:operator><op:operator pos:line="33" pos:column="79">(</op:operator><name pos:line="33" pos:column="80">me</name> <op:operator pos:line="33" pos:column="83">==</op:operator> <name pos:line="33" pos:column="86">other</name><op:operator pos:line="33" pos:column="91">)</op:operator></expr>;</return> }</block></function>

		<function><type><specifier pos:line="35" pos:column="17">public</specifier> <specifier pos:line="35" pos:column="24">static</specifier> <name pos:line="35" pos:column="31">CPos</name></type> <name pos:line="35" pos:column="36">Max</name><parameter_list pos:line="35" pos:column="39">(<param><decl><type><name pos:line="35" pos:column="40">CPos</name></type> <name pos:line="35" pos:column="45">a</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="48">CPos</name></type> <name pos:line="35" pos:column="53">b</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="56">{ <return pos:line="35" pos:column="58">return <expr><op:operator pos:line="35" pos:column="65">new</op:operator> <call><name pos:line="35" pos:column="69">CPos</name><argument_list pos:line="35" pos:column="73">(<argument><expr><call><name><name pos:line="35" pos:column="74">Math</name><op:operator pos:line="35" pos:column="78">.</op:operator><name pos:line="35" pos:column="79">Max</name></name><argument_list pos:line="35" pos:column="82">(<argument><expr><name><name pos:line="35" pos:column="83">a</name><op:operator pos:line="35" pos:column="84">.</op:operator><name pos:line="35" pos:column="85">X</name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="88">b</name><op:operator pos:line="35" pos:column="89">.</op:operator><name pos:line="35" pos:column="90">X</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="35" pos:column="94">Math</name><op:operator pos:line="35" pos:column="98">.</op:operator><name pos:line="35" pos:column="99">Max</name></name><argument_list pos:line="35" pos:column="102">(<argument><expr><name><name pos:line="35" pos:column="103">a</name><op:operator pos:line="35" pos:column="104">.</op:operator><name pos:line="35" pos:column="105">Y</name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="108">b</name><op:operator pos:line="35" pos:column="109">.</op:operator><name pos:line="35" pos:column="110">Y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
		<function><type><specifier pos:line="36" pos:column="17">public</specifier> <specifier pos:line="36" pos:column="24">static</specifier> <name pos:line="36" pos:column="31">CPos</name></type> <name pos:line="36" pos:column="36">Min</name><parameter_list pos:line="36" pos:column="39">(<param><decl><type><name pos:line="36" pos:column="40">CPos</name></type> <name pos:line="36" pos:column="45">a</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="48">CPos</name></type> <name pos:line="36" pos:column="53">b</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="56">{ <return pos:line="36" pos:column="58">return <expr><op:operator pos:line="36" pos:column="65">new</op:operator> <call><name pos:line="36" pos:column="69">CPos</name><argument_list pos:line="36" pos:column="73">(<argument><expr><call><name><name pos:line="36" pos:column="74">Math</name><op:operator pos:line="36" pos:column="78">.</op:operator><name pos:line="36" pos:column="79">Min</name></name><argument_list pos:line="36" pos:column="82">(<argument><expr><name><name pos:line="36" pos:column="83">a</name><op:operator pos:line="36" pos:column="84">.</op:operator><name pos:line="36" pos:column="85">X</name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="88">b</name><op:operator pos:line="36" pos:column="89">.</op:operator><name pos:line="36" pos:column="90">X</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="36" pos:column="94">Math</name><op:operator pos:line="36" pos:column="98">.</op:operator><name pos:line="36" pos:column="99">Min</name></name><argument_list pos:line="36" pos:column="102">(<argument><expr><name><name pos:line="36" pos:column="103">a</name><op:operator pos:line="36" pos:column="104">.</op:operator><name pos:line="36" pos:column="105">Y</name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="108">b</name><op:operator pos:line="36" pos:column="109">.</op:operator><name pos:line="36" pos:column="110">Y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="38" pos:column="17">public</specifier> <specifier pos:line="38" pos:column="24">override</specifier> <name pos:line="38" pos:column="33">int</name></type> <name pos:line="38" pos:column="37">GetHashCode</name><parameter_list pos:line="38" pos:column="48">()</parameter_list> <block pos:line="38" pos:column="51">{ <return pos:line="38" pos:column="53">return <expr><call><name><name pos:line="38" pos:column="60">X</name><op:operator pos:line="38" pos:column="61">.</op:operator><name pos:line="38" pos:column="62">GetHashCode</name></name><argument_list pos:line="38" pos:column="73">()</argument_list></call> <op:operator pos:line="38" pos:column="76">^</op:operator> <call><name><name pos:line="38" pos:column="78">Y</name><op:operator pos:line="38" pos:column="79">.</op:operator><name pos:line="38" pos:column="80">GetHashCode</name></name><argument_list pos:line="38" pos:column="91">()</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="40" pos:column="17">public</specifier> <name pos:line="40" pos:column="24">bool</name></type> <name pos:line="40" pos:column="29">Equals</name><parameter_list pos:line="40" pos:column="35">(<param><decl><type><name pos:line="40" pos:column="36">CPos</name></type> <name pos:line="40" pos:column="41">other</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="48">{ <return pos:line="40" pos:column="50">return <expr><name pos:line="40" pos:column="57">X</name> <op:operator pos:line="40" pos:column="59">==</op:operator> <name><name pos:line="40" pos:column="62">other</name><op:operator pos:line="40" pos:column="67">.</op:operator><name pos:line="40" pos:column="68">X</name> <type:modifier pos:line="40" pos:column="70">&amp;&amp;</type:modifier></name> <name pos:line="40" pos:column="73">Y</name> <op:operator pos:line="40" pos:column="75">==</op:operator> <name><name pos:line="40" pos:column="78">other</name><op:operator pos:line="40" pos:column="83">.</op:operator><name pos:line="40" pos:column="84">Y</name></name></expr>;</return> }</block></function>
		<function><type><specifier pos:line="41" pos:column="17">public</specifier> <specifier pos:line="41" pos:column="24">override</specifier> <name pos:line="41" pos:column="33">bool</name></type> <name pos:line="41" pos:column="38">Equals</name><parameter_list pos:line="41" pos:column="44">(<param><decl><type><name pos:line="41" pos:column="45">object</name></type> <name pos:line="41" pos:column="52">obj</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="57">{ <return pos:line="41" pos:column="59">return <expr><name pos:line="41" pos:column="66">obj</name> <op:operator pos:line="41" pos:column="70">is</op:operator> <name pos:line="41" pos:column="73">CPos</name> <op:operator pos:line="41" pos:column="78">&amp;&amp;</op:operator> <call><name pos:line="41" pos:column="81">Equals</name><argument_list pos:line="41" pos:column="87">(<argument><expr><op:operator pos:line="41" pos:column="88">(</op:operator><name pos:line="41" pos:column="89">CPos</name><op:operator pos:line="41" pos:column="93">)</op:operator><name pos:line="41" pos:column="94">obj</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

		<function><type><specifier pos:line="43" pos:column="17">public</specifier> <specifier pos:line="43" pos:column="24">override</specifier> <name pos:line="43" pos:column="33">string</name></type> <name pos:line="43" pos:column="40">ToString</name><parameter_list pos:line="43" pos:column="48">()</parameter_list> <block pos:line="43" pos:column="51">{ <return pos:line="43" pos:column="53">return <expr><name pos:line="43" pos:column="60">X</name> <op:operator pos:line="43" pos:column="62">+</op:operator> <lit:literal type="string" pos:line="43" pos:column="64">","</lit:literal> <op:operator pos:line="43" pos:column="68">+</op:operator> <name pos:line="43" pos:column="70">Y</name></expr>;</return> }</block></function>

		<function><type><specifier pos:line="45" pos:column="17">public</specifier> <name pos:line="45" pos:column="24">MPos</name></type> <name pos:line="45" pos:column="29">ToMPos</name><parameter_list pos:line="45" pos:column="35">(<param><decl><type><name pos:line="45" pos:column="36">Map</name></type> <name pos:line="45" pos:column="40">map</name></decl></param>)</parameter_list>
		<block pos:line="46" pos:column="17">{
			<return pos:line="47" pos:column="25">return <expr><call><name pos:line="47" pos:column="32">ToMPos</name><argument_list pos:line="47" pos:column="38">(<argument><expr><name><name pos:line="47" pos:column="39">map</name><op:operator pos:line="47" pos:column="42">.</op:operator><name pos:line="47" pos:column="43">TileShape</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="50" pos:column="17">public</specifier> <name pos:line="50" pos:column="24">MPos</name></type> <name pos:line="50" pos:column="29">ToMPos</name><parameter_list pos:line="50" pos:column="35">(<param><decl><type><name pos:line="50" pos:column="36">TileShape</name></type> <name pos:line="50" pos:column="46">shape</name></decl></param>)</parameter_list>
		<block pos:line="51" pos:column="17">{
			<if pos:line="52" pos:column="25">if <condition pos:line="52" pos:column="28">(<expr><name pos:line="52" pos:column="29">shape</name> <op:operator pos:line="52" pos:column="35">==</op:operator> <name><name pos:line="52" pos:column="38">TileShape</name><op:operator pos:line="52" pos:column="47">.</op:operator><name pos:line="52" pos:column="48">Rectangle</name></name></expr>)</condition><then pos:line="52" pos:column="58">
				<return pos:line="53" pos:column="33">return <expr><op:operator pos:line="53" pos:column="40">new</op:operator> <call><name pos:line="53" pos:column="44">MPos</name><argument_list pos:line="53" pos:column="48">(<argument><expr><name pos:line="53" pos:column="49">X</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">Y</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

			<comment type="line" pos:line="55" pos:column="25">// Convert from diamond cell (x, y) position to rectangular map position (u, v)</comment>
			<comment type="line" pos:line="56" pos:column="25">//  - The staggered rows make this fiddly (hint: draw a diagram!)</comment>
			<comment type="line" pos:line="57" pos:column="25">// (a) Consider the relationships:</comment>
			<comment type="line" pos:line="58" pos:column="25">//  - +1x (even -&gt; odd) adds (0, 1) to (u, v)</comment>
			<comment type="line" pos:line="59" pos:column="25">//  - +1x (odd -&gt; even) adds (1, 1) to (u, v)</comment>
			<comment type="line" pos:line="60" pos:column="25">//  - +1y (even -&gt; odd) adds (-1, 1) to (u, v)</comment>
			<comment type="line" pos:line="61" pos:column="25">//  - +1y (odd -&gt; even) adds (0, 1) to (u, v)</comment>
			<comment type="line" pos:line="62" pos:column="25">// (b) Therefore:</comment>
			<comment type="line" pos:line="63" pos:column="25">//  - ax + by adds (a - b)/2 to u (only even increments count)</comment>
			<comment type="line" pos:line="64" pos:column="25">//  - ax + by adds a + b to v</comment>
			<decl_stmt><decl><type><name pos:line="65" pos:column="25">var</name></type> <name pos:line="65" pos:column="29">u</name> <init pos:line="65" pos:column="31">= <expr><op:operator pos:line="65" pos:column="33">(</op:operator><name pos:line="65" pos:column="34">X</name> <op:operator pos:line="65" pos:column="36">-</op:operator> <name pos:line="65" pos:column="38">Y</name><op:operator pos:line="65" pos:column="39">)</op:operator> <op:operator pos:line="65" pos:column="41">/</op:operator> <lit:literal type="number" pos:line="65" pos:column="43">2</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="66" pos:column="25">var</name></type> <name pos:line="66" pos:column="29">v</name> <init pos:line="66" pos:column="31">= <expr><name pos:line="66" pos:column="33">X</name> <op:operator pos:line="66" pos:column="35">+</op:operator> <name pos:line="66" pos:column="37">Y</name></expr></init></decl>;</decl_stmt>
			<return pos:line="67" pos:column="25">return <expr><op:operator pos:line="67" pos:column="32">new</op:operator> <call><name pos:line="67" pos:column="36">MPos</name><argument_list pos:line="67" pos:column="40">(<argument><expr><name pos:line="67" pos:column="41">u</name></expr></argument>, <argument><expr><name pos:line="67" pos:column="44">v</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<cpp:region pos:line="70" pos:column="17">#<cpp:directive pos:line="70" pos:column="18">region</cpp:directive> Scripting interface</cpp:region>

		<function><type><specifier pos:line="72" pos:column="17">public</specifier> <name pos:line="72" pos:column="24">LuaValue</name></type> <name pos:line="72" pos:column="33">Add</name><parameter_list pos:line="72" pos:column="36">(<param><decl><type><name pos:line="72" pos:column="37">LuaRuntime</name></type> <name pos:line="72" pos:column="48">runtime</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="57">LuaValue</name></type> <name pos:line="72" pos:column="66">left</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="72">LuaValue</name></type> <name pos:line="72" pos:column="81">right</name></decl></param>)</parameter_list>
		<block pos:line="73" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="74" pos:column="25">CPos</name></type> <name pos:line="74" pos:column="30">a</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="75" pos:column="25">CVec</name></type> <name pos:line="75" pos:column="30">b</name></decl>;</decl_stmt>
			<if pos:line="76" pos:column="25">if <condition pos:line="76" pos:column="28">(<expr><op:operator pos:line="76" pos:column="29">!</op:operator><call><name><name pos:line="76" pos:column="30">left</name><op:operator pos:line="76" pos:column="34">.</op:operator><name><name pos:line="76" pos:column="35">TryGetClrValue</name><argument_list pos:line="76" pos:column="49">&lt;<argument><name pos:line="76" pos:column="50">CPos</name></argument>&gt;</argument_list></name></name><argument_list pos:line="76" pos:column="55">(<argument><expr pos:line="76" pos:column="56">out <name pos:line="76" pos:column="60">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="76" pos:column="63">||</op:operator> <op:operator pos:line="76" pos:column="66">!</op:operator><call><name><name pos:line="76" pos:column="67">right</name><op:operator pos:line="76" pos:column="72">.</op:operator><name><name pos:line="76" pos:column="73">TryGetClrValue</name><argument_list pos:line="76" pos:column="87">&lt;<argument><name pos:line="76" pos:column="88">CVec</name></argument>&gt;</argument_list></name></name><argument_list pos:line="76" pos:column="93">(<argument><expr pos:line="76" pos:column="94">out <name pos:line="76" pos:column="98">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="101">
				<throw pos:line="77" pos:column="33">throw <expr><op:operator pos:line="77" pos:column="39">new</op:operator> <call><name pos:line="77" pos:column="43">LuaException</name><argument_list pos:line="77" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="56">"Attempted to call CPos.Add(CPos, CVec) with invalid arguments ({0}, {1})"</lit:literal><op:operator pos:line="77" pos:column="130">.</op:operator><call><name pos:line="77" pos:column="131">F</name><argument_list pos:line="77" pos:column="132">(<argument><expr><call><name><name pos:line="77" pos:column="133">left</name><op:operator pos:line="77" pos:column="137">.</op:operator><name pos:line="77" pos:column="138">WrappedClrType</name></name><argument_list pos:line="77" pos:column="152">()</argument_list></call><op:operator pos:line="77" pos:column="154">.</op:operator><name pos:line="77" pos:column="155">Name</name></expr></argument>, <argument><expr><call><name><name pos:line="77" pos:column="161">right</name><op:operator pos:line="77" pos:column="166">.</op:operator><name pos:line="77" pos:column="167">WrappedClrType</name></name><argument_list pos:line="77" pos:column="181">()</argument_list></call><op:operator pos:line="77" pos:column="183">.</op:operator><name pos:line="77" pos:column="184">Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<return pos:line="79" pos:column="25">return <expr><op:operator pos:line="79" pos:column="32">new</op:operator> <call><name pos:line="79" pos:column="36">LuaCustomClrObject</name><argument_list pos:line="79" pos:column="54">(<argument><expr><name pos:line="79" pos:column="55">a</name> <op:operator pos:line="79" pos:column="57">+</op:operator> <name pos:line="79" pos:column="59">b</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="82" pos:column="17">public</specifier> <name pos:line="82" pos:column="24">LuaValue</name></type> <name pos:line="82" pos:column="33">Subtract</name><parameter_list pos:line="82" pos:column="41">(<param><decl><type><name pos:line="82" pos:column="42">LuaRuntime</name></type> <name pos:line="82" pos:column="53">runtime</name></decl></param>, <param><decl><type><name pos:line="82" pos:column="62">LuaValue</name></type> <name pos:line="82" pos:column="71">left</name></decl></param>, <param><decl><type><name pos:line="82" pos:column="77">LuaValue</name></type> <name pos:line="82" pos:column="86">right</name></decl></param>)</parameter_list>
		<block pos:line="83" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="84" pos:column="25">CPos</name></type> <name pos:line="84" pos:column="30">a</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="85" pos:column="25">CVec</name></type> <name pos:line="85" pos:column="30">b</name></decl>;</decl_stmt>
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><op:operator pos:line="86" pos:column="29">!</op:operator><call><name><name pos:line="86" pos:column="30">left</name><op:operator pos:line="86" pos:column="34">.</op:operator><name><name pos:line="86" pos:column="35">TryGetClrValue</name><argument_list pos:line="86" pos:column="49">&lt;<argument><name pos:line="86" pos:column="50">CPos</name></argument>&gt;</argument_list></name></name><argument_list pos:line="86" pos:column="55">(<argument><expr pos:line="86" pos:column="56">out <name pos:line="86" pos:column="60">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="86" pos:column="63">||</op:operator> <op:operator pos:line="86" pos:column="66">!</op:operator><call><name><name pos:line="86" pos:column="67">right</name><op:operator pos:line="86" pos:column="72">.</op:operator><name><name pos:line="86" pos:column="73">TryGetClrValue</name><argument_list pos:line="86" pos:column="87">&lt;<argument><name pos:line="86" pos:column="88">CVec</name></argument>&gt;</argument_list></name></name><argument_list pos:line="86" pos:column="93">(<argument><expr pos:line="86" pos:column="94">out <name pos:line="86" pos:column="98">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="101">
				<throw pos:line="87" pos:column="33">throw <expr><op:operator pos:line="87" pos:column="39">new</op:operator> <call><name pos:line="87" pos:column="43">LuaException</name><argument_list pos:line="87" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="56">"Attempted to call CPos.Subtract(CPos, CVec) with invalid arguments ({0}, {1})"</lit:literal><op:operator pos:line="87" pos:column="135">.</op:operator><call><name pos:line="87" pos:column="136">F</name><argument_list pos:line="87" pos:column="137">(<argument><expr><call><name><name pos:line="87" pos:column="138">left</name><op:operator pos:line="87" pos:column="142">.</op:operator><name pos:line="87" pos:column="143">WrappedClrType</name></name><argument_list pos:line="87" pos:column="157">()</argument_list></call><op:operator pos:line="87" pos:column="159">.</op:operator><name pos:line="87" pos:column="160">Name</name></expr></argument>, <argument><expr><call><name><name pos:line="87" pos:column="166">right</name><op:operator pos:line="87" pos:column="171">.</op:operator><name pos:line="87" pos:column="172">WrappedClrType</name></name><argument_list pos:line="87" pos:column="186">()</argument_list></call><op:operator pos:line="87" pos:column="188">.</op:operator><name pos:line="87" pos:column="189">Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<return pos:line="89" pos:column="25">return <expr><op:operator pos:line="89" pos:column="32">new</op:operator> <call><name pos:line="89" pos:column="36">LuaCustomClrObject</name><argument_list pos:line="89" pos:column="54">(<argument><expr><name pos:line="89" pos:column="55">a</name> <op:operator pos:line="89" pos:column="57">-</op:operator> <name pos:line="89" pos:column="59">b</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="92" pos:column="17">public</specifier> <name pos:line="92" pos:column="24">LuaValue</name></type> <name pos:line="92" pos:column="33">Equals</name><parameter_list pos:line="92" pos:column="39">(<param><decl><type><name pos:line="92" pos:column="40">LuaRuntime</name></type> <name pos:line="92" pos:column="51">runtime</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="60">LuaValue</name></type> <name pos:line="92" pos:column="69">left</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="75">LuaValue</name></type> <name pos:line="92" pos:column="84">right</name></decl></param>)</parameter_list>
		<block pos:line="93" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="94" pos:column="25">CPos</name></type> <name pos:line="94" pos:column="30">a</name></decl><op:operator pos:line="94" pos:column="31">,</op:operator> <decl><type ref="prev"/><name pos:line="94" pos:column="33">b</name></decl>;</decl_stmt>
			<if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><op:operator pos:line="95" pos:column="29">!</op:operator><call><name><name pos:line="95" pos:column="30">left</name><op:operator pos:line="95" pos:column="34">.</op:operator><name><name pos:line="95" pos:column="35">TryGetClrValue</name><argument_list pos:line="95" pos:column="49">&lt;<argument><name pos:line="95" pos:column="50">CPos</name></argument>&gt;</argument_list></name></name><argument_list pos:line="95" pos:column="55">(<argument><expr pos:line="95" pos:column="56">out <name pos:line="95" pos:column="60">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="95" pos:column="63">||</op:operator> <op:operator pos:line="95" pos:column="66">!</op:operator><call><name><name pos:line="95" pos:column="67">right</name><op:operator pos:line="95" pos:column="72">.</op:operator><name><name pos:line="95" pos:column="73">TryGetClrValue</name><argument_list pos:line="95" pos:column="87">&lt;<argument><name pos:line="95" pos:column="88">CPos</name></argument>&gt;</argument_list></name></name><argument_list pos:line="95" pos:column="93">(<argument><expr pos:line="95" pos:column="94">out <name pos:line="95" pos:column="98">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="95" pos:column="101">
				<return pos:line="96" pos:column="33">return <expr><lit:literal type="boolean" pos:line="96" pos:column="40">false</lit:literal></expr>;</return></then></if>

			<return pos:line="98" pos:column="25">return <expr><name pos:line="98" pos:column="32">a</name> <op:operator pos:line="98" pos:column="34">==</op:operator> <name pos:line="98" pos:column="37">b</name></expr>;</return>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="101" pos:column="17">public</specifier> <name pos:line="101" pos:column="24">LuaValue</name></type> <name pos:line="101" pos:column="33">this</name><parameter_list pos:line="101" pos:column="37">[<param><decl><type><name pos:line="101" pos:column="38">LuaRuntime</name></type> <name pos:line="101" pos:column="49">runtime</name></decl></param><op:operator pos:line="101" pos:column="56">,</op:operator> <param><decl><type><name pos:line="101" pos:column="58">LuaValue</name></type> <name pos:line="101" pos:column="67">key</name></decl></param>]</parameter_list>
		<block pos:line="102" pos:column="17">{
			<function><name pos:line="103" pos:column="25">get</name>
			<block pos:line="104" pos:column="25">{
				<switch pos:line="105" pos:column="33">switch <condition pos:line="105" pos:column="40">(<expr><call><name><name pos:line="105" pos:column="41">key</name><op:operator pos:line="105" pos:column="44">.</op:operator><name pos:line="105" pos:column="45">ToString</name></name><argument_list pos:line="105" pos:column="53">()</argument_list></call></expr>)</condition>
				<block pos:line="106" pos:column="33">{
					<case pos:line="107" pos:column="41">case <expr><lit:literal type="string" pos:line="107" pos:column="46">"X"</lit:literal></expr>: <return pos:line="107" pos:column="51">return <expr><name pos:line="107" pos:column="58">X</name></expr>;</return>
					</case><case pos:line="108" pos:column="41">case <expr><lit:literal type="string" pos:line="108" pos:column="46">"Y"</lit:literal></expr>: <return pos:line="108" pos:column="51">return <expr><name pos:line="108" pos:column="58">Y</name></expr>;</return>
					</case><default pos:line="109" pos:column="41">default: <throw pos:line="109" pos:column="50">throw <expr><op:operator pos:line="109" pos:column="56">new</op:operator> <call><name pos:line="109" pos:column="60">LuaException</name><argument_list pos:line="109" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="73">"CPos does not define a member '{0}'"</lit:literal><op:operator pos:line="109" pos:column="110">.</op:operator><call><name pos:line="109" pos:column="111">F</name><argument_list pos:line="109" pos:column="112">(<argument><expr><name pos:line="109" pos:column="113">key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
				</default>}</block></switch>
			}</block></function>

			<function><name pos:line="113" pos:column="25">set</name>
			<block pos:line="114" pos:column="25">{
				<throw pos:line="115" pos:column="33">throw <expr><op:operator pos:line="115" pos:column="39">new</op:operator> <call><name pos:line="115" pos:column="43">LuaException</name><argument_list pos:line="115" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="56">"CPos is read-only. Use CPos.New to create a new value"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></function>
		}</block></decl></decl_stmt>

		<cpp:endregion pos:line="119" pos:column="17">#<cpp:directive pos:line="119" pos:column="18">endregion</cpp:directive></cpp:endregion>
	}</block></struct>
}</block></namespace></unit>
