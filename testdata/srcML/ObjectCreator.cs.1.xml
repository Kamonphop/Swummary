<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\ObjectCreator.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Linq</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Reflection</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">OpenRA</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Primitives</name></name>;</using>

<namespace pos:line="17" pos:column="1">namespace <name pos:line="17" pos:column="11">OpenRA</name>
<block pos:line="18" pos:column="1">{
	<class><specifier pos:line="19" pos:column="9">public</specifier> class <name pos:line="19" pos:column="22">ObjectCreator</name>
	<block pos:line="20" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="21" pos:column="17">readonly</specifier> <name><name pos:line="21" pos:column="26">Cache</name><argument_list pos:line="21" pos:column="31">&lt;<argument><name pos:line="21" pos:column="32">string</name></argument>, <argument><name pos:line="21" pos:column="40">Type</name></argument>&gt;</argument_list></name></type> <name pos:line="21" pos:column="46">typeCache</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="22" pos:column="17">readonly</specifier> <name><name pos:line="22" pos:column="26">Cache</name><argument_list pos:line="22" pos:column="31">&lt;<argument><name pos:line="22" pos:column="32">Type</name></argument>, <argument><name pos:line="22" pos:column="38">ConstructorInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="22" pos:column="55">ctorCache</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="23" pos:column="17">readonly</specifier> <name><name pos:line="23" pos:column="26">Pair</name><argument_list pos:line="23" pos:column="30">&lt;<argument><name pos:line="23" pos:column="31">Assembly</name></argument>, <argument><name pos:line="23" pos:column="41">string</name></argument>&gt;</argument_list></name><index pos:line="23" pos:column="48">[]</index></type> <name pos:line="23" pos:column="51">assemblies</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="25" pos:column="17">public</specifier> <name pos:line="25" pos:column="24">ObjectCreator</name><parameter_list pos:line="25" pos:column="37">(<param><decl><type><name pos:line="25" pos:column="38">Manifest</name></type> <name pos:line="25" pos:column="47">manifest</name></decl></param>)</parameter_list>
		<block pos:line="26" pos:column="17">{
			<expr_stmt><expr><name pos:line="27" pos:column="25">typeCache</name> <op:operator pos:line="27" pos:column="35">=</op:operator> <op:operator pos:line="27" pos:column="37">new</op:operator> <call><name><name pos:line="27" pos:column="41">Cache</name><argument_list pos:line="27" pos:column="46">&lt;<argument><name pos:line="27" pos:column="47">string</name></argument>, <argument><name pos:line="27" pos:column="55">Type</name></argument>&gt;</argument_list></name><argument_list pos:line="27" pos:column="60">(<argument><expr><name pos:line="27" pos:column="61">FindType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="28" pos:column="25">ctorCache</name> <op:operator pos:line="28" pos:column="35">=</op:operator> <op:operator pos:line="28" pos:column="37">new</op:operator> <call><name><name pos:line="28" pos:column="41">Cache</name><argument_list pos:line="28" pos:column="46">&lt;<argument><name pos:line="28" pos:column="47">Type</name></argument>, <argument><name pos:line="28" pos:column="53">ConstructorInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="28" pos:column="69">(<argument><expr><name pos:line="28" pos:column="70">GetCtor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="30" pos:column="25">// All the core namespaces</comment>
			<decl_stmt><decl><type><name pos:line="31" pos:column="25">var</name></type> <name pos:line="31" pos:column="29">asms</name> <init pos:line="31" pos:column="34">= <expr><call><name pos:line="31" pos:column="36">typeof</name><argument_list pos:line="31" pos:column="42">(<argument><expr><name pos:line="31" pos:column="43">Game</name></expr></argument>)</argument_list></call><op:operator pos:line="31" pos:column="48">.</op:operator><call><name><name pos:line="31" pos:column="49">Assembly</name><op:operator pos:line="31" pos:column="57">.</op:operator><name pos:line="31" pos:column="58">GetNamespaces</name></name><argument_list pos:line="31" pos:column="71">()</argument_list></call> <comment type="line" pos:line="31" pos:column="74">// Game</comment>
				<op:operator pos:line="32" pos:column="33">.</op:operator><call><name pos:line="32" pos:column="34">Select</name><argument_list pos:line="32" pos:column="40">(<argument><expr><lambda><name pos:line="32" pos:column="41">c</name> <op:operator pos:line="32" pos:column="43">=&gt;</op:operator> <call><name><name pos:line="32" pos:column="46">Pair</name><op:operator pos:line="32" pos:column="50">.</op:operator><name pos:line="32" pos:column="51">New</name></name><argument_list pos:line="32" pos:column="54">(<argument><expr><call><name pos:line="32" pos:column="55">typeof</name><argument_list pos:line="32" pos:column="61">(<argument><expr><name pos:line="32" pos:column="62">Game</name></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="67">.</op:operator><name pos:line="32" pos:column="68">Assembly</name></expr></argument>, <argument><expr><name pos:line="32" pos:column="78">c</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
				<op:operator pos:line="33" pos:column="33">.</op:operator><call><name pos:line="33" pos:column="34">ToList</name><argument_list pos:line="33" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:line="35" pos:column="25">// Namespaces from each mod assembly</comment>
			<foreach pos:line="36" pos:column="25">foreach (<init><decl><type><name pos:line="36" pos:column="34">var</name></type> <name pos:line="36" pos:column="38">a</name> <range pos:line="36" pos:column="40">in <expr><name><name pos:line="36" pos:column="43">manifest</name><op:operator pos:line="36" pos:column="51">.</op:operator><name pos:line="36" pos:column="52">Assemblies</name></name></expr></range></decl></init>)
			<block pos:line="37" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="38" pos:column="33">var</name></type> <name pos:line="38" pos:column="37">asm</name> <init pos:line="38" pos:column="41">= <expr><call><name><name pos:line="38" pos:column="43">Assembly</name><op:operator pos:line="38" pos:column="51">.</op:operator><name pos:line="38" pos:column="52">LoadFile</name></name><argument_list pos:line="38" pos:column="60">(<argument><expr><call><name><name pos:line="38" pos:column="61">Platform</name><op:operator pos:line="38" pos:column="69">.</op:operator><name pos:line="38" pos:column="70">ResolvePath</name></name><argument_list pos:line="38" pos:column="81">(<argument><expr><name pos:line="38" pos:column="82">a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="39" pos:column="33">asms</name><op:operator pos:line="39" pos:column="37">.</op:operator><name pos:line="39" pos:column="38">AddRange</name></name><argument_list pos:line="39" pos:column="46">(<argument><expr><call><name><name pos:line="39" pos:column="47">asm</name><op:operator pos:line="39" pos:column="50">.</op:operator><name pos:line="39" pos:column="51">GetNamespaces</name></name><argument_list pos:line="39" pos:column="64">()</argument_list></call><op:operator pos:line="39" pos:column="66">.</op:operator><call><name pos:line="39" pos:column="67">Select</name><argument_list pos:line="39" pos:column="73">(<argument><expr><lambda><name pos:line="39" pos:column="74">ns</name> <op:operator pos:line="39" pos:column="77">=&gt;</op:operator> <call><name><name pos:line="39" pos:column="80">Pair</name><op:operator pos:line="39" pos:column="84">.</op:operator><name pos:line="39" pos:column="85">New</name></name><argument_list pos:line="39" pos:column="88">(<argument><expr><name pos:line="39" pos:column="89">asm</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="94">ns</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>

			<expr_stmt><expr><name pos:line="42" pos:column="25">assemblies</name> <op:operator pos:line="42" pos:column="36">=</op:operator> <call><name><name pos:line="42" pos:column="38">asms</name><op:operator pos:line="42" pos:column="42">.</op:operator><name pos:line="42" pos:column="43">ToArray</name></name><argument_list pos:line="42" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<decl_stmt><decl><type><specifier pos:line="45" pos:column="17">public</specifier> <specifier pos:line="45" pos:column="24">static</specifier> <name><name pos:line="45" pos:column="31">Action</name><argument_list pos:line="45" pos:column="37">&lt;<argument><name pos:line="45" pos:column="38">string</name></argument>&gt;</argument_list></name></type> <name pos:line="45" pos:column="46">MissingTypeAction</name> <init pos:line="45" pos:column="64">=
			<expr><lambda><name pos:line="46" pos:column="25">s</name> <op:operator pos:line="46" pos:column="27">=&gt;</op:operator> <block pos:line="46" pos:column="30">{ <throw pos:line="46" pos:column="32">throw <expr><op:operator pos:line="46" pos:column="38">new</op:operator> <call><name pos:line="46" pos:column="42">InvalidOperationException</name><argument_list pos:line="46" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="68">"Cannot locate type: {0}"</lit:literal><op:operator pos:line="46" pos:column="93">.</op:operator><call><name pos:line="46" pos:column="94">F</name><argument_list pos:line="46" pos:column="95">(<argument><expr><name pos:line="46" pos:column="96">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw> }</block></lambda></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="48" pos:column="17">public</specifier> <name pos:line="48" pos:column="24">T</name></type> <name><name pos:line="48" pos:column="26">CreateObject</name><argument_list pos:line="48" pos:column="38">&lt;<argument><name pos:line="48" pos:column="39">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="48" pos:column="41">(<param><decl><type><name pos:line="48" pos:column="42">string</name></type> <name pos:line="48" pos:column="49">className</name></decl></param>)</parameter_list>
		<block pos:line="49" pos:column="17">{
			<return pos:line="50" pos:column="25">return <expr><call><name><name pos:line="50" pos:column="32">CreateObject</name><argument_list pos:line="50" pos:column="44">&lt;<argument><name pos:line="50" pos:column="45">T</name></argument>&gt;</argument_list></name><argument_list pos:line="50" pos:column="47">(<argument><expr><name pos:line="50" pos:column="48">className</name></expr></argument>, <argument><expr><op:operator pos:line="50" pos:column="59">new</op:operator> <call><name><name pos:line="50" pos:column="63">Dictionary</name><argument_list pos:line="50" pos:column="73">&lt;<argument><name pos:line="50" pos:column="74">string</name></argument>, <argument><name pos:line="50" pos:column="82">object</name></argument>&gt;</argument_list></name><argument_list pos:line="50" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="53" pos:column="17">public</specifier> <name pos:line="53" pos:column="24">T</name></type> <name><name pos:line="53" pos:column="26">CreateObject</name><argument_list pos:line="53" pos:column="38">&lt;<argument><name pos:line="53" pos:column="39">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="53" pos:column="41">(<param><decl><type><name pos:line="53" pos:column="42">string</name></type> <name pos:line="53" pos:column="49">className</name></decl></param>, <param><decl><type><name><name pos:line="53" pos:column="60">Dictionary</name><argument_list pos:line="53" pos:column="70">&lt;<argument><name pos:line="53" pos:column="71">string</name></argument>, <argument><name pos:line="53" pos:column="79">object</name></argument>&gt;</argument_list></name></type> <name pos:line="53" pos:column="87">args</name></decl></param>)</parameter_list>
		<block pos:line="54" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="55" pos:column="25">var</name></type> <name pos:line="55" pos:column="29">type</name> <init pos:line="55" pos:column="34">= <expr><name><name pos:line="55" pos:column="36">typeCache</name><index pos:line="55" pos:column="45">[<expr><name pos:line="55" pos:column="46">className</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if pos:line="56" pos:column="25">if <condition pos:line="56" pos:column="28">(<expr><name pos:line="56" pos:column="29">type</name> <op:operator pos:line="56" pos:column="34">==</op:operator> <name pos:line="56" pos:column="37">null</name></expr>)</condition><then pos:line="56" pos:column="42">
			<block pos:line="57" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="58" pos:column="33">MissingTypeAction</name><argument_list pos:line="58" pos:column="50">(<argument><expr><name pos:line="58" pos:column="51">className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="59" pos:column="33">return <expr><call><name pos:line="59" pos:column="40">default</name><argument_list pos:line="59" pos:column="47">(<argument><expr><name pos:line="59" pos:column="48">T</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>

			<decl_stmt><decl><type><name pos:line="62" pos:column="25">var</name></type> <name pos:line="62" pos:column="29">ctor</name> <init pos:line="62" pos:column="34">= <expr><name><name pos:line="62" pos:column="36">ctorCache</name><index pos:line="62" pos:column="45">[<expr><name pos:line="62" pos:column="46">type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><name pos:line="63" pos:column="29">ctor</name> <op:operator pos:line="63" pos:column="34">==</op:operator> <name pos:line="63" pos:column="37">null</name></expr>)</condition><then pos:line="63" pos:column="42">
				<return pos:line="64" pos:column="33">return <expr><op:operator pos:line="64" pos:column="40">(</op:operator><name pos:line="64" pos:column="41">T</name><op:operator pos:line="64" pos:column="42">)</op:operator><call><name pos:line="64" pos:column="43">CreateBasic</name><argument_list pos:line="64" pos:column="54">(<argument><expr><name pos:line="64" pos:column="55">type</name></expr></argument>)</argument_list></call></expr>;</return></then>
			<else pos:line="65" pos:column="25">else
				<return pos:line="66" pos:column="33">return <expr><op:operator pos:line="66" pos:column="40">(</op:operator><name pos:line="66" pos:column="41">T</name><op:operator pos:line="66" pos:column="42">)</op:operator><call><name pos:line="66" pos:column="43">CreateUsingArgs</name><argument_list pos:line="66" pos:column="58">(<argument><expr><name pos:line="66" pos:column="59">ctor</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="65">args</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
		}</block></function>

		<function><type><specifier pos:line="69" pos:column="17">public</specifier> <name pos:line="69" pos:column="24">Type</name></type> <name pos:line="69" pos:column="29">FindType</name><parameter_list pos:line="69" pos:column="37">(<param><decl><type><name pos:line="69" pos:column="38">string</name></type> <name pos:line="69" pos:column="45">className</name></decl></param>)</parameter_list>
		<block pos:line="70" pos:column="17">{
			<return pos:line="71" pos:column="25">return <expr><call><name><name pos:line="71" pos:column="32">assemblies</name>
				<op:operator pos:line="72" pos:column="33">.</op:operator><name pos:line="72" pos:column="34">Select</name></name><argument_list pos:line="72" pos:column="40">(<argument><expr><lambda><name pos:line="72" pos:column="41">pair</name> <op:operator pos:line="72" pos:column="46">=&gt;</op:operator> <call><name><name pos:line="72" pos:column="49">pair</name><op:operator pos:line="72" pos:column="53">.</op:operator><name pos:line="72" pos:column="54">First</name><op:operator pos:line="72" pos:column="59">.</op:operator><name pos:line="72" pos:column="60">GetType</name></name><argument_list pos:line="72" pos:column="67">(<argument><expr><name><name pos:line="72" pos:column="68">pair</name><op:operator pos:line="72" pos:column="72">.</op:operator><name pos:line="72" pos:column="73">Second</name></name> <op:operator pos:line="72" pos:column="80">+</op:operator> <lit:literal type="string" pos:line="72" pos:column="82">"."</lit:literal> <op:operator pos:line="72" pos:column="86">+</op:operator> <name pos:line="72" pos:column="88">className</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="72" pos:column="99">false</lit:literal></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call>
				<op:operator pos:line="73" pos:column="33">.</op:operator><call><name pos:line="73" pos:column="34">FirstOrDefault</name><argument_list pos:line="73" pos:column="48">(<argument><expr><lambda><name pos:line="73" pos:column="49">t</name> <op:operator pos:line="73" pos:column="51">=&gt;</op:operator> <name pos:line="73" pos:column="54">t</name> <op:operator pos:line="73" pos:column="56">!=</op:operator> <name pos:line="73" pos:column="59">null</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="76" pos:column="17">public</specifier> <name pos:line="76" pos:column="24">ConstructorInfo</name></type> <name pos:line="76" pos:column="40">GetCtor</name><parameter_list pos:line="76" pos:column="47">(<param><decl><type><name pos:line="76" pos:column="48">Type</name></type> <name pos:line="76" pos:column="53">type</name></decl></param>)</parameter_list>
		<block pos:line="77" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="78" pos:column="25">var</name></type> <name pos:line="78" pos:column="29">flags</name> <init pos:line="78" pos:column="35">= <expr><name><name pos:line="78" pos:column="37">BindingFlags</name><op:operator pos:line="78" pos:column="49">.</op:operator><name pos:line="78" pos:column="50">NonPublic</name></name> <op:operator pos:line="78" pos:column="60">|</op:operator> <name><name pos:line="78" pos:column="62">BindingFlags</name><op:operator pos:line="78" pos:column="74">.</op:operator><name pos:line="78" pos:column="75">Public</name></name> <op:operator pos:line="78" pos:column="82">|</op:operator> <name><name pos:line="78" pos:column="84">BindingFlags</name><op:operator pos:line="78" pos:column="96">.</op:operator><name pos:line="78" pos:column="97">Instance</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="79" pos:column="25">var</name></type> <name pos:line="79" pos:column="29">ctors</name> <init pos:line="79" pos:column="35">= <expr><call><name><name pos:line="79" pos:column="37">type</name><op:operator pos:line="79" pos:column="41">.</op:operator><name pos:line="79" pos:column="42">GetConstructors</name></name><argument_list pos:line="79" pos:column="57">(<argument><expr><name pos:line="79" pos:column="58">flags</name></expr></argument>)</argument_list></call><op:operator pos:line="79" pos:column="64">.</op:operator><call><name pos:line="79" pos:column="65">Where</name><argument_list pos:line="79" pos:column="70">(<argument><expr><lambda><name pos:line="79" pos:column="71">x</name> <op:operator pos:line="79" pos:column="73">=&gt;</op:operator> <call><name><name pos:line="79" pos:column="76">x</name><op:operator pos:line="79" pos:column="77">.</op:operator><name><name pos:line="79" pos:column="78">HasAttribute</name><argument_list pos:line="79" pos:column="90">&lt;<argument><name pos:line="79" pos:column="91">UseCtorAttribute</name></argument>&gt;</argument_list></name></name><argument_list pos:line="79" pos:column="108">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><call><name><name pos:line="80" pos:column="29">ctors</name><op:operator pos:line="80" pos:column="34">.</op:operator><name pos:line="80" pos:column="35">Count</name></name><argument_list pos:line="80" pos:column="40">()</argument_list></call> <op:operator pos:line="80" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="80" pos:column="45">1</lit:literal></expr>)</condition><then pos:line="80" pos:column="47">
				<throw pos:line="81" pos:column="33">throw <expr><op:operator pos:line="81" pos:column="39">new</op:operator> <call><name pos:line="81" pos:column="43">InvalidOperationException</name><argument_list pos:line="81" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="69">"ObjectCreator: UseCtor on multiple constructors; invalid."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
			<return pos:line="82" pos:column="25">return <expr><call><name><name pos:line="82" pos:column="32">ctors</name><op:operator pos:line="82" pos:column="37">.</op:operator><name pos:line="82" pos:column="38">FirstOrDefault</name></name><argument_list pos:line="82" pos:column="52">()</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="85" pos:column="17">public</specifier> <name pos:line="85" pos:column="24">object</name></type> <name pos:line="85" pos:column="31">CreateBasic</name><parameter_list pos:line="85" pos:column="42">(<param><decl><type><name pos:line="85" pos:column="43">Type</name></type> <name pos:line="85" pos:column="48">type</name></decl></param>)</parameter_list>
		<block pos:line="86" pos:column="17">{
			<return pos:line="87" pos:column="25">return <expr><call><name><name pos:line="87" pos:column="32">type</name><op:operator pos:line="87" pos:column="36">.</op:operator><name pos:line="87" pos:column="37">GetConstructor</name></name><argument_list pos:line="87" pos:column="51">(<argument><expr><op:operator pos:line="87" pos:column="52">new</op:operator> <name><name pos:line="87" pos:column="56">Type</name><index pos:line="87" pos:column="60">[<expr><lit:literal type="number" pos:line="87" pos:column="61">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="87" pos:column="64">.</op:operator><call><name pos:line="87" pos:column="65">Invoke</name><argument_list pos:line="87" pos:column="71">(<argument><expr><op:operator pos:line="87" pos:column="72">new</op:operator> <name><name pos:line="87" pos:column="76">object</name><index pos:line="87" pos:column="82">[<expr><lit:literal type="number" pos:line="87" pos:column="83">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="90" pos:column="17">public</specifier> <name pos:line="90" pos:column="24">object</name></type> <name pos:line="90" pos:column="31">CreateUsingArgs</name><parameter_list pos:line="90" pos:column="46">(<param><decl><type><name pos:line="90" pos:column="47">ConstructorInfo</name></type> <name pos:line="90" pos:column="63">ctor</name></decl></param>, <param><decl><type><name><name pos:line="90" pos:column="69">Dictionary</name><argument_list pos:line="90" pos:column="79">&lt;<argument><name pos:line="90" pos:column="80">string</name></argument>, <argument><name pos:line="90" pos:column="88">object</name></argument>&gt;</argument_list></name></type> <name pos:line="90" pos:column="96">args</name></decl></param>)</parameter_list>
		<block pos:line="91" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="92" pos:column="25">var</name></type> <name pos:line="92" pos:column="29">p</name> <init pos:line="92" pos:column="31">= <expr><call><name><name pos:line="92" pos:column="33">ctor</name><op:operator pos:line="92" pos:column="37">.</op:operator><name pos:line="92" pos:column="38">GetParameters</name></name><argument_list pos:line="92" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="93" pos:column="25">var</name></type> <name pos:line="93" pos:column="29">a</name> <init pos:line="93" pos:column="31">= <expr><op:operator pos:line="93" pos:column="33">new</op:operator> <name><name pos:line="93" pos:column="37">object</name><index pos:line="93" pos:column="43">[<expr><name><name pos:line="93" pos:column="44">p</name><op:operator pos:line="93" pos:column="45">.</op:operator><name pos:line="93" pos:column="46">Length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for pos:line="94" pos:column="25">for (<init><decl><type><name pos:line="94" pos:column="30">var</name></type> <name pos:line="94" pos:column="34">i</name> <init pos:line="94" pos:column="36">= <expr><lit:literal type="number" pos:line="94" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="94" pos:column="41">i</name> <op:operator pos:line="94" pos:column="43">&lt;</op:operator> <name><name pos:line="94" pos:column="45">p</name><op:operator pos:line="94" pos:column="46">.</op:operator><name pos:line="94" pos:column="47">Length</name></name></expr>;</condition> <incr><expr><name pos:line="94" pos:column="55">i</name><op:operator pos:line="94" pos:column="56">++</op:operator></expr></incr>)
			<block pos:line="95" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="96" pos:column="33">var</name></type> <name pos:line="96" pos:column="37">key</name> <init pos:line="96" pos:column="41">= <expr><name><name pos:line="96" pos:column="43">p</name><index pos:line="96" pos:column="44">[<expr><name pos:line="96" pos:column="45">i</name></expr>]</index></name><op:operator pos:line="96" pos:column="47">.</op:operator><name pos:line="96" pos:column="48">Name</name></expr></init></decl>;</decl_stmt>
				<if pos:line="97" pos:column="33">if <condition pos:line="97" pos:column="36">(<expr><op:operator pos:line="97" pos:column="37">!</op:operator><call><name><name pos:line="97" pos:column="38">args</name><op:operator pos:line="97" pos:column="42">.</op:operator><name pos:line="97" pos:column="43">ContainsKey</name></name><argument_list pos:line="97" pos:column="54">(<argument><expr><name pos:line="97" pos:column="55">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="97" pos:column="60"> <throw pos:line="97" pos:column="61">throw <expr><op:operator pos:line="97" pos:column="67">new</op:operator> <call><name pos:line="97" pos:column="71">InvalidOperationException</name><argument_list pos:line="97" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="97">"ObjectCreator: key `{0}' not found"</lit:literal><op:operator pos:line="97" pos:column="133">.</op:operator><call><name pos:line="97" pos:column="134">F</name><argument_list pos:line="97" pos:column="135">(<argument><expr><name pos:line="97" pos:column="136">key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
				<expr_stmt><expr><name><name pos:line="98" pos:column="33">a</name><index pos:line="98" pos:column="34">[<expr><name pos:line="98" pos:column="35">i</name></expr>]</index></name> <op:operator pos:line="98" pos:column="38">=</op:operator> <name><name pos:line="98" pos:column="40">args</name><index pos:line="98" pos:column="44">[<expr><name pos:line="98" pos:column="45">key</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>

			<return pos:line="101" pos:column="25">return <expr><call><name><name pos:line="101" pos:column="32">ctor</name><op:operator pos:line="101" pos:column="36">.</op:operator><name pos:line="101" pos:column="37">Invoke</name></name><argument_list pos:line="101" pos:column="43">(<argument><expr><name pos:line="101" pos:column="44">a</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="104" pos:column="17">public</specifier> <name><name pos:line="104" pos:column="24">IEnumerable</name><argument_list pos:line="104" pos:column="35">&lt;<argument><name pos:line="104" pos:column="36">Type</name></argument>&gt;</argument_list></name></type> <name><name pos:line="104" pos:column="42">GetTypesImplementing</name><argument_list pos:line="104" pos:column="62">&lt;<argument><name pos:line="104" pos:column="63">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="104" pos:column="65">()</parameter_list>
		<block pos:line="105" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="106" pos:column="25">var</name></type> <name pos:line="106" pos:column="29">it</name> <init pos:line="106" pos:column="32">= <expr><call><name pos:line="106" pos:column="34">typeof</name><argument_list pos:line="106" pos:column="40">(<argument><expr><name pos:line="106" pos:column="41">T</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:line="107" pos:column="25">return <expr><call><name pos:line="107" pos:column="32">GetTypes</name><argument_list pos:line="107" pos:column="40">()</argument_list></call><op:operator pos:line="107" pos:column="42">.</op:operator><call><name pos:line="107" pos:column="43">Where</name><argument_list pos:line="107" pos:column="48">(<argument><expr><lambda><name pos:line="107" pos:column="49">t</name> <op:operator pos:line="107" pos:column="51">=&gt;</op:operator> <name pos:line="107" pos:column="54">t</name> <op:operator pos:line="107" pos:column="56">!=</op:operator> <name pos:line="107" pos:column="59">it</name> <op:operator pos:line="107" pos:column="62">&amp;&amp;</op:operator> <call><name><name pos:line="107" pos:column="65">it</name><op:operator pos:line="107" pos:column="67">.</op:operator><name pos:line="107" pos:column="68">IsAssignableFrom</name></name><argument_list pos:line="107" pos:column="84">(<argument><expr><name pos:line="107" pos:column="85">t</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="110" pos:column="17">public</specifier> <name><name pos:line="110" pos:column="24">IEnumerable</name><argument_list pos:line="110" pos:column="35">&lt;<argument><name pos:line="110" pos:column="36">Type</name></argument>&gt;</argument_list></name></type> <name pos:line="110" pos:column="42">GetTypes</name><parameter_list pos:line="110" pos:column="50">()</parameter_list>
		<block pos:line="111" pos:column="17">{
			<return pos:line="112" pos:column="25">return <expr><call><name><name pos:line="112" pos:column="32">assemblies</name><op:operator pos:line="112" pos:column="42">.</op:operator><name pos:line="112" pos:column="43">Select</name></name><argument_list pos:line="112" pos:column="49">(<argument><expr><lambda><name pos:line="112" pos:column="50">ma</name> <op:operator pos:line="112" pos:column="53">=&gt;</op:operator> <name><name pos:line="112" pos:column="56">ma</name><op:operator pos:line="112" pos:column="58">.</op:operator><name pos:line="112" pos:column="59">First</name></name></lambda></expr></argument>)</argument_list></call><op:operator pos:line="112" pos:column="65">.</op:operator><call><name pos:line="112" pos:column="66">Distinct</name><argument_list pos:line="112" pos:column="74">()</argument_list></call>
				<op:operator pos:line="113" pos:column="33">.</op:operator><call><name pos:line="113" pos:column="34">SelectMany</name><argument_list pos:line="113" pos:column="44">(<argument><expr><lambda><name pos:line="113" pos:column="45">ma</name> <op:operator pos:line="113" pos:column="48">=&gt;</op:operator> <call><name><name pos:line="113" pos:column="51">ma</name><op:operator pos:line="113" pos:column="53">.</op:operator><name pos:line="113" pos:column="54">GetTypes</name></name><argument_list pos:line="113" pos:column="62">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<class><attribute pos:line="116" pos:column="17">[<expr><call><name pos:line="116" pos:column="18">AttributeUsage</name><argument_list pos:line="116" pos:column="32">(<argument><expr><name><name pos:line="116" pos:column="33">AttributeTargets</name><op:operator pos:line="116" pos:column="49">.</op:operator><name pos:line="116" pos:column="50">Constructor</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
		<specifier pos:line="117" pos:column="17">public</specifier> <specifier pos:line="117" pos:column="24">sealed</specifier> class <name pos:line="117" pos:column="37">UseCtorAttribute</name> <super pos:line="117" pos:column="54">: <name pos:line="117" pos:column="56">Attribute</name></super> <block pos:line="117" pos:column="66">{ }</block></class>
	}</block></class>
}</block></namespace>
</unit>
