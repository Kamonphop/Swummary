<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\Sync.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Linq</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Reflection</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Reflection</name><op:operator pos:line="15" pos:column="24">.</op:operator><name pos:line="15" pos:column="25">Emit</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">OpenRA</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Primitives</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">OpenRA</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Traits</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name pos:line="19" pos:column="11">OpenRA</name>
<block pos:line="20" pos:column="1">{
	<class><attribute pos:line="21" pos:column="9">[<expr><call><name pos:line="21" pos:column="10">AttributeUsage</name><argument_list pos:line="21" pos:column="24">(<argument><expr><name><name pos:line="21" pos:column="25">AttributeTargets</name><op:operator pos:line="21" pos:column="41">.</op:operator><name pos:line="21" pos:column="42">Field</name></name> <op:operator pos:line="21" pos:column="48">|</op:operator> <name><name pos:line="21" pos:column="50">AttributeTargets</name><op:operator pos:line="21" pos:column="66">.</op:operator><name pos:line="21" pos:column="67">Property</name></name></expr></argument>)</argument_list></call></expr>]</attribute>
	<specifier pos:line="22" pos:column="9">public</specifier> <specifier pos:line="22" pos:column="16">sealed</specifier> class <name pos:line="22" pos:column="29">SyncAttribute</name> <super pos:line="22" pos:column="43">: <name pos:line="22" pos:column="45">Attribute</name></super> <block pos:line="22" pos:column="55">{ }</block></class>

	<comment type="line" pos:line="24" pos:column="9">// Marker interface</comment>
	<class type="interface"><specifier pos:line="25" pos:column="9">public</specifier> interface <name pos:line="25" pos:column="26">ISync</name> <block pos:line="25" pos:column="32">{ }</block></class>

	<class><specifier pos:line="27" pos:column="9">public</specifier> <specifier pos:line="27" pos:column="16">static</specifier> class <name pos:line="27" pos:column="29">Sync</name>
	<block pos:line="28" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">static</specifier> <name><name pos:line="29" pos:column="24">Cache</name><argument_list pos:line="29" pos:column="29">&lt;<argument><name pos:line="29" pos:column="30">Type</name></argument>, <argument><name><name pos:line="29" pos:column="36">Func</name><argument_list pos:line="29" pos:column="40">&lt;<argument><name pos:line="29" pos:column="41">object</name></argument>, <argument><name pos:line="29" pos:column="49">int</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="29" pos:column="55">hashFuncCache</name> <init pos:line="29" pos:column="69">= <expr><op:operator pos:line="29" pos:column="71">new</op:operator> <call><name><name pos:line="29" pos:column="75">Cache</name><argument_list pos:line="29" pos:column="80">&lt;<argument><name pos:line="29" pos:column="81">Type</name></argument>, <argument><name><name pos:line="29" pos:column="87">Func</name><argument_list pos:line="29" pos:column="91">&lt;<argument><name pos:line="29" pos:column="92">object</name></argument>, <argument><name pos:line="29" pos:column="100">int</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list pos:line="29" pos:column="105">(<argument><expr><lambda><name pos:line="29" pos:column="106">t</name> <op:operator pos:line="29" pos:column="108">=&gt;</op:operator> <call><name pos:line="29" pos:column="111">GenerateHashFunc</name><argument_list pos:line="29" pos:column="127">(<argument><expr><name pos:line="29" pos:column="128">t</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="31" pos:column="17">public</specifier> <specifier pos:line="31" pos:column="24">static</specifier> <name pos:line="31" pos:column="31">int</name></type> <name pos:line="31" pos:column="35">CalculateSyncHash</name><parameter_list pos:line="31" pos:column="52">(<param><decl><type><name pos:line="31" pos:column="53">object</name></type> <name pos:line="31" pos:column="60">obj</name></decl></param>)</parameter_list>
		<block pos:line="32" pos:column="17">{
			<return pos:line="33" pos:column="25">return <expr><name><name pos:line="33" pos:column="32">hashFuncCache</name><index pos:line="33" pos:column="45">[<expr><call><name><name pos:line="33" pos:column="46">obj</name><op:operator pos:line="33" pos:column="49">.</op:operator><name pos:line="33" pos:column="50">GetType</name></name><argument_list pos:line="33" pos:column="57">()</argument_list></call></expr>]</index></name><op:operator pos:line="33" pos:column="60">(</op:operator><name pos:line="33" pos:column="61">obj</name><op:operator pos:line="33" pos:column="64">)</op:operator></expr>;</return>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="36" pos:column="17">static</specifier> <name><name pos:line="36" pos:column="24">Dictionary</name><argument_list pos:line="36" pos:column="34">&lt;<argument><name pos:line="36" pos:column="35">Type</name></argument>, <argument><name pos:line="36" pos:column="41">MethodInfo</name></argument>&gt;</argument_list></name></type> <name pos:line="36" pos:column="53">hashFunctions</name> <init pos:line="36" pos:column="67">= <expr><op:operator pos:line="36" pos:column="69">new</op:operator> <call><name><name pos:line="36" pos:column="73">Dictionary</name><argument_list pos:line="36" pos:column="83">&lt;<argument><name pos:line="36" pos:column="84">Type</name></argument>, <argument><name pos:line="36" pos:column="90">MethodInfo</name></argument>&gt;</argument_list></name><argument_list pos:line="36" pos:column="101">()</argument_list></call>
		<block pos:line="37" pos:column="17">{
			<expr><block pos:line="38" pos:column="25">{ <expr><call><name pos:line="38" pos:column="27">typeof</name><argument_list pos:line="38" pos:column="33">(<argument><expr><name pos:line="38" pos:column="34">int2</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="38" pos:column="41">(</op:operator><op:operator pos:line="38" pos:column="42">(</op:operator><name><name pos:line="38" pos:column="43">Func</name><argument_list pos:line="38" pos:column="47">&lt;<argument><name pos:line="38" pos:column="48">int2</name></argument>, <argument><name pos:line="38" pos:column="54">int</name></argument>&gt;</argument_list></name><op:operator pos:line="38" pos:column="58">)</op:operator><name pos:line="38" pos:column="59">HashInt2</name><op:operator pos:line="38" pos:column="67">)</op:operator><op:operator pos:line="38" pos:column="68">.</op:operator><name pos:line="38" pos:column="69">Method</name></expr> }</block></expr>,
			<expr><block pos:line="39" pos:column="25">{ <expr><call><name pos:line="39" pos:column="27">typeof</name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">CPos</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="39" pos:column="41">(</op:operator><op:operator pos:line="39" pos:column="42">(</op:operator><name><name pos:line="39" pos:column="43">Func</name><argument_list pos:line="39" pos:column="47">&lt;<argument><name pos:line="39" pos:column="48">CPos</name></argument>, <argument><name pos:line="39" pos:column="54">int</name></argument>&gt;</argument_list></name><op:operator pos:line="39" pos:column="58">)</op:operator><name pos:line="39" pos:column="59">HashCPos</name><op:operator pos:line="39" pos:column="67">)</op:operator><op:operator pos:line="39" pos:column="68">.</op:operator><name pos:line="39" pos:column="69">Method</name></expr> }</block></expr>,
			<expr><block pos:line="40" pos:column="25">{ <expr><call><name pos:line="40" pos:column="27">typeof</name><argument_list pos:line="40" pos:column="33">(<argument><expr><name pos:line="40" pos:column="34">CVec</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="40" pos:column="41">(</op:operator><op:operator pos:line="40" pos:column="42">(</op:operator><name><name pos:line="40" pos:column="43">Func</name><argument_list pos:line="40" pos:column="47">&lt;<argument><name pos:line="40" pos:column="48">CVec</name></argument>, <argument><name pos:line="40" pos:column="54">int</name></argument>&gt;</argument_list></name><op:operator pos:line="40" pos:column="58">)</op:operator><name pos:line="40" pos:column="59">HashCVec</name><op:operator pos:line="40" pos:column="67">)</op:operator><op:operator pos:line="40" pos:column="68">.</op:operator><name pos:line="40" pos:column="69">Method</name></expr> }</block></expr>,
			<expr><block pos:line="41" pos:column="25">{ <expr><call><name pos:line="41" pos:column="27">typeof</name><argument_list pos:line="41" pos:column="33">(<argument><expr><name pos:line="41" pos:column="34">WDist</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="41" pos:column="42">(</op:operator><op:operator pos:line="41" pos:column="43">(</op:operator><name><name pos:line="41" pos:column="44">Func</name><argument_list pos:line="41" pos:column="48">&lt;<argument><name pos:line="41" pos:column="49">WDist</name></argument>, <argument><name pos:line="41" pos:column="56">int</name></argument>&gt;</argument_list></name><op:operator pos:line="41" pos:column="60">)</op:operator><name><name pos:line="41" pos:column="61">Hash</name><argument_list pos:line="41" pos:column="65">&lt;<argument><name pos:line="41" pos:column="66">WDist</name></argument>&gt;</argument_list></name><op:operator pos:line="41" pos:column="72">)</op:operator><op:operator pos:line="41" pos:column="73">.</op:operator><name pos:line="41" pos:column="74">Method</name></expr> }</block></expr>,
			<expr><block pos:line="42" pos:column="25">{ <expr><call><name pos:line="42" pos:column="27">typeof</name><argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">WPos</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="42" pos:column="41">(</op:operator><op:operator pos:line="42" pos:column="42">(</op:operator><name><name pos:line="42" pos:column="43">Func</name><argument_list pos:line="42" pos:column="47">&lt;<argument><name pos:line="42" pos:column="48">WPos</name></argument>, <argument><name pos:line="42" pos:column="54">int</name></argument>&gt;</argument_list></name><op:operator pos:line="42" pos:column="58">)</op:operator><name><name pos:line="42" pos:column="59">Hash</name><argument_list pos:line="42" pos:column="63">&lt;<argument><name pos:line="42" pos:column="64">WPos</name></argument>&gt;</argument_list></name><op:operator pos:line="42" pos:column="69">)</op:operator><op:operator pos:line="42" pos:column="70">.</op:operator><name pos:line="42" pos:column="71">Method</name></expr> }</block></expr>,
			<expr><block pos:line="43" pos:column="25">{ <expr><call><name pos:line="43" pos:column="27">typeof</name><argument_list pos:line="43" pos:column="33">(<argument><expr><name pos:line="43" pos:column="34">WVec</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="43" pos:column="41">(</op:operator><op:operator pos:line="43" pos:column="42">(</op:operator><name><name pos:line="43" pos:column="43">Func</name><argument_list pos:line="43" pos:column="47">&lt;<argument><name pos:line="43" pos:column="48">WVec</name></argument>, <argument><name pos:line="43" pos:column="54">int</name></argument>&gt;</argument_list></name><op:operator pos:line="43" pos:column="58">)</op:operator><name><name pos:line="43" pos:column="59">Hash</name><argument_list pos:line="43" pos:column="63">&lt;<argument><name pos:line="43" pos:column="64">WVec</name></argument>&gt;</argument_list></name><op:operator pos:line="43" pos:column="69">)</op:operator><op:operator pos:line="43" pos:column="70">.</op:operator><name pos:line="43" pos:column="71">Method</name></expr> }</block></expr>,
			<expr><block pos:line="44" pos:column="25">{ <expr><call><name pos:line="44" pos:column="27">typeof</name><argument_list pos:line="44" pos:column="33">(<argument><expr><name pos:line="44" pos:column="34">WAngle</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="44" pos:column="43">(</op:operator><op:operator pos:line="44" pos:column="44">(</op:operator><name><name pos:line="44" pos:column="45">Func</name><argument_list pos:line="44" pos:column="49">&lt;<argument><name pos:line="44" pos:column="50">WAngle</name></argument>, <argument><name pos:line="44" pos:column="58">int</name></argument>&gt;</argument_list></name><op:operator pos:line="44" pos:column="62">)</op:operator><name><name pos:line="44" pos:column="63">Hash</name><argument_list pos:line="44" pos:column="67">&lt;<argument><name pos:line="44" pos:column="68">WAngle</name></argument>&gt;</argument_list></name><op:operator pos:line="44" pos:column="75">)</op:operator><op:operator pos:line="44" pos:column="76">.</op:operator><name pos:line="44" pos:column="77">Method</name></expr> }</block></expr>,
			<expr><block pos:line="45" pos:column="25">{ <expr><call><name pos:line="45" pos:column="27">typeof</name><argument_list pos:line="45" pos:column="33">(<argument><expr><name pos:line="45" pos:column="34">WRot</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="45" pos:column="41">(</op:operator><op:operator pos:line="45" pos:column="42">(</op:operator><name><name pos:line="45" pos:column="43">Func</name><argument_list pos:line="45" pos:column="47">&lt;<argument><name pos:line="45" pos:column="48">WRot</name></argument>, <argument><name pos:line="45" pos:column="54">int</name></argument>&gt;</argument_list></name><op:operator pos:line="45" pos:column="58">)</op:operator><name><name pos:line="45" pos:column="59">Hash</name><argument_list pos:line="45" pos:column="63">&lt;<argument><name pos:line="45" pos:column="64">WRot</name></argument>&gt;</argument_list></name><op:operator pos:line="45" pos:column="69">)</op:operator><op:operator pos:line="45" pos:column="70">.</op:operator><name pos:line="45" pos:column="71">Method</name></expr> }</block></expr>,
			<expr><block pos:line="46" pos:column="25">{ <expr><call><name pos:line="46" pos:column="27">typeof</name><argument_list pos:line="46" pos:column="33">(<argument><expr><name pos:line="46" pos:column="34">TypeDictionary</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="46" pos:column="51">(</op:operator><op:operator pos:line="46" pos:column="52">(</op:operator><name><name pos:line="46" pos:column="53">Func</name><argument_list pos:line="46" pos:column="57">&lt;<argument><name pos:line="46" pos:column="58">TypeDictionary</name></argument>, <argument><name pos:line="46" pos:column="74">int</name></argument>&gt;</argument_list></name><op:operator pos:line="46" pos:column="78">)</op:operator><name pos:line="46" pos:column="79">HashTDict</name><op:operator pos:line="46" pos:column="88">)</op:operator><op:operator pos:line="46" pos:column="89">.</op:operator><name pos:line="46" pos:column="90">Method</name></expr> }</block></expr>,
			<expr><block pos:line="47" pos:column="25">{ <expr><call><name pos:line="47" pos:column="27">typeof</name><argument_list pos:line="47" pos:column="33">(<argument><expr><name pos:line="47" pos:column="34">Actor</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="47" pos:column="42">(</op:operator><op:operator pos:line="47" pos:column="43">(</op:operator><name><name pos:line="47" pos:column="44">Func</name><argument_list pos:line="47" pos:column="48">&lt;<argument><name pos:line="47" pos:column="49">Actor</name></argument>, <argument><name pos:line="47" pos:column="56">int</name></argument>&gt;</argument_list></name><op:operator pos:line="47" pos:column="60">)</op:operator><name pos:line="47" pos:column="61">HashActor</name><op:operator pos:line="47" pos:column="70">)</op:operator><op:operator pos:line="47" pos:column="71">.</op:operator><name pos:line="47" pos:column="72">Method</name></expr> }</block></expr>,
			<expr><block pos:line="48" pos:column="25">{ <expr><call><name pos:line="48" pos:column="27">typeof</name><argument_list pos:line="48" pos:column="33">(<argument><expr><name pos:line="48" pos:column="34">Player</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="48" pos:column="43">(</op:operator><op:operator pos:line="48" pos:column="44">(</op:operator><name><name pos:line="48" pos:column="45">Func</name><argument_list pos:line="48" pos:column="49">&lt;<argument><name pos:line="48" pos:column="50">Player</name></argument>, <argument><name pos:line="48" pos:column="58">int</name></argument>&gt;</argument_list></name><op:operator pos:line="48" pos:column="62">)</op:operator><name pos:line="48" pos:column="63">HashPlayer</name><op:operator pos:line="48" pos:column="73">)</op:operator><op:operator pos:line="48" pos:column="74">.</op:operator><name pos:line="48" pos:column="75">Method</name></expr> }</block></expr>,
			<expr><block pos:line="49" pos:column="25">{ <expr><call><name pos:line="49" pos:column="27">typeof</name><argument_list pos:line="49" pos:column="33">(<argument><expr><name pos:line="49" pos:column="34">Target</name></expr></argument>)</argument_list></call></expr>, <expr><op:operator pos:line="49" pos:column="43">(</op:operator><op:operator pos:line="49" pos:column="44">(</op:operator><name><name pos:line="49" pos:column="45">Func</name><argument_list pos:line="49" pos:column="49">&lt;<argument><name pos:line="49" pos:column="50">Target</name></argument>, <argument><name pos:line="49" pos:column="58">int</name></argument>&gt;</argument_list></name><op:operator pos:line="49" pos:column="62">)</op:operator><name pos:line="49" pos:column="63">HashTarget</name><op:operator pos:line="49" pos:column="73">)</op:operator><op:operator pos:line="49" pos:column="74">.</op:operator><name pos:line="49" pos:column="75">Method</name></expr> }</block></expr>,
		}</block></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="52" pos:column="17">static</specifier> <name pos:line="52" pos:column="24">void</name></type> <name pos:line="52" pos:column="29">EmitSyncOpcodes</name><parameter_list pos:line="52" pos:column="44">(<param><decl><type><name pos:line="52" pos:column="45">Type</name></type> <name pos:line="52" pos:column="50">type</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="56">ILGenerator</name></type> <name pos:line="52" pos:column="68">il</name></decl></param>)</parameter_list>
		<block pos:line="53" pos:column="17">{
			<if pos:line="54" pos:column="25">if <condition pos:line="54" pos:column="28">(<expr><call><name><name pos:line="54" pos:column="29">hashFunctions</name><op:operator pos:line="54" pos:column="42">.</op:operator><name pos:line="54" pos:column="43">ContainsKey</name></name><argument_list pos:line="54" pos:column="54">(<argument><expr><name pos:line="54" pos:column="55">type</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="54" pos:column="61">
				<expr_stmt><expr><call><name><name pos:line="55" pos:column="33">il</name><op:operator pos:line="55" pos:column="35">.</op:operator><name pos:line="55" pos:column="36">EmitCall</name></name><argument_list pos:line="55" pos:column="44">(<argument><expr><name><name pos:line="55" pos:column="45">OpCodes</name><op:operator pos:line="55" pos:column="52">.</op:operator><name pos:line="55" pos:column="53">Call</name></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="59">hashFunctions</name><index pos:line="55" pos:column="72">[<expr><name pos:line="55" pos:column="73">type</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="80">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="56" pos:column="25">else <if pos:line="56" pos:column="30">if <condition pos:line="56" pos:column="33">(<expr><name pos:line="56" pos:column="34">type</name> <op:operator pos:line="56" pos:column="39">==</op:operator> <call><name pos:line="56" pos:column="42">typeof</name><argument_list pos:line="56" pos:column="48">(<argument><expr><name pos:line="56" pos:column="49">bool</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="56" pos:column="55">
			<block pos:line="57" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="58" pos:column="33">var</name></type> <name pos:line="58" pos:column="37">l</name> <init pos:line="58" pos:column="39">= <expr><call><name><name pos:line="58" pos:column="41">il</name><op:operator pos:line="58" pos:column="43">.</op:operator><name pos:line="58" pos:column="44">DefineLabel</name></name><argument_list pos:line="58" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="59" pos:column="33">il</name><op:operator pos:line="59" pos:column="35">.</op:operator><name pos:line="59" pos:column="36">Emit</name></name><argument_list pos:line="59" pos:column="40">(<argument><expr><name><name pos:line="59" pos:column="41">OpCodes</name><op:operator pos:line="59" pos:column="48">.</op:operator><name pos:line="59" pos:column="49">Ldc_I4</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="57">0xaaa</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="60" pos:column="33">il</name><op:operator pos:line="60" pos:column="35">.</op:operator><name pos:line="60" pos:column="36">Emit</name></name><argument_list pos:line="60" pos:column="40">(<argument><expr><name><name pos:line="60" pos:column="41">OpCodes</name><op:operator pos:line="60" pos:column="48">.</op:operator><name pos:line="60" pos:column="49">Brtrue</name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="57">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="61" pos:column="33">il</name><op:operator pos:line="61" pos:column="35">.</op:operator><name pos:line="61" pos:column="36">Emit</name></name><argument_list pos:line="61" pos:column="40">(<argument><expr><name><name pos:line="61" pos:column="41">OpCodes</name><op:operator pos:line="61" pos:column="48">.</op:operator><name pos:line="61" pos:column="49">Pop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="62" pos:column="33">il</name><op:operator pos:line="62" pos:column="35">.</op:operator><name pos:line="62" pos:column="36">Emit</name></name><argument_list pos:line="62" pos:column="40">(<argument><expr><name><name pos:line="62" pos:column="41">OpCodes</name><op:operator pos:line="62" pos:column="48">.</op:operator><name pos:line="62" pos:column="49">Ldc_I4</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="62" pos:column="57">0x555</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="63" pos:column="33">il</name><op:operator pos:line="63" pos:column="35">.</op:operator><name pos:line="63" pos:column="36">MarkLabel</name></name><argument_list pos:line="63" pos:column="45">(<argument><expr><name pos:line="63" pos:column="46">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="65" pos:column="25">else <if pos:line="65" pos:column="30">if <condition pos:line="65" pos:column="33">(<expr><call><name><name pos:line="65" pos:column="34">type</name><op:operator pos:line="65" pos:column="38">.</op:operator><name><name pos:line="65" pos:column="39">HasAttribute</name><argument_list pos:line="65" pos:column="51">&lt;<argument><name pos:line="65" pos:column="52">SyncAttribute</name></argument>&gt;</argument_list></name></name><argument_list pos:line="65" pos:column="66">()</argument_list></call></expr>)</condition><then pos:line="65" pos:column="69">
				<expr_stmt><expr><call><name><name pos:line="66" pos:column="33">il</name><op:operator pos:line="66" pos:column="35">.</op:operator><name pos:line="66" pos:column="36">EmitCall</name></name><argument_list pos:line="66" pos:column="44">(<argument><expr><name><name pos:line="66" pos:column="45">OpCodes</name><op:operator pos:line="66" pos:column="52">.</op:operator><name pos:line="66" pos:column="53">Call</name></name></expr></argument>, <argument><expr><op:operator pos:line="66" pos:column="59">(</op:operator><op:operator pos:line="66" pos:column="60">(</op:operator><name><name pos:line="66" pos:column="61">Func</name><argument_list pos:line="66" pos:column="65">&lt;<argument><name pos:line="66" pos:column="66">object</name></argument>, <argument><name pos:line="66" pos:column="74">int</name></argument>&gt;</argument_list></name><op:operator pos:line="66" pos:column="78">)</op:operator><name pos:line="66" pos:column="79">CalculateSyncHash</name><op:operator pos:line="66" pos:column="96">)</op:operator><op:operator pos:line="66" pos:column="97">.</op:operator><name pos:line="66" pos:column="98">Method</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="106">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="67" pos:column="25">else <if pos:line="67" pos:column="30">if <condition pos:line="67" pos:column="33">(<expr><name pos:line="67" pos:column="34">type</name> <op:operator pos:line="67" pos:column="39">!=</op:operator> <call><name pos:line="67" pos:column="42">typeof</name><argument_list pos:line="67" pos:column="48">(<argument><expr><name pos:line="67" pos:column="49">int</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="67" pos:column="54">
				<throw pos:line="68" pos:column="33">throw <expr><op:operator pos:line="68" pos:column="39">new</op:operator> <call><name pos:line="68" pos:column="43">NotImplementedException</name><argument_list pos:line="68" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="67">"SyncAttribute on member of unhashable type: {0}"</lit:literal><op:operator pos:line="68" pos:column="116">.</op:operator><call><name pos:line="68" pos:column="117">F</name><argument_list pos:line="68" pos:column="118">(<argument><expr><name><name pos:line="68" pos:column="119">type</name><op:operator pos:line="68" pos:column="123">.</op:operator><name pos:line="68" pos:column="124">FullName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if></else></if></else></if></else></if>

			<expr_stmt><expr><call><name><name pos:line="70" pos:column="25">il</name><op:operator pos:line="70" pos:column="27">.</op:operator><name pos:line="70" pos:column="28">Emit</name></name><argument_list pos:line="70" pos:column="32">(<argument><expr><name><name pos:line="70" pos:column="33">OpCodes</name><op:operator pos:line="70" pos:column="40">.</op:operator><name pos:line="70" pos:column="41">Xor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="73" pos:column="17">public</specifier> <specifier pos:line="73" pos:column="24">static</specifier> <name><name pos:line="73" pos:column="31">Func</name><argument_list pos:line="73" pos:column="35">&lt;<argument><name pos:line="73" pos:column="36">object</name></argument>, <argument><name pos:line="73" pos:column="44">int</name></argument>&gt;</argument_list></name></type> <name pos:line="73" pos:column="49">GenerateHashFunc</name><parameter_list pos:line="73" pos:column="65">(<param><decl><type><name pos:line="73" pos:column="66">Type</name></type> <name pos:line="73" pos:column="71">t</name></decl></param>)</parameter_list>
		<block pos:line="74" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="75" pos:column="25">var</name></type> <name pos:line="75" pos:column="29">d</name> <init pos:line="75" pos:column="31">= <expr><op:operator pos:line="75" pos:column="33">new</op:operator> <call><name pos:line="75" pos:column="37">DynamicMethod</name><argument_list pos:line="75" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="75" pos:column="51">"hash_{0}"</lit:literal><op:operator pos:line="75" pos:column="61">.</op:operator><call><name pos:line="75" pos:column="62">F</name><argument_list pos:line="75" pos:column="63">(<argument><expr><name><name pos:line="75" pos:column="64">t</name><op:operator pos:line="75" pos:column="65">.</op:operator><name pos:line="75" pos:column="66">Name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="75" pos:column="73">typeof</name><argument_list pos:line="75" pos:column="79">(<argument><expr><name pos:line="75" pos:column="80">int</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="75" pos:column="86">new</op:operator> <name><name pos:line="75" pos:column="90">Type</name><index pos:line="75" pos:column="94">[]</index></name> <block pos:line="75" pos:column="97">{ <expr><call><name pos:line="75" pos:column="99">typeof</name><argument_list pos:line="75" pos:column="105">(<argument><expr><name pos:line="75" pos:column="106">object</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>, <argument><expr><name pos:line="75" pos:column="117">t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="76" pos:column="25">var</name></type> <name pos:line="76" pos:column="29">il</name> <init pos:line="76" pos:column="32">= <expr><call><name><name pos:line="76" pos:column="34">d</name><op:operator pos:line="76" pos:column="35">.</op:operator><name pos:line="76" pos:column="36">GetILGenerator</name></name><argument_list pos:line="76" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="77" pos:column="25">var</name></type> <name pos:line="77" pos:column="29">this_</name> <init pos:line="77" pos:column="35">= <expr><call><name><name pos:line="77" pos:column="37">il</name><op:operator pos:line="77" pos:column="39">.</op:operator><name pos:line="77" pos:column="40">DeclareLocal</name></name><argument_list pos:line="77" pos:column="52">(<argument><expr><name pos:line="77" pos:column="53">t</name></expr></argument>)</argument_list></call><op:operator pos:line="77" pos:column="55">.</op:operator><name pos:line="77" pos:column="56">LocalIndex</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="78" pos:column="25">il</name><op:operator pos:line="78" pos:column="27">.</op:operator><name pos:line="78" pos:column="28">Emit</name></name><argument_list pos:line="78" pos:column="32">(<argument><expr><name><name pos:line="78" pos:column="33">OpCodes</name><op:operator pos:line="78" pos:column="40">.</op:operator><name pos:line="78" pos:column="41">Ldarg_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="79" pos:column="25">il</name><op:operator pos:line="79" pos:column="27">.</op:operator><name pos:line="79" pos:column="28">Emit</name></name><argument_list pos:line="79" pos:column="32">(<argument><expr><name><name pos:line="79" pos:column="33">OpCodes</name><op:operator pos:line="79" pos:column="40">.</op:operator><name pos:line="79" pos:column="41">Castclass</name></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="52">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="80" pos:column="25">il</name><op:operator pos:line="80" pos:column="27">.</op:operator><name pos:line="80" pos:column="28">Emit</name></name><argument_list pos:line="80" pos:column="32">(<argument><expr><name><name pos:line="80" pos:column="33">OpCodes</name><op:operator pos:line="80" pos:column="40">.</op:operator><name pos:line="80" pos:column="41">Stloc</name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="48">this_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="81" pos:column="25">il</name><op:operator pos:line="81" pos:column="27">.</op:operator><name pos:line="81" pos:column="28">Emit</name></name><argument_list pos:line="81" pos:column="32">(<argument><expr><name><name pos:line="81" pos:column="33">OpCodes</name><op:operator pos:line="81" pos:column="40">.</op:operator><name pos:line="81" pos:column="41">Ldc_I4_0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><specifier pos:line="83" pos:column="25">const</specifier> <name pos:line="83" pos:column="31">BindingFlags</name></type> <name pos:line="83" pos:column="44">Binding</name> <init pos:line="83" pos:column="52">= <expr><name><name pos:line="83" pos:column="54">BindingFlags</name><op:operator pos:line="83" pos:column="66">.</op:operator><name pos:line="83" pos:column="67">Public</name></name> <op:operator pos:line="83" pos:column="74">|</op:operator> <name><name pos:line="83" pos:column="76">BindingFlags</name><op:operator pos:line="83" pos:column="88">.</op:operator><name pos:line="83" pos:column="89">NonPublic</name></name> <op:operator pos:line="83" pos:column="99">|</op:operator> <name><name pos:line="83" pos:column="101">BindingFlags</name><op:operator pos:line="83" pos:column="113">.</op:operator><name pos:line="83" pos:column="114">Instance</name></name></expr></init></decl>;</decl_stmt>
			<foreach pos:line="84" pos:column="25">foreach (<init><decl><type><name pos:line="84" pos:column="34">var</name></type> <name pos:line="84" pos:column="38">field</name> <range pos:line="84" pos:column="44">in <expr><call><name><name pos:line="84" pos:column="47">t</name><op:operator pos:line="84" pos:column="48">.</op:operator><name pos:line="84" pos:column="49">GetFields</name></name><argument_list pos:line="84" pos:column="58">(<argument><expr><name pos:line="84" pos:column="59">Binding</name></expr></argument>)</argument_list></call><op:operator pos:line="84" pos:column="67">.</op:operator><call><name pos:line="84" pos:column="68">Where</name><argument_list pos:line="84" pos:column="73">(<argument><expr><lambda><name pos:line="84" pos:column="74">x</name> <op:operator pos:line="84" pos:column="76">=&gt;</op:operator> <call><name><name pos:line="84" pos:column="79">x</name><op:operator pos:line="84" pos:column="80">.</op:operator><name><name pos:line="84" pos:column="81">HasAttribute</name><argument_list pos:line="84" pos:column="93">&lt;<argument><name pos:line="84" pos:column="94">SyncAttribute</name></argument>&gt;</argument_list></name></name><argument_list pos:line="84" pos:column="108">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></range></decl></init>)
			<block pos:line="85" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="86" pos:column="33">il</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">Emit</name></name><argument_list pos:line="86" pos:column="40">(<argument><expr><name><name pos:line="86" pos:column="41">OpCodes</name><op:operator pos:line="86" pos:column="48">.</op:operator><name pos:line="86" pos:column="49">Ldloc</name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="56">this_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="87" pos:column="33">il</name><op:operator pos:line="87" pos:column="35">.</op:operator><name pos:line="87" pos:column="36">Emit</name></name><argument_list pos:line="87" pos:column="40">(<argument><expr><name><name pos:line="87" pos:column="41">OpCodes</name><op:operator pos:line="87" pos:column="48">.</op:operator><name pos:line="87" pos:column="49">Ldfld</name></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="56">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name pos:line="89" pos:column="33">EmitSyncOpcodes</name><argument_list pos:line="89" pos:column="48">(<argument><expr><name><name pos:line="89" pos:column="49">field</name><op:operator pos:line="89" pos:column="54">.</op:operator><name pos:line="89" pos:column="55">FieldType</name></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="66">il</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>

			<foreach pos:line="92" pos:column="25">foreach (<init><decl><type><name pos:line="92" pos:column="34">var</name></type> <name pos:line="92" pos:column="38">prop</name> <range pos:line="92" pos:column="43">in <expr><call><name><name pos:line="92" pos:column="46">t</name><op:operator pos:line="92" pos:column="47">.</op:operator><name pos:line="92" pos:column="48">GetProperties</name></name><argument_list pos:line="92" pos:column="61">(<argument><expr><name pos:line="92" pos:column="62">Binding</name></expr></argument>)</argument_list></call><op:operator pos:line="92" pos:column="70">.</op:operator><call><name pos:line="92" pos:column="71">Where</name><argument_list pos:line="92" pos:column="76">(<argument><expr><lambda><name pos:line="92" pos:column="77">x</name> <op:operator pos:line="92" pos:column="79">=&gt;</op:operator> <call><name><name pos:line="92" pos:column="82">x</name><op:operator pos:line="92" pos:column="83">.</op:operator><name><name pos:line="92" pos:column="84">HasAttribute</name><argument_list pos:line="92" pos:column="96">&lt;<argument><name pos:line="92" pos:column="97">SyncAttribute</name></argument>&gt;</argument_list></name></name><argument_list pos:line="92" pos:column="111">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></range></decl></init>)
			<block pos:line="93" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="94" pos:column="33">il</name><op:operator pos:line="94" pos:column="35">.</op:operator><name pos:line="94" pos:column="36">Emit</name></name><argument_list pos:line="94" pos:column="40">(<argument><expr><name><name pos:line="94" pos:column="41">OpCodes</name><op:operator pos:line="94" pos:column="48">.</op:operator><name pos:line="94" pos:column="49">Ldloc</name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="56">this_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="95" pos:column="33">il</name><op:operator pos:line="95" pos:column="35">.</op:operator><name pos:line="95" pos:column="36">EmitCall</name></name><argument_list pos:line="95" pos:column="44">(<argument><expr><name><name pos:line="95" pos:column="45">OpCodes</name><op:operator pos:line="95" pos:column="52">.</op:operator><name pos:line="95" pos:column="53">Call</name></name></expr></argument>, <argument><expr><call><name><name pos:line="95" pos:column="59">prop</name><op:operator pos:line="95" pos:column="63">.</op:operator><name pos:line="95" pos:column="64">GetGetMethod</name></name><argument_list pos:line="95" pos:column="76">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="95" pos:column="80">null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name pos:line="97" pos:column="33">EmitSyncOpcodes</name><argument_list pos:line="97" pos:column="48">(<argument><expr><name><name pos:line="97" pos:column="49">prop</name><op:operator pos:line="97" pos:column="53">.</op:operator><name pos:line="97" pos:column="54">PropertyType</name></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="68">il</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>

			<expr_stmt><expr><call><name><name pos:line="100" pos:column="25">il</name><op:operator pos:line="100" pos:column="27">.</op:operator><name pos:line="100" pos:column="28">Emit</name></name><argument_list pos:line="100" pos:column="32">(<argument><expr><name><name pos:line="100" pos:column="33">OpCodes</name><op:operator pos:line="100" pos:column="40">.</op:operator><name pos:line="100" pos:column="41">Ret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="101" pos:column="25">return <expr><op:operator pos:line="101" pos:column="32">(</op:operator><name><name pos:line="101" pos:column="33">Func</name><argument_list pos:line="101" pos:column="37">&lt;<argument><name pos:line="101" pos:column="38">object</name></argument>, <argument><name pos:line="101" pos:column="46">int</name></argument>&gt;</argument_list></name><op:operator pos:line="101" pos:column="50">)</op:operator><call><name><name pos:line="101" pos:column="51">d</name><op:operator pos:line="101" pos:column="52">.</op:operator><name pos:line="101" pos:column="53">CreateDelegate</name></name><argument_list pos:line="101" pos:column="67">(<argument><expr><call><name pos:line="101" pos:column="68">typeof</name><argument_list pos:line="101" pos:column="74">(<argument><expr><name><name pos:line="101" pos:column="75">Func</name><argument_list pos:line="101" pos:column="79">&lt;<argument><name pos:line="101" pos:column="80">object</name></argument>, <argument><name pos:line="101" pos:column="88">int</name></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="104" pos:column="17">public</specifier> <specifier pos:line="104" pos:column="24">static</specifier> <name pos:line="104" pos:column="31">int</name></type> <name pos:line="104" pos:column="35">HashInt2</name><parameter_list pos:line="104" pos:column="43">(<param><decl><type><name pos:line="104" pos:column="44">int2</name></type> <name pos:line="104" pos:column="49">i2</name></decl></param>)</parameter_list>
		<block pos:line="105" pos:column="17">{
			<return pos:line="106" pos:column="25">return <expr><op:operator pos:line="106" pos:column="32">(</op:operator><op:operator pos:line="106" pos:column="33">(</op:operator><name><name pos:line="106" pos:column="34">i2</name><op:operator pos:line="106" pos:column="36">.</op:operator><name pos:line="106" pos:column="37">X</name> <type:modifier pos:line="106" pos:column="39">*</type:modifier></name> <lit:literal type="number" pos:line="106" pos:column="41">5</lit:literal><op:operator pos:line="106" pos:column="42">)</op:operator> <op:operator pos:line="106" pos:column="44">^</op:operator> <op:operator pos:line="106" pos:column="46">(</op:operator><name><name pos:line="106" pos:column="47">i2</name><op:operator pos:line="106" pos:column="49">.</op:operator><name pos:line="106" pos:column="50">Y</name> <type:modifier pos:line="106" pos:column="52">*</type:modifier></name> <lit:literal type="number" pos:line="106" pos:column="54">3</lit:literal><op:operator pos:line="106" pos:column="55">)</op:operator><op:operator pos:line="106" pos:column="56">)</op:operator> <op:operator pos:line="106" pos:column="58">/</op:operator> <lit:literal type="number" pos:line="106" pos:column="60">4</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="109" pos:column="17">public</specifier> <specifier pos:line="109" pos:column="24">static</specifier> <name pos:line="109" pos:column="31">int</name></type> <name pos:line="109" pos:column="35">HashCPos</name><parameter_list pos:line="109" pos:column="43">(<param><decl><type><name pos:line="109" pos:column="44">CPos</name></type> <name pos:line="109" pos:column="49">i2</name></decl></param>)</parameter_list>
		<block pos:line="110" pos:column="17">{
			<return pos:line="111" pos:column="25">return <expr><op:operator pos:line="111" pos:column="32">(</op:operator><op:operator pos:line="111" pos:column="33">(</op:operator><name><name pos:line="111" pos:column="34">i2</name><op:operator pos:line="111" pos:column="36">.</op:operator><name pos:line="111" pos:column="37">X</name> <type:modifier pos:line="111" pos:column="39">*</type:modifier></name> <lit:literal type="number" pos:line="111" pos:column="41">5</lit:literal><op:operator pos:line="111" pos:column="42">)</op:operator> <op:operator pos:line="111" pos:column="44">^</op:operator> <op:operator pos:line="111" pos:column="46">(</op:operator><name><name pos:line="111" pos:column="47">i2</name><op:operator pos:line="111" pos:column="49">.</op:operator><name pos:line="111" pos:column="50">Y</name> <type:modifier pos:line="111" pos:column="52">*</type:modifier></name> <lit:literal type="number" pos:line="111" pos:column="54">3</lit:literal><op:operator pos:line="111" pos:column="55">)</op:operator><op:operator pos:line="111" pos:column="56">)</op:operator> <op:operator pos:line="111" pos:column="58">/</op:operator> <lit:literal type="number" pos:line="111" pos:column="60">4</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="114" pos:column="17">public</specifier> <specifier pos:line="114" pos:column="24">static</specifier> <name pos:line="114" pos:column="31">int</name></type> <name pos:line="114" pos:column="35">HashCVec</name><parameter_list pos:line="114" pos:column="43">(<param><decl><type><name pos:line="114" pos:column="44">CVec</name></type> <name pos:line="114" pos:column="49">i2</name></decl></param>)</parameter_list>
		<block pos:line="115" pos:column="17">{
			<return pos:line="116" pos:column="25">return <expr><op:operator pos:line="116" pos:column="32">(</op:operator><op:operator pos:line="116" pos:column="33">(</op:operator><name><name pos:line="116" pos:column="34">i2</name><op:operator pos:line="116" pos:column="36">.</op:operator><name pos:line="116" pos:column="37">X</name> <type:modifier pos:line="116" pos:column="39">*</type:modifier></name> <lit:literal type="number" pos:line="116" pos:column="41">5</lit:literal><op:operator pos:line="116" pos:column="42">)</op:operator> <op:operator pos:line="116" pos:column="44">^</op:operator> <op:operator pos:line="116" pos:column="46">(</op:operator><name><name pos:line="116" pos:column="47">i2</name><op:operator pos:line="116" pos:column="49">.</op:operator><name pos:line="116" pos:column="50">Y</name> <type:modifier pos:line="116" pos:column="52">*</type:modifier></name> <lit:literal type="number" pos:line="116" pos:column="54">3</lit:literal><op:operator pos:line="116" pos:column="55">)</op:operator><op:operator pos:line="116" pos:column="56">)</op:operator> <op:operator pos:line="116" pos:column="58">/</op:operator> <lit:literal type="number" pos:line="116" pos:column="60">4</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="119" pos:column="17">public</specifier> <specifier pos:line="119" pos:column="24">static</specifier> <name pos:line="119" pos:column="31">int</name></type> <name pos:line="119" pos:column="35">HashTDict</name><parameter_list pos:line="119" pos:column="44">(<param><decl><type><name pos:line="119" pos:column="45">TypeDictionary</name></type> <name pos:line="119" pos:column="60">d</name></decl></param>)</parameter_list>
		<block pos:line="120" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="121" pos:column="25">var</name></type> <name pos:line="121" pos:column="29">ret</name> <init pos:line="121" pos:column="33">= <expr><lit:literal type="number" pos:line="121" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
			<foreach pos:line="122" pos:column="25">foreach (<init><decl><type><name pos:line="122" pos:column="34">var</name></type> <name pos:line="122" pos:column="38">o</name> <range pos:line="122" pos:column="40">in <expr><name pos:line="122" pos:column="43">d</name></expr></range></decl></init>)
				<expr_stmt><expr><name pos:line="123" pos:column="33">ret</name> <op:operator pos:line="123" pos:column="37">+=</op:operator> <call><name pos:line="123" pos:column="40">CalculateSyncHash</name><argument_list pos:line="123" pos:column="57">(<argument><expr><name pos:line="123" pos:column="58">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
			<return pos:line="124" pos:column="25">return <expr><name pos:line="124" pos:column="32">ret</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="127" pos:column="17">public</specifier> <specifier pos:line="127" pos:column="24">static</specifier> <name pos:line="127" pos:column="31">int</name></type> <name pos:line="127" pos:column="35">HashActor</name><parameter_list pos:line="127" pos:column="44">(<param><decl><type><name pos:line="127" pos:column="45">Actor</name></type> <name pos:line="127" pos:column="51">a</name></decl></param>)</parameter_list>
		<block pos:line="128" pos:column="17">{
			<if pos:line="129" pos:column="25">if <condition pos:line="129" pos:column="28">(<expr><name pos:line="129" pos:column="29">a</name> <op:operator pos:line="129" pos:column="31">!=</op:operator> <name pos:line="129" pos:column="34">null</name></expr>)</condition><then pos:line="129" pos:column="39">
				<return pos:line="130" pos:column="33">return <expr><call pos:line="130" pos:column="40">(<name pos:line="130" pos:column="41">int</name>)<argument_list pos:line="130" pos:column="45">(<argument><expr><name><name pos:line="130" pos:column="46">a</name><op:operator pos:line="130" pos:column="47">.</op:operator><name pos:line="130" pos:column="48">ActorID</name></name> <op:operator pos:line="130" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="130" pos:column="59">16</lit:literal></expr></argument>)</argument_list></call></expr>;</return></then></if>
			<return pos:line="131" pos:column="25">return <expr><lit:literal type="number" pos:line="131" pos:column="32">0</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="134" pos:column="17">public</specifier> <specifier pos:line="134" pos:column="24">static</specifier> <name pos:line="134" pos:column="31">int</name></type> <name pos:line="134" pos:column="35">HashPlayer</name><parameter_list pos:line="134" pos:column="45">(<param><decl><type><name pos:line="134" pos:column="46">Player</name></type> <name pos:line="134" pos:column="53">p</name></decl></param>)</parameter_list>
		<block pos:line="135" pos:column="17">{
			<if pos:line="136" pos:column="25">if <condition pos:line="136" pos:column="28">(<expr><name pos:line="136" pos:column="29">p</name> <op:operator pos:line="136" pos:column="31">!=</op:operator> <name pos:line="136" pos:column="34">null</name></expr>)</condition><then pos:line="136" pos:column="39">
				<return pos:line="137" pos:column="33">return <expr><call pos:line="137" pos:column="40">(<name pos:line="137" pos:column="41">int</name>)<argument_list pos:line="137" pos:column="45">(<argument><expr><name><name pos:line="137" pos:column="46">p</name><op:operator pos:line="137" pos:column="47">.</op:operator><name pos:line="137" pos:column="48">PlayerActor</name><op:operator pos:line="137" pos:column="59">.</op:operator><name pos:line="137" pos:column="60">ActorID</name></name> <op:operator pos:line="137" pos:column="68">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="137" pos:column="71">16</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="137" pos:column="75">*</op:operator> <lit:literal type="number" pos:line="137" pos:column="77">0x567</lit:literal></expr>;</return></then></if>
			<return pos:line="138" pos:column="25">return <expr><lit:literal type="number" pos:line="138" pos:column="32">0</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="141" pos:column="17">public</specifier> <specifier pos:line="141" pos:column="24">static</specifier> <name pos:line="141" pos:column="31">int</name></type> <name pos:line="141" pos:column="35">HashTarget</name><parameter_list pos:line="141" pos:column="45">(<param><decl><type><name pos:line="141" pos:column="46">Target</name></type> <name pos:line="141" pos:column="53">t</name></decl></param>)</parameter_list>
		<block pos:line="142" pos:column="17">{
			<switch pos:line="143" pos:column="25">switch <condition pos:line="143" pos:column="32">(<expr><name><name pos:line="143" pos:column="33">t</name><op:operator pos:line="143" pos:column="34">.</op:operator><name pos:line="143" pos:column="35">Type</name></name></expr>)</condition>
			<block pos:line="144" pos:column="25">{
				<case pos:line="145" pos:column="33">case <expr><name><name pos:line="145" pos:column="38">TargetType</name><op:operator pos:line="145" pos:column="48">.</op:operator><name pos:line="145" pos:column="49">Actor</name></name></expr>:
					<return pos:line="146" pos:column="41">return <expr><call pos:line="146" pos:column="48">(<name pos:line="146" pos:column="49">int</name>)<argument_list pos:line="146" pos:column="53">(<argument><expr><name><name pos:line="146" pos:column="54">t</name><op:operator pos:line="146" pos:column="55">.</op:operator><name pos:line="146" pos:column="56">Actor</name><op:operator pos:line="146" pos:column="61">.</op:operator><name pos:line="146" pos:column="62">ActorID</name></name> <op:operator pos:line="146" pos:column="70">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="146" pos:column="73">16</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="146" pos:column="77">*</op:operator> <lit:literal type="number" pos:line="146" pos:column="79">0x567</lit:literal></expr>;</return>

				</case><case pos:line="148" pos:column="33">case <expr><name><name pos:line="148" pos:column="38">TargetType</name><op:operator pos:line="148" pos:column="48">.</op:operator><name pos:line="148" pos:column="49">FrozenActor</name></name></expr>:
					<if pos:line="149" pos:column="41">if <condition pos:line="149" pos:column="44">(<expr><name><name pos:line="149" pos:column="45">t</name><op:operator pos:line="149" pos:column="46">.</op:operator><name pos:line="149" pos:column="47">FrozenActor</name><op:operator pos:line="149" pos:column="58">.</op:operator><name pos:line="149" pos:column="59">Actor</name></name> <op:operator pos:line="149" pos:column="65">==</op:operator> <name pos:line="149" pos:column="68">null</name></expr>)</condition><then pos:line="149" pos:column="73">
						<return pos:line="150" pos:column="49">return <expr><lit:literal type="number" pos:line="150" pos:column="56">0</lit:literal></expr>;</return></then></if>

					<return pos:line="152" pos:column="41">return <expr><call pos:line="152" pos:column="48">(<name pos:line="152" pos:column="49">int</name>)<argument_list pos:line="152" pos:column="53">(<argument><expr><name><name pos:line="152" pos:column="54">t</name><op:operator pos:line="152" pos:column="55">.</op:operator><name pos:line="152" pos:column="56">FrozenActor</name><op:operator pos:line="152" pos:column="67">.</op:operator><name pos:line="152" pos:column="68">Actor</name><op:operator pos:line="152" pos:column="73">.</op:operator><name pos:line="152" pos:column="74">ActorID</name></name> <op:operator pos:line="152" pos:column="82">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="152" pos:column="85">16</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="152" pos:column="89">*</op:operator> <lit:literal type="number" pos:line="152" pos:column="91">0x567</lit:literal></expr>;</return>

				</case><case pos:line="154" pos:column="33">case <expr><name><name pos:line="154" pos:column="38">TargetType</name><op:operator pos:line="154" pos:column="48">.</op:operator><name pos:line="154" pos:column="49">Terrain</name></name></expr>:
					<return pos:line="155" pos:column="41">return <expr><call><name><name pos:line="155" pos:column="48">Hash</name><argument_list pos:line="155" pos:column="52">&lt;<argument><name pos:line="155" pos:column="53">WPos</name></argument>&gt;</argument_list></name><argument_list pos:line="155" pos:column="58">(<argument><expr><name><name pos:line="155" pos:column="59">t</name><op:operator pos:line="155" pos:column="60">.</op:operator><name pos:line="155" pos:column="61">CenterPosition</name></name></expr></argument>)</argument_list></call></expr>;</return>

				</case><default pos:line="157" pos:column="33">default:
				</default><case pos:line="158" pos:column="33">case <expr><name><name pos:line="158" pos:column="38">TargetType</name><op:operator pos:line="158" pos:column="48">.</op:operator><name pos:line="158" pos:column="49">Invalid</name></name></expr>:
					<return pos:line="159" pos:column="41">return <expr><lit:literal type="number" pos:line="159" pos:column="48">0</lit:literal></expr>;</return>
			</case>}</block></switch>
		}</block></function>

		<function><type><specifier pos:line="163" pos:column="17">public</specifier> <specifier pos:line="163" pos:column="24">static</specifier> <name pos:line="163" pos:column="31">int</name></type> <name><name pos:line="163" pos:column="35">Hash</name><argument_list pos:line="163" pos:column="39">&lt;<argument><name pos:line="163" pos:column="40">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="163" pos:column="42">(<param><decl><type><name pos:line="163" pos:column="43">T</name></type> <name pos:line="163" pos:column="45">t</name></decl></param>)</parameter_list>
		<block pos:line="164" pos:column="17">{
			<return pos:line="165" pos:column="25">return <expr><call><name><name pos:line="165" pos:column="32">t</name><op:operator pos:line="165" pos:column="33">.</op:operator><name pos:line="165" pos:column="34">GetHashCode</name></name><argument_list pos:line="165" pos:column="45">()</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="168" pos:column="17">public</specifier> <specifier pos:line="168" pos:column="24">static</specifier> <name pos:line="168" pos:column="31">void</name></type> <name pos:line="168" pos:column="36">CheckSyncUnchanged</name><parameter_list pos:line="168" pos:column="54">(<param><decl><type><name pos:line="168" pos:column="55">World</name></type> <name pos:line="168" pos:column="61">world</name></decl></param>, <param><decl><type><name pos:line="168" pos:column="68">Action</name></type> <name pos:line="168" pos:column="75">fn</name></decl></param>)</parameter_list>
		<block pos:line="169" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="170" pos:column="25">CheckSyncUnchanged</name><argument_list pos:line="170" pos:column="43">(<argument><expr><name pos:line="170" pos:column="44">world</name></expr></argument>, <argument><expr><lambda><parameter_list pos:line="170" pos:column="51">()</parameter_list> <op:operator pos:line="170" pos:column="54">=&gt;</op:operator> <block pos:line="170" pos:column="57">{ <expr_stmt><expr><call><name pos:line="170" pos:column="59">fn</name><argument_list pos:line="170" pos:column="61">()</argument_list></call></expr>;</expr_stmt> <return pos:line="170" pos:column="65">return <expr><lit:literal type="boolean" pos:line="170" pos:column="72">true</lit:literal></expr>;</return> }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="173" pos:column="17">static</specifier> <name pos:line="173" pos:column="24">bool</name></type> <name pos:line="173" pos:column="29">inUnsyncedCode</name> <init pos:line="173" pos:column="44">= <expr><lit:literal type="boolean" pos:line="173" pos:column="46">false</lit:literal></expr></init></decl>;</decl_stmt>

		<function><type><specifier pos:line="175" pos:column="17">public</specifier> <specifier pos:line="175" pos:column="24">static</specifier> <name pos:line="175" pos:column="31">T</name></type> <name><name pos:line="175" pos:column="33">CheckSyncUnchanged</name><argument_list pos:line="175" pos:column="51">&lt;<argument><name pos:line="175" pos:column="52">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="175" pos:column="54">(<param><decl><type><name pos:line="175" pos:column="55">World</name></type> <name pos:line="175" pos:column="61">world</name></decl></param>, <param><decl><type><name><name pos:line="175" pos:column="68">Func</name><argument_list pos:line="175" pos:column="72">&lt;<argument><name pos:line="175" pos:column="73">T</name></argument>&gt;</argument_list></name></type> <name pos:line="175" pos:column="76">fn</name></decl></param>)</parameter_list>
		<block pos:line="176" pos:column="17">{
			<if pos:line="177" pos:column="25">if <condition pos:line="177" pos:column="28">(<expr><name pos:line="177" pos:column="29">world</name> <op:operator pos:line="177" pos:column="35">==</op:operator> <name pos:line="177" pos:column="38">null</name></expr>)</condition><then pos:line="177" pos:column="43">
				<return pos:line="178" pos:column="33">return <expr><call><name pos:line="178" pos:column="40">fn</name><argument_list pos:line="178" pos:column="42">()</argument_list></call></expr>;</return></then></if>

			<decl_stmt><decl><type><name pos:line="180" pos:column="25">var</name></type> <name pos:line="180" pos:column="29">shouldCheckSync</name> <init pos:line="180" pos:column="45">= <expr><name><name pos:line="180" pos:column="47">Game</name><op:operator pos:line="180" pos:column="51">.</op:operator><name pos:line="180" pos:column="52">Settings</name><op:operator pos:line="180" pos:column="60">.</op:operator><name pos:line="180" pos:column="61">Debug</name><op:operator pos:line="180" pos:column="66">.</op:operator><name pos:line="180" pos:column="67">SanityCheckUnsyncedCode</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="181" pos:column="25">var</name></type> <name pos:line="181" pos:column="29">sync</name> <init pos:line="181" pos:column="34">= <expr><name pos:line="181" pos:column="36">shouldCheckSync</name> <op:operator pos:line="181" pos:column="52">?</op:operator> <call><name><name pos:line="181" pos:column="54">world</name><op:operator pos:line="181" pos:column="59">.</op:operator><name pos:line="181" pos:column="60">SyncHash</name></name><argument_list pos:line="181" pos:column="68">()</argument_list></call> <op:operator pos:line="181" pos:column="71">:</op:operator> <lit:literal type="number" pos:line="181" pos:column="73">0</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="182" pos:column="25">var</name></type> <name pos:line="182" pos:column="29">prevInUnsyncedCode</name> <init pos:line="182" pos:column="48">= <expr><name pos:line="182" pos:column="50">inUnsyncedCode</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="183" pos:column="25">inUnsyncedCode</name> <op:operator pos:line="183" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="183" pos:column="42">true</lit:literal></expr>;</expr_stmt>

			<try pos:line="185" pos:column="25">try
			<block pos:line="186" pos:column="25">{
				<return pos:line="187" pos:column="33">return <expr><call><name pos:line="187" pos:column="40">fn</name><argument_list pos:line="187" pos:column="42">()</argument_list></call></expr>;</return>
			}</block>
			<finally pos:line="189" pos:column="25">finally
			<block pos:line="190" pos:column="25">{
				<expr_stmt><expr><name pos:line="191" pos:column="33">inUnsyncedCode</name> <op:operator pos:line="191" pos:column="48">=</op:operator> <name pos:line="191" pos:column="50">prevInUnsyncedCode</name></expr>;</expr_stmt>
				<if pos:line="192" pos:column="33">if <condition pos:line="192" pos:column="36">(<expr><name pos:line="192" pos:column="37">shouldCheckSync</name> <op:operator pos:line="192" pos:column="53">&amp;&amp;</op:operator> <name pos:line="192" pos:column="56">sync</name> <op:operator pos:line="192" pos:column="61">!=</op:operator> <call><name><name pos:line="192" pos:column="64">world</name><op:operator pos:line="192" pos:column="69">.</op:operator><name pos:line="192" pos:column="70">SyncHash</name></name><argument_list pos:line="192" pos:column="78">()</argument_list></call></expr>)</condition><then pos:line="192" pos:column="81">
					<throw pos:line="193" pos:column="41">throw <expr><op:operator pos:line="193" pos:column="47">new</op:operator> <call><name pos:line="193" pos:column="51">InvalidOperationException</name><argument_list pos:line="193" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="193" pos:column="77">"CheckSyncUnchanged: sync-changing code may not run here"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
			}</block></finally></try>
		}</block></function>

		<function><type><specifier pos:line="197" pos:column="17">public</specifier> <specifier pos:line="197" pos:column="24">static</specifier> <name pos:line="197" pos:column="31">void</name></type> <name pos:line="197" pos:column="36">AssertUnsynced</name><parameter_list pos:line="197" pos:column="50">(<param><decl><type><name pos:line="197" pos:column="51">string</name></type> <name pos:line="197" pos:column="58">message</name></decl></param>)</parameter_list>
		<block pos:line="198" pos:column="17">{
			<if pos:line="199" pos:column="25">if <condition pos:line="199" pos:column="28">(<expr><op:operator pos:line="199" pos:column="29">!</op:operator><name pos:line="199" pos:column="30">inUnsyncedCode</name></expr>)</condition><then pos:line="199" pos:column="45">
				<throw pos:line="200" pos:column="33">throw <expr><op:operator pos:line="200" pos:column="39">new</op:operator> <call><name pos:line="200" pos:column="43">InvalidOperationException</name><argument_list pos:line="200" pos:column="68">(<argument><expr><name pos:line="200" pos:column="69">message</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
