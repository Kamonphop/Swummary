<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\FieldSaver.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">ComponentModel</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Drawing</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Drawing</name><op:operator pos:line="15" pos:column="21">.</op:operator><name pos:line="15" pos:column="22">Imaging</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">System</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Globalization</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">System</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Linq</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">System</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Reflection</name></name>;</using>

<namespace pos:line="20" pos:column="1">namespace <name pos:line="20" pos:column="11">OpenRA</name>
<block pos:line="21" pos:column="1">{
	<class><specifier pos:line="22" pos:column="9">public</specifier> <specifier pos:line="22" pos:column="16">static</specifier> class <name pos:line="22" pos:column="29">FieldSaver</name>
	<block pos:line="23" pos:column="9">{
		<function><type><specifier pos:line="24" pos:column="17">public</specifier> <specifier pos:line="24" pos:column="24">static</specifier> <name pos:line="24" pos:column="31">MiniYaml</name></type> <name pos:line="24" pos:column="40">Save</name><parameter_list pos:line="24" pos:column="44">(<param><decl><type><name pos:line="24" pos:column="45">object</name></type> <name pos:line="24" pos:column="52">o</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="55">bool</name></type> <name pos:line="24" pos:column="60">includePrivateByDefault</name> <init pos:line="24" pos:column="84">= <expr><lit:literal type="boolean" pos:line="24" pos:column="86">false</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="25" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="26" pos:column="25">var</name></type> <name pos:line="26" pos:column="29">nodes</name> <init pos:line="26" pos:column="35">= <expr><op:operator pos:line="26" pos:column="37">new</op:operator> <call><name><name pos:line="26" pos:column="41">List</name><argument_list pos:line="26" pos:column="45">&lt;<argument><name pos:line="26" pos:column="46">MiniYamlNode</name></argument>&gt;</argument_list></name><argument_list pos:line="26" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="27" pos:column="25">string</name></type> <name pos:line="27" pos:column="32">root</name> <init pos:line="27" pos:column="37">= <expr><name pos:line="27" pos:column="39">null</name></expr></init></decl>;</decl_stmt>

			<foreach pos:line="29" pos:column="25">foreach (<init><decl><type><name pos:line="29" pos:column="34">var</name></type> <name pos:line="29" pos:column="38">info</name> <range pos:line="29" pos:column="43">in <expr><call><name><name pos:line="29" pos:column="46">FieldLoader</name><op:operator pos:line="29" pos:column="57">.</op:operator><name pos:line="29" pos:column="58">GetTypeLoadInfo</name></name><argument_list pos:line="29" pos:column="73">(<argument><expr><call><name><name pos:line="29" pos:column="74">o</name><op:operator pos:line="29" pos:column="75">.</op:operator><name pos:line="29" pos:column="76">GetType</name></name><argument_list pos:line="29" pos:column="83">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="29" pos:column="87">includePrivateByDefault</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
			<block pos:line="30" pos:column="25">{
				<if pos:line="31" pos:column="33">if <condition pos:line="31" pos:column="36">(<expr><name><name pos:line="31" pos:column="37">info</name><op:operator pos:line="31" pos:column="41">.</op:operator><name pos:line="31" pos:column="42">Attribute</name><op:operator pos:line="31" pos:column="51">.</op:operator><name pos:line="31" pos:column="52">DictionaryFromYamlKey</name></name></expr>)</condition><then pos:line="31" pos:column="74">
				<block pos:line="32" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="33" pos:column="41">var</name></type> <name pos:line="33" pos:column="45">dict</name> <init pos:line="33" pos:column="50">= <expr><op:operator pos:line="33" pos:column="52">(</op:operator><name><name pos:line="33" pos:column="53">System</name><op:operator pos:line="33" pos:column="59">.</op:operator><name pos:line="33" pos:column="60">Collections</name><op:operator pos:line="33" pos:column="71">.</op:operator><name pos:line="33" pos:column="72">IDictionary</name></name><op:operator pos:line="33" pos:column="83">)</op:operator><call><name><name pos:line="33" pos:column="84">info</name><op:operator pos:line="33" pos:column="88">.</op:operator><name pos:line="33" pos:column="89">Field</name><op:operator pos:line="33" pos:column="94">.</op:operator><name pos:line="33" pos:column="95">GetValue</name></name><argument_list pos:line="33" pos:column="103">(<argument><expr><name pos:line="33" pos:column="104">o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<foreach pos:line="34" pos:column="41">foreach (<init><decl><type><name pos:line="34" pos:column="50">var</name></type> <name pos:line="34" pos:column="54">kvp</name> <range pos:line="34" pos:column="58">in <expr><name pos:line="34" pos:column="61">dict</name></expr></range></decl></init>)
					<block pos:line="35" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="36" pos:column="49">var</name></type> <name pos:line="36" pos:column="53">key</name> <init pos:line="36" pos:column="57">= <expr><op:operator pos:line="36" pos:column="59">(</op:operator><op:operator pos:line="36" pos:column="60">(</op:operator><name><name pos:line="36" pos:column="61">System</name><op:operator pos:line="36" pos:column="67">.</op:operator><name pos:line="36" pos:column="68">Collections</name><op:operator pos:line="36" pos:column="79">.</op:operator><name pos:line="36" pos:column="80">DictionaryEntry</name></name><op:operator pos:line="36" pos:column="95">)</op:operator><name pos:line="36" pos:column="96">kvp</name><op:operator pos:line="36" pos:column="99">)</op:operator><op:operator pos:line="36" pos:column="100">.</op:operator><name pos:line="36" pos:column="101">Key</name></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="37" pos:column="49">var</name></type> <name pos:line="37" pos:column="53">value</name> <init pos:line="37" pos:column="59">= <expr><op:operator pos:line="37" pos:column="61">(</op:operator><op:operator pos:line="37" pos:column="62">(</op:operator><name><name pos:line="37" pos:column="63">System</name><op:operator pos:line="37" pos:column="69">.</op:operator><name pos:line="37" pos:column="70">Collections</name><op:operator pos:line="37" pos:column="81">.</op:operator><name pos:line="37" pos:column="82">DictionaryEntry</name></name><op:operator pos:line="37" pos:column="97">)</op:operator><name pos:line="37" pos:column="98">kvp</name><op:operator pos:line="37" pos:column="101">)</op:operator><op:operator pos:line="37" pos:column="102">.</op:operator><name pos:line="37" pos:column="103">Value</name></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><call><name><name pos:line="39" pos:column="49">nodes</name><op:operator pos:line="39" pos:column="54">.</op:operator><name pos:line="39" pos:column="55">Add</name></name><argument_list pos:line="39" pos:column="58">(<argument><expr><op:operator pos:line="39" pos:column="59">new</op:operator> <call><name pos:line="39" pos:column="63">MiniYamlNode</name><argument_list pos:line="39" pos:column="75">(<argument><expr><call><name pos:line="39" pos:column="76">FormatValue</name><argument_list pos:line="39" pos:column="87">(<argument><expr><name pos:line="39" pos:column="88">key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="94">FormatValue</name><argument_list pos:line="39" pos:column="105">(<argument><expr><name pos:line="39" pos:column="106">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></foreach>
				}</block></then>
				<else pos:line="42" pos:column="33">else <if pos:line="42" pos:column="38">if <condition pos:line="42" pos:column="41">(<expr><name><name pos:line="42" pos:column="42">info</name><op:operator pos:line="42" pos:column="46">.</op:operator><name pos:line="42" pos:column="47">Attribute</name><op:operator pos:line="42" pos:column="56">.</op:operator><name pos:line="42" pos:column="57">FromYamlKey</name></name></expr>)</condition><then pos:line="42" pos:column="69">
					<expr_stmt><expr><name pos:line="43" pos:column="41">root</name> <op:operator pos:line="43" pos:column="46">=</op:operator> <call><name pos:line="43" pos:column="48">FormatValue</name><argument_list pos:line="43" pos:column="59">(<argument><expr><name pos:line="43" pos:column="60">o</name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="63">info</name><op:operator pos:line="43" pos:column="67">.</op:operator><name pos:line="43" pos:column="68">Field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="44" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="45" pos:column="41">nodes</name><op:operator pos:line="45" pos:column="46">.</op:operator><name pos:line="45" pos:column="47">Add</name></name><argument_list pos:line="45" pos:column="50">(<argument><expr><op:operator pos:line="45" pos:column="51">new</op:operator> <call><name pos:line="45" pos:column="55">MiniYamlNode</name><argument_list pos:line="45" pos:column="67">(<argument><expr><name><name pos:line="45" pos:column="68">info</name><op:operator pos:line="45" pos:column="72">.</op:operator><name pos:line="45" pos:column="73">YamlName</name></name></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="83">FormatValue</name><argument_list pos:line="45" pos:column="94">(<argument><expr><name pos:line="45" pos:column="95">o</name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="98">info</name><op:operator pos:line="45" pos:column="102">.</op:operator><name pos:line="45" pos:column="103">Field</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
			}</block></foreach>

			<return pos:line="48" pos:column="25">return <expr><op:operator pos:line="48" pos:column="32">new</op:operator> <call><name pos:line="48" pos:column="36">MiniYaml</name><argument_list pos:line="48" pos:column="44">(<argument><expr><name pos:line="48" pos:column="45">root</name></expr></argument>, <argument><expr><name pos:line="48" pos:column="51">nodes</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="51" pos:column="17">public</specifier> <specifier pos:line="51" pos:column="24">static</specifier> <name pos:line="51" pos:column="31">MiniYaml</name></type> <name pos:line="51" pos:column="40">SaveDifferences</name><parameter_list pos:line="51" pos:column="55">(<param><decl><type><name pos:line="51" pos:column="56">object</name></type> <name pos:line="51" pos:column="63">o</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="66">object</name></type> <name pos:line="51" pos:column="73">from</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="79">bool</name></type> <name pos:line="51" pos:column="84">includePrivateByDefault</name> <init pos:line="51" pos:column="108">= <expr><lit:literal type="boolean" pos:line="51" pos:column="110">false</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="52" pos:column="17">{
			<if pos:line="53" pos:column="25">if <condition pos:line="53" pos:column="28">(<expr><call><name><name pos:line="53" pos:column="29">o</name><op:operator pos:line="53" pos:column="30">.</op:operator><name pos:line="53" pos:column="31">GetType</name></name><argument_list pos:line="53" pos:column="38">()</argument_list></call> <op:operator pos:line="53" pos:column="41">!=</op:operator> <linq><from pos:line="53" pos:column="44">from<expr><op:operator pos:line="53" pos:column="48">.</op:operator><call><name pos:line="53" pos:column="49">GetType</name><argument_list pos:line="53" pos:column="56">()</argument_list></call></expr></from></linq></expr>)</condition><then pos:line="53" pos:column="59">
				<throw pos:line="54" pos:column="33">throw <expr><op:operator pos:line="54" pos:column="39">new</op:operator> <call><name pos:line="54" pos:column="43">InvalidOperationException</name><argument_list pos:line="54" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="54" pos:column="69">"FieldLoader: can't diff objects of different types"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<decl_stmt><decl><type><name pos:line="56" pos:column="25">var</name></type> <name pos:line="56" pos:column="29">fields</name> <init pos:line="56" pos:column="36">= <expr><call><name><name pos:line="56" pos:column="38">FieldLoader</name><op:operator pos:line="56" pos:column="49">.</op:operator><name pos:line="56" pos:column="50">GetTypeLoadInfo</name></name><argument_list pos:line="56" pos:column="65">(<argument><expr><call><name><name pos:line="56" pos:column="66">o</name><op:operator pos:line="56" pos:column="67">.</op:operator><name pos:line="56" pos:column="68">GetType</name></name><argument_list pos:line="56" pos:column="75">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="56" pos:column="79">includePrivateByDefault</name></expr></argument>)</argument_list></call>
				<op:operator pos:line="57" pos:column="33">.</op:operator><call><name pos:line="57" pos:column="34">Where</name><argument_list pos:line="57" pos:column="39">(<argument><expr><lambda><name pos:line="57" pos:column="40">info</name> <op:operator pos:line="57" pos:column="45">=&gt;</op:operator> <call><name pos:line="57" pos:column="48">FormatValue</name><argument_list pos:line="57" pos:column="59">(<argument><expr><name pos:line="57" pos:column="60">o</name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="63">info</name><op:operator pos:line="57" pos:column="67">.</op:operator><name pos:line="57" pos:column="68">Field</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="57" pos:column="75">!=</op:operator> <call><name pos:line="57" pos:column="78">FormatValue</name><argument_list pos:line="57" pos:column="89">(<argument><expr><linq><from pos:line="57" pos:column="90">from</from></linq></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="96">info</name><op:operator pos:line="57" pos:column="100">.</op:operator><name pos:line="57" pos:column="101">Field</name></name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<return pos:line="59" pos:column="25">return <expr><op:operator pos:line="59" pos:column="32">new</op:operator> <call><name pos:line="59" pos:column="36">MiniYaml</name><argument_list pos:line="59" pos:column="44">(
				<argument><expr><name pos:line="60" pos:column="33">null</name></expr></argument>,
				<argument><expr><call><name><name pos:line="61" pos:column="33">fields</name><op:operator pos:line="61" pos:column="39">.</op:operator><name pos:line="61" pos:column="40">Select</name></name><argument_list pos:line="61" pos:column="46">(<argument><expr><lambda><name pos:line="61" pos:column="47">info</name> <op:operator pos:line="61" pos:column="52">=&gt;</op:operator> <op:operator pos:line="61" pos:column="55">new</op:operator> <call><name pos:line="61" pos:column="59">MiniYamlNode</name><argument_list pos:line="61" pos:column="71">(<argument><expr><name><name pos:line="61" pos:column="72">info</name><op:operator pos:line="61" pos:column="76">.</op:operator><name pos:line="61" pos:column="77">YamlName</name></name></expr></argument>, <argument><expr><call><name pos:line="61" pos:column="87">FormatValue</name><argument_list pos:line="61" pos:column="98">(<argument><expr><name pos:line="61" pos:column="99">o</name></expr></argument>, <argument><expr><name><name pos:line="61" pos:column="102">info</name><op:operator pos:line="61" pos:column="106">.</op:operator><name pos:line="61" pos:column="107">Field</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="115">.</op:operator><call><name pos:line="61" pos:column="116">ToList</name><argument_list pos:line="61" pos:column="122">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="64" pos:column="17">public</specifier> <specifier pos:line="64" pos:column="24">static</specifier> <name pos:line="64" pos:column="31">MiniYamlNode</name></type> <name pos:line="64" pos:column="44">SaveField</name><parameter_list pos:line="64" pos:column="53">(<param><decl><type><name pos:line="64" pos:column="54">object</name></type> <name pos:line="64" pos:column="61">o</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="64">string</name></type> <name pos:line="64" pos:column="71">field</name></decl></param>)</parameter_list>
		<block pos:line="65" pos:column="17">{
			<return pos:line="66" pos:column="25">return <expr><op:operator pos:line="66" pos:column="32">new</op:operator> <call><name pos:line="66" pos:column="36">MiniYamlNode</name><argument_list pos:line="66" pos:column="48">(<argument><expr><name pos:line="66" pos:column="49">field</name></expr></argument>, <argument><expr><call><name pos:line="66" pos:column="56">FormatValue</name><argument_list pos:line="66" pos:column="67">(<argument><expr><name pos:line="66" pos:column="68">o</name></expr></argument>, <argument><expr><call><name><name pos:line="66" pos:column="71">o</name><op:operator pos:line="66" pos:column="72">.</op:operator><name pos:line="66" pos:column="73">GetType</name></name><argument_list pos:line="66" pos:column="80">()</argument_list></call><op:operator pos:line="66" pos:column="82">.</op:operator><call><name pos:line="66" pos:column="83">GetField</name><argument_list pos:line="66" pos:column="91">(<argument><expr><name pos:line="66" pos:column="92">field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="69" pos:column="17">public</specifier> <specifier pos:line="69" pos:column="24">static</specifier> <name pos:line="69" pos:column="31">string</name></type> <name pos:line="69" pos:column="38">FormatValue</name><parameter_list pos:line="69" pos:column="49">(<param><decl><type><name pos:line="69" pos:column="50">object</name></type> <name pos:line="69" pos:column="57">v</name></decl></param>)</parameter_list>
		<block pos:line="70" pos:column="17">{
			<if pos:line="71" pos:column="25">if <condition pos:line="71" pos:column="28">(<expr><name pos:line="71" pos:column="29">v</name> <op:operator pos:line="71" pos:column="31">==</op:operator> <name pos:line="71" pos:column="34">null</name></expr>)</condition><then pos:line="71" pos:column="39">
				<return pos:line="72" pos:column="33">return <expr><lit:literal type="string" pos:line="72" pos:column="40">""</lit:literal></expr>;</return></then></if>

			<decl_stmt><decl><type><name pos:line="74" pos:column="25">var</name></type> <name pos:line="74" pos:column="29">t</name> <init pos:line="74" pos:column="31">= <expr><call><name><name pos:line="74" pos:column="33">v</name><op:operator pos:line="74" pos:column="34">.</op:operator><name pos:line="74" pos:column="35">GetType</name></name><argument_list pos:line="74" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:line="76" pos:column="25">// Color.ToString() does the wrong thing; force it to format as an array</comment>
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><name pos:line="77" pos:column="29">t</name> <op:operator pos:line="77" pos:column="31">==</op:operator> <call><name pos:line="77" pos:column="34">typeof</name><argument_list pos:line="77" pos:column="40">(<argument><expr><name pos:line="77" pos:column="41">Color</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="77" pos:column="48">
			<block pos:line="78" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="79" pos:column="33">var</name></type> <name pos:line="79" pos:column="37">c</name> <init pos:line="79" pos:column="39">= <expr><op:operator pos:line="79" pos:column="41">(</op:operator><name pos:line="79" pos:column="42">Color</name><op:operator pos:line="79" pos:column="47">)</op:operator><name pos:line="79" pos:column="48">v</name></expr></init></decl>;</decl_stmt>
				<return pos:line="80" pos:column="33">return <expr><lit:literal type="string" pos:line="80" pos:column="40">"{0},{1},{2},{3}"</lit:literal><op:operator pos:line="80" pos:column="57">.</op:operator><call><name pos:line="80" pos:column="58">F</name><argument_list pos:line="80" pos:column="59">(<argument><expr><op:operator pos:line="80" pos:column="60">(</op:operator><op:operator pos:line="80" pos:column="61">(</op:operator><name pos:line="80" pos:column="62">int</name><op:operator pos:line="80" pos:column="65">)</op:operator><name><name pos:line="80" pos:column="66">c</name><op:operator pos:line="80" pos:column="67">.</op:operator><name pos:line="80" pos:column="68">A</name></name><op:operator pos:line="80" pos:column="69">)</op:operator><op:operator pos:line="80" pos:column="70">.</op:operator><call><name pos:line="80" pos:column="71">Clamp</name><argument_list pos:line="80" pos:column="76">(<argument><expr><lit:literal type="number" pos:line="80" pos:column="77">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="80" pos:column="80">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><op:operator pos:line="81" pos:column="41">(</op:operator><op:operator pos:line="81" pos:column="42">(</op:operator><name pos:line="81" pos:column="43">int</name><op:operator pos:line="81" pos:column="46">)</op:operator><name><name pos:line="81" pos:column="47">c</name><op:operator pos:line="81" pos:column="48">.</op:operator><name pos:line="81" pos:column="49">R</name></name><op:operator pos:line="81" pos:column="50">)</op:operator><op:operator pos:line="81" pos:column="51">.</op:operator><call><name pos:line="81" pos:column="52">Clamp</name><argument_list pos:line="81" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="81" pos:column="58">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="81" pos:column="61">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><op:operator pos:line="82" pos:column="41">(</op:operator><op:operator pos:line="82" pos:column="42">(</op:operator><name pos:line="82" pos:column="43">int</name><op:operator pos:line="82" pos:column="46">)</op:operator><name><name pos:line="82" pos:column="47">c</name><op:operator pos:line="82" pos:column="48">.</op:operator><name pos:line="82" pos:column="49">G</name></name><op:operator pos:line="82" pos:column="50">)</op:operator><op:operator pos:line="82" pos:column="51">.</op:operator><call><name pos:line="82" pos:column="52">Clamp</name><argument_list pos:line="82" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="82" pos:column="58">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="82" pos:column="61">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><op:operator pos:line="83" pos:column="41">(</op:operator><op:operator pos:line="83" pos:column="42">(</op:operator><name pos:line="83" pos:column="43">int</name><op:operator pos:line="83" pos:column="46">)</op:operator><name><name pos:line="83" pos:column="47">c</name><op:operator pos:line="83" pos:column="48">.</op:operator><name pos:line="83" pos:column="49">B</name></name><op:operator pos:line="83" pos:column="50">)</op:operator><op:operator pos:line="83" pos:column="51">.</op:operator><call><name pos:line="83" pos:column="52">Clamp</name><argument_list pos:line="83" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="83" pos:column="58">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="83" pos:column="61">255</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>

			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><name pos:line="86" pos:column="29">t</name> <op:operator pos:line="86" pos:column="31">==</op:operator> <call><name pos:line="86" pos:column="34">typeof</name><argument_list pos:line="86" pos:column="40">(<argument><expr><name pos:line="86" pos:column="41">ImageFormat</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="54">
			<block pos:line="87" pos:column="25">{
				<return pos:line="88" pos:column="33">return <expr><op:operator pos:line="88" pos:column="40">(</op:operator><op:operator pos:line="88" pos:column="41">(</op:operator><name pos:line="88" pos:column="42">ImageFormat</name><op:operator pos:line="88" pos:column="53">)</op:operator><name pos:line="88" pos:column="54">v</name><op:operator pos:line="88" pos:column="55">)</op:operator><op:operator pos:line="88" pos:column="56">.</op:operator><call><name pos:line="88" pos:column="57">ToString</name><argument_list pos:line="88" pos:column="65">()</argument_list></call></expr>;</return>
			}</block></then></if>

			<if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><name pos:line="91" pos:column="29">t</name> <op:operator pos:line="91" pos:column="31">==</op:operator> <call><name pos:line="91" pos:column="34">typeof</name><argument_list pos:line="91" pos:column="40">(<argument><expr><name pos:line="91" pos:column="41">Rectangle</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="91" pos:column="52">
			<block pos:line="92" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="93" pos:column="33">var</name></type> <name pos:line="93" pos:column="37">r</name> <init pos:line="93" pos:column="39">= <expr><op:operator pos:line="93" pos:column="41">(</op:operator><name pos:line="93" pos:column="42">Rectangle</name><op:operator pos:line="93" pos:column="51">)</op:operator><name pos:line="93" pos:column="52">v</name></expr></init></decl>;</decl_stmt>
				<return pos:line="94" pos:column="33">return <expr><lit:literal type="string" pos:line="94" pos:column="40">"{0},{1},{2},{3}"</lit:literal><op:operator pos:line="94" pos:column="57">.</op:operator><call><name pos:line="94" pos:column="58">F</name><argument_list pos:line="94" pos:column="59">(<argument><expr><name><name pos:line="94" pos:column="60">r</name><op:operator pos:line="94" pos:column="61">.</op:operator><name pos:line="94" pos:column="62">X</name></name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="65">r</name><op:operator pos:line="94" pos:column="66">.</op:operator><name pos:line="94" pos:column="67">Y</name></name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="70">r</name><op:operator pos:line="94" pos:column="71">.</op:operator><name pos:line="94" pos:column="72">Width</name></name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="79">r</name><op:operator pos:line="94" pos:column="80">.</op:operator><name pos:line="94" pos:column="81">Height</name></name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>

			<if pos:line="97" pos:column="25">if <condition pos:line="97" pos:column="28">(<expr><name><name pos:line="97" pos:column="29">t</name><op:operator pos:line="97" pos:column="30">.</op:operator><name pos:line="97" pos:column="31">IsArray</name> <type:modifier pos:line="97" pos:column="39">&amp;&amp;</type:modifier></name> <call><name><name pos:line="97" pos:column="42">t</name><op:operator pos:line="97" pos:column="43">.</op:operator><name pos:line="97" pos:column="44">GetArrayRank</name></name><argument_list pos:line="97" pos:column="56">()</argument_list></call> <op:operator pos:line="97" pos:column="59">==</op:operator> <lit:literal type="number" pos:line="97" pos:column="62">1</lit:literal></expr>)</condition><then pos:line="97" pos:column="64">
			<block pos:line="98" pos:column="25">{
				<return pos:line="99" pos:column="33">return <expr><op:operator pos:line="99" pos:column="40">(</op:operator><op:operator pos:line="99" pos:column="41">(</op:operator><name pos:line="99" pos:column="42">Array</name><op:operator pos:line="99" pos:column="47">)</op:operator><name pos:line="99" pos:column="48">v</name><op:operator pos:line="99" pos:column="49">)</op:operator><op:operator pos:line="99" pos:column="50">.</op:operator><call><name><name pos:line="99" pos:column="51">Cast</name><argument_list pos:line="99" pos:column="55">&lt;<argument><name pos:line="99" pos:column="56">object</name></argument>&gt;</argument_list></name><argument_list pos:line="99" pos:column="63">()</argument_list></call><op:operator pos:line="99" pos:column="65">.</op:operator><call><name pos:line="99" pos:column="66">Select</name><argument_list pos:line="99" pos:column="72">(<argument><expr><name pos:line="99" pos:column="73">FormatValue</name></expr></argument>)</argument_list></call><op:operator pos:line="99" pos:column="85">.</op:operator><call><name pos:line="99" pos:column="86">JoinWith</name><argument_list pos:line="99" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="95">", "</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>

			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><name><name pos:line="102" pos:column="29">t</name><op:operator pos:line="102" pos:column="30">.</op:operator><name pos:line="102" pos:column="31">IsGenericType</name> <type:modifier pos:line="102" pos:column="45">&amp;&amp;</type:modifier></name> <call><name><name pos:line="102" pos:column="48">t</name><op:operator pos:line="102" pos:column="49">.</op:operator><name pos:line="102" pos:column="50">GetGenericTypeDefinition</name></name><argument_list pos:line="102" pos:column="74">()</argument_list></call> <op:operator pos:line="102" pos:column="77">==</op:operator> <call><name pos:line="102" pos:column="80">typeof</name><argument_list pos:line="102" pos:column="86">(<argument><expr><name><name pos:line="102" pos:column="87">HashSet</name><argument_list pos:line="102" pos:column="94">&lt;&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="98">
			<block pos:line="103" pos:column="25">{
				<return pos:line="104" pos:column="33">return <expr><op:operator pos:line="104" pos:column="40">(</op:operator><op:operator pos:line="104" pos:column="41">(</op:operator><name><name pos:line="104" pos:column="42">System</name><op:operator pos:line="104" pos:column="48">.</op:operator><name pos:line="104" pos:column="49">Collections</name><op:operator pos:line="104" pos:column="60">.</op:operator><name pos:line="104" pos:column="61">IEnumerable</name></name><op:operator pos:line="104" pos:column="72">)</op:operator><name pos:line="104" pos:column="73">v</name><op:operator pos:line="104" pos:column="74">)</op:operator><op:operator pos:line="104" pos:column="75">.</op:operator><call><name><name pos:line="104" pos:column="76">Cast</name><argument_list pos:line="104" pos:column="80">&lt;<argument><name pos:line="104" pos:column="81">object</name></argument>&gt;</argument_list></name><argument_list pos:line="104" pos:column="88">()</argument_list></call><op:operator pos:line="104" pos:column="90">.</op:operator><call><name pos:line="104" pos:column="91">Select</name><argument_list pos:line="104" pos:column="97">(<argument><expr><name pos:line="104" pos:column="98">FormatValue</name></expr></argument>)</argument_list></call><op:operator pos:line="104" pos:column="110">.</op:operator><call><name pos:line="104" pos:column="111">JoinWith</name><argument_list pos:line="104" pos:column="119">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="120">", "</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>

			<comment type="line" pos:line="107" pos:column="25">// This is only for documentation generation</comment>
			<if pos:line="108" pos:column="25">if <condition pos:line="108" pos:column="28">(<expr><name><name pos:line="108" pos:column="29">t</name><op:operator pos:line="108" pos:column="30">.</op:operator><name pos:line="108" pos:column="31">IsGenericType</name> <type:modifier pos:line="108" pos:column="45">&amp;&amp;</type:modifier></name> <call><name><name pos:line="108" pos:column="48">t</name><op:operator pos:line="108" pos:column="49">.</op:operator><name pos:line="108" pos:column="50">GetGenericTypeDefinition</name></name><argument_list pos:line="108" pos:column="74">()</argument_list></call> <op:operator pos:line="108" pos:column="77">==</op:operator> <call><name pos:line="108" pos:column="80">typeof</name><argument_list pos:line="108" pos:column="86">(<argument><expr><name><name pos:line="108" pos:column="87">Dictionary</name><argument_list pos:line="108" pos:column="97">&lt;,&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="108" pos:column="102">
			<block pos:line="109" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="110" pos:column="33">var</name></type> <name pos:line="110" pos:column="37">result</name> <init pos:line="110" pos:column="44">= <expr><lit:literal type="string" pos:line="110" pos:column="46">""</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="111" pos:column="33">var</name></type> <name pos:line="111" pos:column="37">dict</name> <init pos:line="111" pos:column="42">= <expr><op:operator pos:line="111" pos:column="44">(</op:operator><name><name pos:line="111" pos:column="45">System</name><op:operator pos:line="111" pos:column="51">.</op:operator><name pos:line="111" pos:column="52">Collections</name><op:operator pos:line="111" pos:column="63">.</op:operator><name pos:line="111" pos:column="64">IDictionary</name></name><op:operator pos:line="111" pos:column="75">)</op:operator><name pos:line="111" pos:column="76">v</name></expr></init></decl>;</decl_stmt>
				<foreach pos:line="112" pos:column="33">foreach (<init><decl><type><name pos:line="112" pos:column="42">var</name></type> <name pos:line="112" pos:column="46">kvp</name> <range pos:line="112" pos:column="50">in <expr><name pos:line="112" pos:column="53">dict</name></expr></range></decl></init>)
				<block pos:line="113" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="114" pos:column="41">var</name></type> <name pos:line="114" pos:column="45">key</name> <init pos:line="114" pos:column="49">= <expr><op:operator pos:line="114" pos:column="51">(</op:operator><op:operator pos:line="114" pos:column="52">(</op:operator><name><name pos:line="114" pos:column="53">System</name><op:operator pos:line="114" pos:column="59">.</op:operator><name pos:line="114" pos:column="60">Collections</name><op:operator pos:line="114" pos:column="71">.</op:operator><name pos:line="114" pos:column="72">DictionaryEntry</name></name><op:operator pos:line="114" pos:column="87">)</op:operator><name pos:line="114" pos:column="88">kvp</name><op:operator pos:line="114" pos:column="91">)</op:operator><op:operator pos:line="114" pos:column="92">.</op:operator><name pos:line="114" pos:column="93">Key</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="115" pos:column="41">var</name></type> <name pos:line="115" pos:column="45">value</name> <init pos:line="115" pos:column="51">= <expr><op:operator pos:line="115" pos:column="53">(</op:operator><op:operator pos:line="115" pos:column="54">(</op:operator><name><name pos:line="115" pos:column="55">System</name><op:operator pos:line="115" pos:column="61">.</op:operator><name pos:line="115" pos:column="62">Collections</name><op:operator pos:line="115" pos:column="73">.</op:operator><name pos:line="115" pos:column="74">DictionaryEntry</name></name><op:operator pos:line="115" pos:column="89">)</op:operator><name pos:line="115" pos:column="90">kvp</name><op:operator pos:line="115" pos:column="93">)</op:operator><op:operator pos:line="115" pos:column="94">.</op:operator><name pos:line="115" pos:column="95">Value</name></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name pos:line="117" pos:column="41">var</name></type> <name pos:line="117" pos:column="45">formattedKey</name> <init pos:line="117" pos:column="58">= <expr><call><name pos:line="117" pos:column="60">FormatValue</name><argument_list pos:line="117" pos:column="71">(<argument><expr><name pos:line="117" pos:column="72">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="118" pos:column="41">var</name></type> <name pos:line="118" pos:column="45">formattedValue</name> <init pos:line="118" pos:column="60">= <expr><call><name pos:line="118" pos:column="62">FormatValue</name><argument_list pos:line="118" pos:column="73">(<argument><expr><name pos:line="118" pos:column="74">value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name pos:line="120" pos:column="41">result</name> <op:operator pos:line="120" pos:column="48">+=</op:operator> <lit:literal type="string" pos:line="120" pos:column="51">"{0}: {1}{2}"</lit:literal><op:operator pos:line="120" pos:column="64">.</op:operator><call><name pos:line="120" pos:column="65">F</name><argument_list pos:line="120" pos:column="66">(<argument><expr><name pos:line="120" pos:column="67">formattedKey</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="81">formattedValue</name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="97">Environment</name><op:operator pos:line="120" pos:column="108">.</op:operator><name pos:line="120" pos:column="109">NewLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></foreach>

				<return pos:line="123" pos:column="33">return <expr><name pos:line="123" pos:column="40">result</name></expr>;</return>
			}</block></then></if>

			<if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><name><name pos:line="126" pos:column="29">t</name><op:operator pos:line="126" pos:column="30">.</op:operator><name pos:line="126" pos:column="31">IsGenericType</name> <type:modifier pos:line="126" pos:column="45">&amp;&amp;</type:modifier></name> <call><name><name pos:line="126" pos:column="48">t</name><op:operator pos:line="126" pos:column="49">.</op:operator><name pos:line="126" pos:column="50">GetGenericTypeDefinition</name></name><argument_list pos:line="126" pos:column="74">()</argument_list></call> <op:operator pos:line="126" pos:column="77">==</op:operator> <call><name pos:line="126" pos:column="80">typeof</name><argument_list pos:line="126" pos:column="86">(<argument><expr><name><name pos:line="126" pos:column="87">OpenRA</name><op:operator pos:line="126" pos:column="93">.</op:operator><name pos:line="126" pos:column="94">Primitives</name><op:operator pos:line="126" pos:column="104">.</op:operator><name><name pos:line="126" pos:column="105">Cache</name><argument_list pos:line="126" pos:column="110">&lt;,&gt;</argument_list></name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="126" pos:column="115">
				<return pos:line="127" pos:column="33">return <expr><lit:literal type="string" pos:line="127" pos:column="40">""</lit:literal></expr>;</return></then></if> <comment type="line" pos:line="127" pos:column="44">// TODO</comment>

			<if pos:line="129" pos:column="25">if <condition pos:line="129" pos:column="28">(<expr><name pos:line="129" pos:column="29">t</name> <op:operator pos:line="129" pos:column="31">==</op:operator> <call><name pos:line="129" pos:column="34">typeof</name><argument_list pos:line="129" pos:column="40">(<argument><expr><name pos:line="129" pos:column="41">DateTime</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="129" pos:column="51">
				<return pos:line="130" pos:column="33">return <expr><op:operator pos:line="130" pos:column="40">(</op:operator><op:operator pos:line="130" pos:column="41">(</op:operator><name pos:line="130" pos:column="42">DateTime</name><op:operator pos:line="130" pos:column="50">)</op:operator><name pos:line="130" pos:column="51">v</name><op:operator pos:line="130" pos:column="52">)</op:operator><op:operator pos:line="130" pos:column="53">.</op:operator><call><name pos:line="130" pos:column="54">ToString</name><argument_list pos:line="130" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="63">"yyyy-MM-dd HH-mm-ss"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="86">CultureInfo</name><op:operator pos:line="130" pos:column="97">.</op:operator><name pos:line="130" pos:column="98">InvariantCulture</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

			<comment type="line" pos:line="132" pos:column="25">// Try the TypeConverter</comment>
			<decl_stmt><decl><type><name pos:line="133" pos:column="25">var</name></type> <name pos:line="133" pos:column="29">conv</name> <init pos:line="133" pos:column="34">= <expr><call><name><name pos:line="133" pos:column="36">TypeDescriptor</name><op:operator pos:line="133" pos:column="50">.</op:operator><name pos:line="133" pos:column="51">GetConverter</name></name><argument_list pos:line="133" pos:column="63">(<argument><expr><name pos:line="133" pos:column="64">t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="134" pos:column="25">if <condition pos:line="134" pos:column="28">(<expr><call><name><name pos:line="134" pos:column="29">conv</name><op:operator pos:line="134" pos:column="33">.</op:operator><name pos:line="134" pos:column="34">CanConvertTo</name></name><argument_list pos:line="134" pos:column="46">(<argument><expr><call><name pos:line="134" pos:column="47">typeof</name><argument_list pos:line="134" pos:column="53">(<argument><expr><name pos:line="134" pos:column="54">string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="134" pos:column="63">
			<block pos:line="135" pos:column="25">{
				<try pos:line="136" pos:column="33">try
				<block pos:line="137" pos:column="33">{
					<return pos:line="138" pos:column="41">return <expr><call><name><name pos:line="138" pos:column="48">conv</name><op:operator pos:line="138" pos:column="52">.</op:operator><name pos:line="138" pos:column="53">ConvertToInvariantString</name></name><argument_list pos:line="138" pos:column="77">(<argument><expr><name pos:line="138" pos:column="78">v</name></expr></argument>)</argument_list></call></expr>;</return>
				}</block>
				<catch pos:line="140" pos:column="33">catch
				<block pos:line="141" pos:column="33">{
				}</block></catch></try>
			}</block></then></if>

			<return pos:line="145" pos:column="25">return <expr><call><name><name pos:line="145" pos:column="32">v</name><op:operator pos:line="145" pos:column="33">.</op:operator><name pos:line="145" pos:column="34">ToString</name></name><argument_list pos:line="145" pos:column="42">()</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="148" pos:column="17">public</specifier> <specifier pos:line="148" pos:column="24">static</specifier> <name pos:line="148" pos:column="31">string</name></type> <name pos:line="148" pos:column="38">FormatValue</name><parameter_list pos:line="148" pos:column="49">(<param><decl><type><name pos:line="148" pos:column="50">object</name></type> <name pos:line="148" pos:column="57">o</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="60">FieldInfo</name></type> <name pos:line="148" pos:column="70">f</name></decl></param>)</parameter_list>
		<block pos:line="149" pos:column="17">{
			<return pos:line="150" pos:column="25">return <expr><call><name pos:line="150" pos:column="32">FormatValue</name><argument_list pos:line="150" pos:column="43">(<argument><expr><call><name><name pos:line="150" pos:column="44">f</name><op:operator pos:line="150" pos:column="45">.</op:operator><name pos:line="150" pos:column="46">GetValue</name></name><argument_list pos:line="150" pos:column="54">(<argument><expr><name pos:line="150" pos:column="55">o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
