<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\Actor.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Drawing</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name pos:line="15" pos:column="7">Eluant</name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">Eluant</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">ObjectBinding</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">OpenRA</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Activities</name></name>;</using>
<using pos:line="18" pos:column="1">using <name><name pos:line="18" pos:column="7">OpenRA</name><op:operator pos:line="18" pos:column="13">.</op:operator><name pos:line="18" pos:column="14">Graphics</name></name>;</using>
<using pos:line="19" pos:column="1">using <name><name pos:line="19" pos:column="7">OpenRA</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">Primitives</name></name>;</using>
<using pos:line="20" pos:column="1">using <name><name pos:line="20" pos:column="7">OpenRA</name><op:operator pos:line="20" pos:column="13">.</op:operator><name pos:line="20" pos:column="14">Scripting</name></name>;</using>
<using pos:line="21" pos:column="1">using <name><name pos:line="21" pos:column="7">OpenRA</name><op:operator pos:line="21" pos:column="13">.</op:operator><name pos:line="21" pos:column="14">Traits</name></name>;</using>

<namespace pos:line="23" pos:column="1">namespace <name pos:line="23" pos:column="11">OpenRA</name>
<block pos:line="24" pos:column="1">{
	<class><specifier pos:line="25" pos:column="9">public</specifier> <specifier pos:line="25" pos:column="16">sealed</specifier> class <name pos:line="25" pos:column="29">Actor</name> <super pos:line="25" pos:column="35">: <name pos:line="25" pos:column="37">IScriptBindable</name>, <name pos:line="25" pos:column="54">IScriptNotifyBind</name>, <name pos:line="25" pos:column="73">ILuaTableBinding</name>, <name pos:line="25" pos:column="91">ILuaEqualityBinding</name>, <name pos:line="25" pos:column="112">ILuaToStringBinding</name>, <name><name pos:line="25" pos:column="133">IEquatable</name><argument_list pos:line="25" pos:column="143">&lt;<argument><name pos:line="25" pos:column="144">Actor</name></argument>&gt;</argument_list></name>, <name pos:line="25" pos:column="152">IDisposable</name></super>
	<block pos:line="26" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="27" pos:column="17">public</specifier> <specifier pos:line="27" pos:column="24">readonly</specifier> <name pos:line="27" pos:column="33">ActorInfo</name></type> <name pos:line="27" pos:column="43">Info</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="29" pos:column="17">public</specifier> <specifier pos:line="29" pos:column="24">readonly</specifier> <name pos:line="29" pos:column="33">World</name></type> <name pos:line="29" pos:column="39">World</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="31" pos:column="17">public</specifier> <specifier pos:line="31" pos:column="24">readonly</specifier> <name pos:line="31" pos:column="33">uint</name></type> <name pos:line="31" pos:column="38">ActorID</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><attribute pos:line="33" pos:column="17">[<expr><name pos:line="33" pos:column="18">Sync</name></expr>]</attribute> <specifier pos:line="33" pos:column="24">public</specifier> <name pos:line="33" pos:column="31">Player</name></type> <name pos:line="33" pos:column="38">Owner</name> <block pos:line="33" pos:column="44">{ <function_decl><name pos:line="33" pos:column="46">get</name>;</function_decl> <function_decl><name pos:line="33" pos:column="51">set</name>;</function_decl> }</block></decl></decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="35" pos:column="17">public</specifier> <name pos:line="35" pos:column="24">bool</name></type> <name pos:line="35" pos:column="29">IsInWorld</name> <block pos:line="35" pos:column="39">{ <function_decl><name pos:line="35" pos:column="41">get</name>;</function_decl> <function_decl><specifier pos:line="35" pos:column="46">internal</specifier> <name pos:line="35" pos:column="55">set</name>;</function_decl> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="36" pos:column="17">public</specifier> <name pos:line="36" pos:column="24">bool</name></type> <name pos:line="36" pos:column="29">Disposed</name> <block pos:line="36" pos:column="38">{ <function_decl><name pos:line="36" pos:column="40">get</name>;</function_decl> <function_decl><specifier pos:line="36" pos:column="45">private</specifier> <name pos:line="36" pos:column="53">set</name>;</function_decl> }</block></decl></decl_stmt>

		<decl_stmt><decl><type><name pos:line="38" pos:column="17">Activity</name></type> <name pos:line="38" pos:column="26">currentActivity</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="40" pos:column="17">public</specifier> <name pos:line="40" pos:column="24">Group</name></type> <name pos:line="40" pos:column="30">Group</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="41" pos:column="17">public</specifier> <name pos:line="41" pos:column="24">int</name></type> <name pos:line="41" pos:column="28">Generation</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name><name pos:line="43" pos:column="17">Lazy</name><argument_list pos:line="43" pos:column="21">&lt;<argument><name pos:line="43" pos:column="22">Rectangle</name></argument>&gt;</argument_list></name></type> <name pos:line="43" pos:column="33">bounds</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="44" pos:column="17">Lazy</name><argument_list pos:line="44" pos:column="21">&lt;<argument><name pos:line="44" pos:column="22">Rectangle</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="33">visualBounds</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="45" pos:column="17">Lazy</name><argument_list pos:line="45" pos:column="21">&lt;<argument><name pos:line="45" pos:column="22">IFacing</name></argument>&gt;</argument_list></name></type> <name pos:line="45" pos:column="31">facing</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="46" pos:column="17">Lazy</name><argument_list pos:line="46" pos:column="21">&lt;<argument><name pos:line="46" pos:column="22">Health</name></argument>&gt;</argument_list></name></type> <name pos:line="46" pos:column="30">health</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="47" pos:column="17">Lazy</name><argument_list pos:line="47" pos:column="21">&lt;<argument><name pos:line="47" pos:column="22">IOccupySpace</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="36">occupySpace</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="48" pos:column="17">Lazy</name><argument_list pos:line="48" pos:column="21">&lt;<argument><name pos:line="48" pos:column="22">IEffectiveOwner</name></argument>&gt;</argument_list></name></type> <name pos:line="48" pos:column="39">effectiveOwner</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="50" pos:column="17">public</specifier> <name pos:line="50" pos:column="24">Rectangle</name></type> <name pos:line="50" pos:column="34">Bounds</name> <block pos:line="50" pos:column="41">{ <function><name pos:line="50" pos:column="43">get</name> <block pos:line="50" pos:column="47">{ <return pos:line="50" pos:column="49">return <expr><name><name pos:line="50" pos:column="56">bounds</name><op:operator pos:line="50" pos:column="62">.</op:operator><name pos:line="50" pos:column="63">Value</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="51" pos:column="17">public</specifier> <name pos:line="51" pos:column="24">Rectangle</name></type> <name pos:line="51" pos:column="34">VisualBounds</name> <block pos:line="51" pos:column="47">{ <function><name pos:line="51" pos:column="49">get</name> <block pos:line="51" pos:column="53">{ <return pos:line="51" pos:column="55">return <expr><name><name pos:line="51" pos:column="62">visualBounds</name><op:operator pos:line="51" pos:column="74">.</op:operator><name pos:line="51" pos:column="75">Value</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="52" pos:column="17">public</specifier> <name pos:line="52" pos:column="24">IOccupySpace</name></type> <name pos:line="52" pos:column="37">OccupiesSpace</name> <block pos:line="52" pos:column="51">{ <function><name pos:line="52" pos:column="53">get</name> <block pos:line="52" pos:column="57">{ <return pos:line="52" pos:column="59">return <expr><name><name pos:line="52" pos:column="66">occupySpace</name><op:operator pos:line="52" pos:column="77">.</op:operator><name pos:line="52" pos:column="78">Value</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="53" pos:column="17">public</specifier> <name pos:line="53" pos:column="24">IEffectiveOwner</name></type> <name pos:line="53" pos:column="40">EffectiveOwner</name> <block pos:line="53" pos:column="55">{ <function><name pos:line="53" pos:column="57">get</name> <block pos:line="53" pos:column="61">{ <return pos:line="53" pos:column="63">return <expr><name><name pos:line="53" pos:column="70">effectiveOwner</name><op:operator pos:line="53" pos:column="84">.</op:operator><name pos:line="53" pos:column="85">Value</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="55" pos:column="17">public</specifier> <name pos:line="55" pos:column="24">bool</name></type> <name pos:line="55" pos:column="29">IsIdle</name> <block pos:line="55" pos:column="36">{ <function><name pos:line="55" pos:column="38">get</name> <block pos:line="55" pos:column="42">{ <return pos:line="55" pos:column="44">return <expr><name pos:line="55" pos:column="51">currentActivity</name> <op:operator pos:line="55" pos:column="67">==</op:operator> <name pos:line="55" pos:column="70">null</name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="56" pos:column="17">public</specifier> <name pos:line="56" pos:column="24">bool</name></type> <name pos:line="56" pos:column="29">IsDead</name> <block pos:line="56" pos:column="36">{ <function><name pos:line="56" pos:column="38">get</name> <block pos:line="56" pos:column="42">{ <return pos:line="56" pos:column="44">return <expr><name pos:line="56" pos:column="51">Disposed</name> <op:operator pos:line="56" pos:column="60">||</op:operator> <op:operator pos:line="56" pos:column="63">(</op:operator><name><name pos:line="56" pos:column="64">health</name><op:operator pos:line="56" pos:column="70">.</op:operator><name pos:line="56" pos:column="71">Value</name></name> <op:operator pos:line="56" pos:column="77">==</op:operator> <name pos:line="56" pos:column="80">null</name> <op:operator pos:line="56" pos:column="85">?</op:operator> <lit:literal type="boolean" pos:line="56" pos:column="87">false</lit:literal> <op:operator pos:line="56" pos:column="93">:</op:operator> <name><name pos:line="56" pos:column="95">health</name><op:operator pos:line="56" pos:column="101">.</op:operator><name pos:line="56" pos:column="102">Value</name><op:operator pos:line="56" pos:column="107">.</op:operator><name pos:line="56" pos:column="108">IsDead</name></name><op:operator pos:line="56" pos:column="114">)</op:operator></expr>;</return> }</block></function> }</block></decl></decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="58" pos:column="17">public</specifier> <name pos:line="58" pos:column="24">CPos</name></type> <name pos:line="58" pos:column="29">Location</name> <block pos:line="58" pos:column="38">{ <function><name pos:line="58" pos:column="40">get</name> <block pos:line="58" pos:column="44">{ <return pos:line="58" pos:column="46">return <expr><name><name pos:line="58" pos:column="53">occupySpace</name><op:operator pos:line="58" pos:column="64">.</op:operator><name pos:line="58" pos:column="65">Value</name><op:operator pos:line="58" pos:column="70">.</op:operator><name pos:line="58" pos:column="71">TopLeft</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="59" pos:column="17">public</specifier> <name pos:line="59" pos:column="24">WPos</name></type> <name pos:line="59" pos:column="29">CenterPosition</name> <block pos:line="59" pos:column="44">{ <function><name pos:line="59" pos:column="46">get</name> <block pos:line="59" pos:column="50">{ <return pos:line="59" pos:column="52">return <expr><name><name pos:line="59" pos:column="59">occupySpace</name><op:operator pos:line="59" pos:column="70">.</op:operator><name pos:line="59" pos:column="71">Value</name><op:operator pos:line="59" pos:column="76">.</op:operator><name pos:line="59" pos:column="77">CenterPosition</name></name></expr>;</return> }</block></function> }</block></decl></decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="61" pos:column="17">public</specifier> <name pos:line="61" pos:column="24">WRot</name></type> <name pos:line="61" pos:column="29">Orientation</name>
		<block pos:line="62" pos:column="17">{
			<function><name pos:line="63" pos:column="25">get</name>
			<block pos:line="64" pos:column="25">{
				<comment type="line" pos:line="65" pos:column="33">// TODO: Support non-zero pitch/roll in IFacing (IOrientation?)</comment>
				<decl_stmt><decl><type><name pos:line="66" pos:column="33">var</name></type> <name pos:line="66" pos:column="37">facingValue</name> <init pos:line="66" pos:column="49">= <expr><name><name pos:line="66" pos:column="51">facing</name><op:operator pos:line="66" pos:column="57">.</op:operator><name pos:line="66" pos:column="58">Value</name></name> <op:operator pos:line="66" pos:column="64">!=</op:operator> <name pos:line="66" pos:column="67">null</name> <op:operator pos:line="66" pos:column="72">?</op:operator> <name><name pos:line="66" pos:column="74">facing</name><op:operator pos:line="66" pos:column="80">.</op:operator><name pos:line="66" pos:column="81">Value</name><op:operator pos:line="66" pos:column="86">.</op:operator><name pos:line="66" pos:column="87">Facing</name></name> <op:operator pos:line="66" pos:column="94">:</op:operator> <lit:literal type="number" pos:line="66" pos:column="96">0</lit:literal></expr></init></decl>;</decl_stmt>
				<return pos:line="67" pos:column="33">return <expr><op:operator pos:line="67" pos:column="40">new</op:operator> <call><name pos:line="67" pos:column="44">WRot</name><argument_list pos:line="67" pos:column="48">(<argument><expr><name><name pos:line="67" pos:column="49">WAngle</name><op:operator pos:line="67" pos:column="55">.</op:operator><name pos:line="67" pos:column="56">Zero</name></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="62">WAngle</name><op:operator pos:line="67" pos:column="68">.</op:operator><name pos:line="67" pos:column="69">Zero</name></name></expr></argument>, <argument><expr><call><name><name pos:line="67" pos:column="75">WAngle</name><op:operator pos:line="67" pos:column="81">.</op:operator><name pos:line="67" pos:column="82">FromFacing</name></name><argument_list pos:line="67" pos:column="92">(<argument><expr><name pos:line="67" pos:column="93">facingValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>
		}</block></decl></decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="71" pos:column="17">readonly</specifier> <name pos:line="71" pos:column="26">IRenderModifier</name><index pos:line="71" pos:column="41">[]</index></type> <name pos:line="71" pos:column="44">renderModifiers</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="72" pos:column="17">readonly</specifier> <name pos:line="72" pos:column="26">IRender</name><index pos:line="72" pos:column="33">[]</index></type> <name pos:line="72" pos:column="36">renders</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="73" pos:column="17">readonly</specifier> <name pos:line="73" pos:column="26">IDisable</name><index pos:line="73" pos:column="34">[]</index></type> <name pos:line="73" pos:column="37">disables</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="74" pos:column="17">readonly</specifier> <name pos:line="74" pos:column="26">IVisibilityModifier</name><index pos:line="74" pos:column="45">[]</index></type> <name pos:line="74" pos:column="48">visibilityModifiers</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="75" pos:column="17">readonly</specifier> <name pos:line="75" pos:column="26">IDefaultVisibility</name></type> <name pos:line="75" pos:column="45">defaultVisibility</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="77" pos:column="17">internal</specifier> <name pos:line="77" pos:column="26">Actor</name><parameter_list pos:line="77" pos:column="31">(<param><decl><type><name pos:line="77" pos:column="32">World</name></type> <name pos:line="77" pos:column="38">world</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="45">string</name></type> <name pos:line="77" pos:column="52">name</name></decl></param>, <param><decl><type><name pos:line="77" pos:column="58">TypeDictionary</name></type> <name pos:line="77" pos:column="73">initDict</name></decl></param>)</parameter_list>
		<block pos:line="78" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="79" pos:column="25">var</name></type> <name pos:line="79" pos:column="29">init</name> <init pos:line="79" pos:column="34">= <expr><op:operator pos:line="79" pos:column="36">new</op:operator> <call><name pos:line="79" pos:column="40">ActorInitializer</name><argument_list pos:line="79" pos:column="56">(<argument><expr><name pos:line="79" pos:column="57">this</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="63">initDict</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name pos:line="81" pos:column="25">World</name> <op:operator pos:line="81" pos:column="31">=</op:operator> <name pos:line="81" pos:column="33">world</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="82" pos:column="25">ActorID</name> <op:operator pos:line="82" pos:column="33">=</op:operator> <call><name><name pos:line="82" pos:column="35">world</name><op:operator pos:line="82" pos:column="40">.</op:operator><name pos:line="82" pos:column="41">NextAID</name></name><argument_list pos:line="82" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="83" pos:column="25">if <condition pos:line="83" pos:column="28">(<expr><call><name><name pos:line="83" pos:column="29">initDict</name><op:operator pos:line="83" pos:column="37">.</op:operator><name><name pos:line="83" pos:column="38">Contains</name><argument_list pos:line="83" pos:column="46">&lt;<argument><name pos:line="83" pos:column="47">OwnerInit</name></argument>&gt;</argument_list></name></name><argument_list pos:line="83" pos:column="57">()</argument_list></call></expr>)</condition><then pos:line="83" pos:column="60">
				<expr_stmt><expr><name pos:line="84" pos:column="33">Owner</name> <op:operator pos:line="84" pos:column="39">=</op:operator> <call><name><name pos:line="84" pos:column="41">init</name><op:operator pos:line="84" pos:column="45">.</op:operator><name><name pos:line="84" pos:column="46">Get</name><argument_list pos:line="84" pos:column="49">&lt;<argument><name pos:line="84" pos:column="50">OwnerInit</name></argument>, <argument><name pos:line="84" pos:column="61">Player</name></argument>&gt;</argument_list></name></name><argument_list pos:line="84" pos:column="68">()</argument_list></call></expr>;</expr_stmt></then></if>

			<expr_stmt><expr><name pos:line="86" pos:column="25">occupySpace</name> <op:operator pos:line="86" pos:column="37">=</op:operator> <call><name><name pos:line="86" pos:column="39">Exts</name><op:operator pos:line="86" pos:column="43">.</op:operator><name pos:line="86" pos:column="44">Lazy</name></name><argument_list pos:line="86" pos:column="48">(<argument><expr><lambda><parameter_list pos:line="86" pos:column="49">()</parameter_list> <op:operator pos:line="86" pos:column="52">=&gt;</op:operator> <call><name><name pos:line="86" pos:column="55">TraitOrDefault</name><argument_list pos:line="86" pos:column="69">&lt;<argument><name pos:line="86" pos:column="70">IOccupySpace</name></argument>&gt;</argument_list></name><argument_list pos:line="86" pos:column="83">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="88" pos:column="25">if <condition pos:line="88" pos:column="28">(<expr><name pos:line="88" pos:column="29">name</name> <op:operator pos:line="88" pos:column="34">!=</op:operator> <name pos:line="88" pos:column="37">null</name></expr>)</condition><then pos:line="88" pos:column="42">
			<block pos:line="89" pos:column="25">{
				<expr_stmt><expr><name pos:line="90" pos:column="33">name</name> <op:operator pos:line="90" pos:column="38">=</op:operator> <call><name><name pos:line="90" pos:column="40">name</name><op:operator pos:line="90" pos:column="44">.</op:operator><name pos:line="90" pos:column="45">ToLowerInvariant</name></name><argument_list pos:line="90" pos:column="61">()</argument_list></call></expr>;</expr_stmt>

				<if pos:line="92" pos:column="33">if <condition pos:line="92" pos:column="36">(<expr><op:operator pos:line="92" pos:column="37">!</op:operator><call><name><name pos:line="92" pos:column="38">world</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">Map</name><op:operator pos:line="92" pos:column="47">.</op:operator><name pos:line="92" pos:column="48">Rules</name><op:operator pos:line="92" pos:column="53">.</op:operator><name pos:line="92" pos:column="54">Actors</name><op:operator pos:line="92" pos:column="60">.</op:operator><name pos:line="92" pos:column="61">ContainsKey</name></name><argument_list pos:line="92" pos:column="72">(<argument><expr><name pos:line="92" pos:column="73">name</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="92" pos:column="79">
					<throw pos:line="93" pos:column="41">throw <expr><op:operator pos:line="93" pos:column="47">new</op:operator> <call><name pos:line="93" pos:column="51">NotImplementedException</name><argument_list pos:line="93" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="75">"No rules definition for unit "</lit:literal> <op:operator pos:line="93" pos:column="107">+</op:operator> <name pos:line="93" pos:column="109">name</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

				<expr_stmt><expr><name pos:line="95" pos:column="33">Info</name> <op:operator pos:line="95" pos:column="38">=</op:operator> <name><name pos:line="95" pos:column="40">world</name><op:operator pos:line="95" pos:column="45">.</op:operator><name pos:line="95" pos:column="46">Map</name><op:operator pos:line="95" pos:column="49">.</op:operator><name pos:line="95" pos:column="50">Rules</name><op:operator pos:line="95" pos:column="55">.</op:operator><name pos:line="95" pos:column="56">Actors</name><index pos:line="95" pos:column="62">[<expr><name pos:line="95" pos:column="63">name</name></expr>]</index></name></expr>;</expr_stmt>
				<foreach pos:line="96" pos:column="33">foreach (<init><decl><type><name pos:line="96" pos:column="42">var</name></type> <name pos:line="96" pos:column="46">trait</name> <range pos:line="96" pos:column="52">in <expr><call><name><name pos:line="96" pos:column="55">Info</name><op:operator pos:line="96" pos:column="59">.</op:operator><name pos:line="96" pos:column="60">TraitsInConstructOrder</name></name><argument_list pos:line="96" pos:column="82">()</argument_list></call></expr></range></decl></init>)
					<expr_stmt><expr><call><name pos:line="97" pos:column="41">AddTrait</name><argument_list pos:line="97" pos:column="49">(<argument><expr><call><name><name pos:line="97" pos:column="50">trait</name><op:operator pos:line="97" pos:column="55">.</op:operator><name pos:line="97" pos:column="56">Create</name></name><argument_list pos:line="97" pos:column="62">(<argument><expr><name pos:line="97" pos:column="63">init</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
			}</block></then></if>

			<expr_stmt><expr><name pos:line="100" pos:column="25">facing</name> <op:operator pos:line="100" pos:column="32">=</op:operator> <call><name><name pos:line="100" pos:column="34">Exts</name><op:operator pos:line="100" pos:column="38">.</op:operator><name pos:line="100" pos:column="39">Lazy</name></name><argument_list pos:line="100" pos:column="43">(<argument><expr><lambda><parameter_list pos:line="100" pos:column="44">()</parameter_list> <op:operator pos:line="100" pos:column="47">=&gt;</op:operator> <call><name><name pos:line="100" pos:column="50">TraitOrDefault</name><argument_list pos:line="100" pos:column="64">&lt;<argument><name pos:line="100" pos:column="65">IFacing</name></argument>&gt;</argument_list></name><argument_list pos:line="100" pos:column="73">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="101" pos:column="25">health</name> <op:operator pos:line="101" pos:column="32">=</op:operator> <call><name><name pos:line="101" pos:column="34">Exts</name><op:operator pos:line="101" pos:column="38">.</op:operator><name pos:line="101" pos:column="39">Lazy</name></name><argument_list pos:line="101" pos:column="43">(<argument><expr><lambda><parameter_list pos:line="101" pos:column="44">()</parameter_list> <op:operator pos:line="101" pos:column="47">=&gt;</op:operator> <call><name><name pos:line="101" pos:column="50">TraitOrDefault</name><argument_list pos:line="101" pos:column="64">&lt;<argument><name pos:line="101" pos:column="65">Health</name></argument>&gt;</argument_list></name><argument_list pos:line="101" pos:column="72">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="102" pos:column="25">effectiveOwner</name> <op:operator pos:line="102" pos:column="40">=</op:operator> <call><name><name pos:line="102" pos:column="42">Exts</name><op:operator pos:line="102" pos:column="46">.</op:operator><name pos:line="102" pos:column="47">Lazy</name></name><argument_list pos:line="102" pos:column="51">(<argument><expr><lambda><parameter_list pos:line="102" pos:column="52">()</parameter_list> <op:operator pos:line="102" pos:column="55">=&gt;</op:operator> <call><name><name pos:line="102" pos:column="58">TraitOrDefault</name><argument_list pos:line="102" pos:column="72">&lt;<argument><name pos:line="102" pos:column="73">IEffectiveOwner</name></argument>&gt;</argument_list></name><argument_list pos:line="102" pos:column="89">()</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="104" pos:column="25">bounds</name> <op:operator pos:line="104" pos:column="32">=</op:operator> <call><name><name pos:line="104" pos:column="34">Exts</name><op:operator pos:line="104" pos:column="38">.</op:operator><name pos:line="104" pos:column="39">Lazy</name></name><argument_list pos:line="104" pos:column="43">(<argument><expr><lambda><parameter_list pos:line="104" pos:column="44">()</parameter_list> <op:operator pos:line="104" pos:column="47">=&gt;</op:operator>
			<block pos:line="105" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="106" pos:column="33">var</name></type> <name pos:line="106" pos:column="37">si</name> <init pos:line="106" pos:column="40">= <expr><call><name><name pos:line="106" pos:column="42">Info</name><op:operator pos:line="106" pos:column="46">.</op:operator><name pos:line="106" pos:column="47">Traits</name><op:operator pos:line="106" pos:column="53">.</op:operator><name><name pos:line="106" pos:column="54">GetOrDefault</name><argument_list pos:line="106" pos:column="66">&lt;<argument><name pos:line="106" pos:column="67">SelectableInfo</name></argument>&gt;</argument_list></name></name><argument_list pos:line="106" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="107" pos:column="33">var</name></type> <name pos:line="107" pos:column="37">size</name> <init pos:line="107" pos:column="42">= <expr><op:operator pos:line="107" pos:column="44">(</op:operator><name pos:line="107" pos:column="45">si</name> <op:operator pos:line="107" pos:column="48">!=</op:operator> <name pos:line="107" pos:column="51">null</name> <op:operator pos:line="107" pos:column="56">&amp;&amp;</op:operator> <name><name pos:line="107" pos:column="59">si</name><op:operator pos:line="107" pos:column="61">.</op:operator><name pos:line="107" pos:column="62">Bounds</name></name> <op:operator pos:line="107" pos:column="69">!=</op:operator> <name pos:line="107" pos:column="72">null</name><op:operator pos:line="107" pos:column="76">)</op:operator> <op:operator pos:line="107" pos:column="78">?</op:operator> <op:operator pos:line="107" pos:column="80">new</op:operator> <call><name pos:line="107" pos:column="84">int2</name><argument_list pos:line="107" pos:column="88">(<argument><expr><name><name pos:line="107" pos:column="89">si</name><op:operator pos:line="107" pos:column="91">.</op:operator><name pos:line="107" pos:column="92">Bounds</name><index pos:line="107" pos:column="98">[<expr><lit:literal type="number" pos:line="107" pos:column="99">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="107" pos:column="103">si</name><op:operator pos:line="107" pos:column="105">.</op:operator><name pos:line="107" pos:column="106">Bounds</name><index pos:line="107" pos:column="112">[<expr><lit:literal type="number" pos:line="107" pos:column="113">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="107" pos:column="117">:</op:operator>
					<call><name><name pos:line="108" pos:column="41">TraitsImplementing</name><argument_list pos:line="108" pos:column="59">&lt;<argument><name pos:line="108" pos:column="60">IAutoSelectionSize</name></argument>&gt;</argument_list></name><argument_list pos:line="108" pos:column="79">()</argument_list></call><op:operator pos:line="108" pos:column="81">.</op:operator><call><name pos:line="108" pos:column="82">Select</name><argument_list pos:line="108" pos:column="88">(<argument><expr><lambda><name pos:line="108" pos:column="89">x</name> <op:operator pos:line="108" pos:column="91">=&gt;</op:operator> <call><name><name pos:line="108" pos:column="94">x</name><op:operator pos:line="108" pos:column="95">.</op:operator><name pos:line="108" pos:column="96">SelectionSize</name></name><argument_list pos:line="108" pos:column="109">(<argument><expr><name pos:line="108" pos:column="110">this</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call><op:operator pos:line="108" pos:column="116">.</op:operator><call><name pos:line="108" pos:column="117">FirstOrDefault</name><argument_list pos:line="108" pos:column="131">()</argument_list></call></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name pos:line="110" pos:column="33">var</name></type> <name pos:line="110" pos:column="37">offset</name> <init pos:line="110" pos:column="44">= <expr><op:operator pos:line="110" pos:column="46">-</op:operator><name pos:line="110" pos:column="47">size</name> <op:operator pos:line="110" pos:column="52">/</op:operator> <lit:literal type="number" pos:line="110" pos:column="54">2</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="111" pos:column="33">if <condition pos:line="111" pos:column="36">(<expr><name pos:line="111" pos:column="37">si</name> <op:operator pos:line="111" pos:column="40">!=</op:operator> <name pos:line="111" pos:column="43">null</name> <op:operator pos:line="111" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="111" pos:column="51">si</name><op:operator pos:line="111" pos:column="53">.</op:operator><name pos:line="111" pos:column="54">Bounds</name></name> <op:operator pos:line="111" pos:column="61">!=</op:operator> <name pos:line="111" pos:column="64">null</name> <op:operator pos:line="111" pos:column="69">&amp;&amp;</op:operator> <name><name pos:line="111" pos:column="72">si</name><op:operator pos:line="111" pos:column="74">.</op:operator><name pos:line="111" pos:column="75">Bounds</name><op:operator pos:line="111" pos:column="81">.</op:operator><name pos:line="111" pos:column="82">Length</name></name> <op:operator pos:line="111" pos:column="89">&gt;</op:operator> <lit:literal type="number" pos:line="111" pos:column="91">2</lit:literal></expr>)</condition><then pos:line="111" pos:column="93">
					<expr_stmt><expr><name pos:line="112" pos:column="41">offset</name> <op:operator pos:line="112" pos:column="48">+=</op:operator> <op:operator pos:line="112" pos:column="51">new</op:operator> <call><name pos:line="112" pos:column="55">int2</name><argument_list pos:line="112" pos:column="59">(<argument><expr><name><name pos:line="112" pos:column="60">si</name><op:operator pos:line="112" pos:column="62">.</op:operator><name pos:line="112" pos:column="63">Bounds</name><index pos:line="112" pos:column="69">[<expr><lit:literal type="number" pos:line="112" pos:column="70">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="112" pos:column="74">si</name><op:operator pos:line="112" pos:column="76">.</op:operator><name pos:line="112" pos:column="77">Bounds</name><index pos:line="112" pos:column="83">[<expr><lit:literal type="number" pos:line="112" pos:column="84">3</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

				<return pos:line="114" pos:column="33">return <expr><op:operator pos:line="114" pos:column="40">new</op:operator> <call><name pos:line="114" pos:column="44">Rectangle</name><argument_list pos:line="114" pos:column="53">(<argument><expr><name><name pos:line="114" pos:column="54">offset</name><op:operator pos:line="114" pos:column="60">.</op:operator><name pos:line="114" pos:column="61">X</name></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="64">offset</name><op:operator pos:line="114" pos:column="70">.</op:operator><name pos:line="114" pos:column="71">Y</name></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="74">size</name><op:operator pos:line="114" pos:column="78">.</op:operator><name pos:line="114" pos:column="79">X</name></name></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="82">size</name><op:operator pos:line="114" pos:column="86">.</op:operator><name pos:line="114" pos:column="87">Y</name></name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="117" pos:column="25">visualBounds</name> <op:operator pos:line="117" pos:column="38">=</op:operator> <call><name><name pos:line="117" pos:column="40">Exts</name><op:operator pos:line="117" pos:column="44">.</op:operator><name pos:line="117" pos:column="45">Lazy</name></name><argument_list pos:line="117" pos:column="49">(<argument><expr><lambda><parameter_list pos:line="117" pos:column="50">()</parameter_list> <op:operator pos:line="117" pos:column="53">=&gt;</op:operator>
			<block pos:line="118" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="119" pos:column="33">var</name></type> <name pos:line="119" pos:column="37">sd</name> <init pos:line="119" pos:column="40">= <expr><call><name><name pos:line="119" pos:column="42">Info</name><op:operator pos:line="119" pos:column="46">.</op:operator><name pos:line="119" pos:column="47">Traits</name><op:operator pos:line="119" pos:column="53">.</op:operator><name><name pos:line="119" pos:column="54">GetOrDefault</name><argument_list pos:line="119" pos:column="66">&lt;<argument><name pos:line="119" pos:column="67">ISelectionDecorationsInfo</name></argument>&gt;</argument_list></name></name><argument_list pos:line="119" pos:column="93">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="120" pos:column="33">if <condition pos:line="120" pos:column="36">(<expr><name pos:line="120" pos:column="37">sd</name> <op:operator pos:line="120" pos:column="40">==</op:operator> <name pos:line="120" pos:column="43">null</name> <op:operator pos:line="120" pos:column="48">||</op:operator> <name><name pos:line="120" pos:column="51">sd</name><op:operator pos:line="120" pos:column="53">.</op:operator><name pos:line="120" pos:column="54">SelectionBoxBounds</name></name> <op:operator pos:line="120" pos:column="73">==</op:operator> <name pos:line="120" pos:column="76">null</name></expr>)</condition><then pos:line="120" pos:column="81">
					<return pos:line="121" pos:column="41">return <expr><name><name pos:line="121" pos:column="48">bounds</name><op:operator pos:line="121" pos:column="54">.</op:operator><name pos:line="121" pos:column="55">Value</name></name></expr>;</return></then></if>

				<decl_stmt><decl><type><name pos:line="123" pos:column="33">var</name></type> <name pos:line="123" pos:column="37">size</name> <init pos:line="123" pos:column="42">= <expr><op:operator pos:line="123" pos:column="44">new</op:operator> <call><name pos:line="123" pos:column="48">int2</name><argument_list pos:line="123" pos:column="52">(<argument><expr><name><name pos:line="123" pos:column="53">sd</name><op:operator pos:line="123" pos:column="55">.</op:operator><name pos:line="123" pos:column="56">SelectionBoxBounds</name><index pos:line="123" pos:column="74">[<expr><lit:literal type="number" pos:line="123" pos:column="75">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="79">sd</name><op:operator pos:line="123" pos:column="81">.</op:operator><name pos:line="123" pos:column="82">SelectionBoxBounds</name><index pos:line="123" pos:column="100">[<expr><lit:literal type="number" pos:line="123" pos:column="101">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name pos:line="125" pos:column="33">var</name></type> <name pos:line="125" pos:column="37">offset</name> <init pos:line="125" pos:column="44">= <expr><op:operator pos:line="125" pos:column="46">-</op:operator><name pos:line="125" pos:column="47">size</name> <op:operator pos:line="125" pos:column="52">/</op:operator> <lit:literal type="number" pos:line="125" pos:column="54">2</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="126" pos:column="33">if <condition pos:line="126" pos:column="36">(<expr><name><name pos:line="126" pos:column="37">sd</name><op:operator pos:line="126" pos:column="39">.</op:operator><name pos:line="126" pos:column="40">SelectionBoxBounds</name><op:operator pos:line="126" pos:column="58">.</op:operator><name pos:line="126" pos:column="59">Length</name></name> <op:operator pos:line="126" pos:column="66">&gt;</op:operator> <lit:literal type="number" pos:line="126" pos:column="68">2</lit:literal></expr>)</condition><then pos:line="126" pos:column="70">
					<expr_stmt><expr><name pos:line="127" pos:column="41">offset</name> <op:operator pos:line="127" pos:column="48">+=</op:operator> <op:operator pos:line="127" pos:column="51">new</op:operator> <call><name pos:line="127" pos:column="55">int2</name><argument_list pos:line="127" pos:column="59">(<argument><expr><name><name pos:line="127" pos:column="60">sd</name><op:operator pos:line="127" pos:column="62">.</op:operator><name pos:line="127" pos:column="63">SelectionBoxBounds</name><index pos:line="127" pos:column="81">[<expr><lit:literal type="number" pos:line="127" pos:column="82">2</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="86">sd</name><op:operator pos:line="127" pos:column="88">.</op:operator><name pos:line="127" pos:column="89">SelectionBoxBounds</name><index pos:line="127" pos:column="107">[<expr><lit:literal type="number" pos:line="127" pos:column="108">3</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

				<return pos:line="129" pos:column="33">return <expr><op:operator pos:line="129" pos:column="40">new</op:operator> <call><name pos:line="129" pos:column="44">Rectangle</name><argument_list pos:line="129" pos:column="53">(<argument><expr><name><name pos:line="129" pos:column="54">offset</name><op:operator pos:line="129" pos:column="60">.</op:operator><name pos:line="129" pos:column="61">X</name></name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="64">offset</name><op:operator pos:line="129" pos:column="70">.</op:operator><name pos:line="129" pos:column="71">Y</name></name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="74">size</name><op:operator pos:line="129" pos:column="78">.</op:operator><name pos:line="129" pos:column="79">X</name></name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="82">size</name><op:operator pos:line="129" pos:column="86">.</op:operator><name pos:line="129" pos:column="87">Y</name></name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="132" pos:column="25">renderModifiers</name> <op:operator pos:line="132" pos:column="41">=</op:operator> <call><name><name pos:line="132" pos:column="43">TraitsImplementing</name><argument_list pos:line="132" pos:column="61">&lt;<argument><name pos:line="132" pos:column="62">IRenderModifier</name></argument>&gt;</argument_list></name><argument_list pos:line="132" pos:column="78">()</argument_list></call><op:operator pos:line="132" pos:column="80">.</op:operator><call><name pos:line="132" pos:column="81">ToArray</name><argument_list pos:line="132" pos:column="88">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="133" pos:column="25">renders</name> <op:operator pos:line="133" pos:column="33">=</op:operator> <call><name><name pos:line="133" pos:column="35">TraitsImplementing</name><argument_list pos:line="133" pos:column="53">&lt;<argument><name pos:line="133" pos:column="54">IRender</name></argument>&gt;</argument_list></name><argument_list pos:line="133" pos:column="62">()</argument_list></call><op:operator pos:line="133" pos:column="64">.</op:operator><call><name pos:line="133" pos:column="65">ToArray</name><argument_list pos:line="133" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="134" pos:column="25">disables</name> <op:operator pos:line="134" pos:column="34">=</op:operator> <call><name><name pos:line="134" pos:column="36">TraitsImplementing</name><argument_list pos:line="134" pos:column="54">&lt;<argument><name pos:line="134" pos:column="55">IDisable</name></argument>&gt;</argument_list></name><argument_list pos:line="134" pos:column="64">()</argument_list></call><op:operator pos:line="134" pos:column="66">.</op:operator><call><name pos:line="134" pos:column="67">ToArray</name><argument_list pos:line="134" pos:column="74">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="135" pos:column="25">visibilityModifiers</name> <op:operator pos:line="135" pos:column="45">=</op:operator> <call><name><name pos:line="135" pos:column="47">TraitsImplementing</name><argument_list pos:line="135" pos:column="65">&lt;<argument><name pos:line="135" pos:column="66">IVisibilityModifier</name></argument>&gt;</argument_list></name><argument_list pos:line="135" pos:column="86">()</argument_list></call><op:operator pos:line="135" pos:column="88">.</op:operator><call><name pos:line="135" pos:column="89">ToArray</name><argument_list pos:line="135" pos:column="96">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="136" pos:column="25">defaultVisibility</name> <op:operator pos:line="136" pos:column="43">=</op:operator> <call><name><name pos:line="136" pos:column="45">Trait</name><argument_list pos:line="136" pos:column="50">&lt;<argument><name pos:line="136" pos:column="51">IDefaultVisibility</name></argument>&gt;</argument_list></name><argument_list pos:line="136" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>

		<function><type><specifier pos:line="139" pos:column="17">public</specifier> <name pos:line="139" pos:column="24">void</name></type> <name pos:line="139" pos:column="29">Tick</name><parameter_list pos:line="139" pos:column="33">()</parameter_list>
		<block pos:line="140" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="141" pos:column="25">var</name></type> <name pos:line="141" pos:column="29">wasIdle</name> <init pos:line="141" pos:column="37">= <expr><name pos:line="141" pos:column="39">IsIdle</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="142" pos:column="25">currentActivity</name> <op:operator pos:line="142" pos:column="41">=</op:operator> <call><name><name pos:line="142" pos:column="43">Traits</name><op:operator pos:line="142" pos:column="49">.</op:operator><name pos:line="142" pos:column="50">Util</name><op:operator pos:line="142" pos:column="54">.</op:operator><name pos:line="142" pos:column="55">RunActivity</name></name><argument_list pos:line="142" pos:column="66">(<argument><expr><name pos:line="142" pos:column="67">this</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="73">currentActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="144" pos:column="25">if <condition pos:line="144" pos:column="28">(<expr><op:operator pos:line="144" pos:column="29">!</op:operator><name pos:line="144" pos:column="30">wasIdle</name> <op:operator pos:line="144" pos:column="38">&amp;&amp;</op:operator> <name pos:line="144" pos:column="41">IsIdle</name></expr>)</condition><then pos:line="144" pos:column="48">
				<foreach pos:line="145" pos:column="33">foreach (<init><decl><type><name pos:line="145" pos:column="42">var</name></type> <name pos:line="145" pos:column="46">n</name> <range pos:line="145" pos:column="48">in <expr><call><name><name pos:line="145" pos:column="51">TraitsImplementing</name><argument_list pos:line="145" pos:column="69">&lt;<argument><name pos:line="145" pos:column="70">INotifyBecomingIdle</name></argument>&gt;</argument_list></name><argument_list pos:line="145" pos:column="90">()</argument_list></call></expr></range></decl></init>)
					<expr_stmt><expr><call><name><name pos:line="146" pos:column="41">n</name><op:operator pos:line="146" pos:column="42">.</op:operator><name pos:line="146" pos:column="43">OnBecomingIdle</name></name><argument_list pos:line="146" pos:column="57">(<argument><expr><name pos:line="146" pos:column="58">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach></then></if>
		}</block></function>

		<function><type><specifier pos:line="149" pos:column="17">public</specifier> <name><name pos:line="149" pos:column="24">IEnumerable</name><argument_list pos:line="149" pos:column="35">&lt;<argument><name pos:line="149" pos:column="36">IRenderable</name></argument>&gt;</argument_list></name></type> <name pos:line="149" pos:column="49">Render</name><parameter_list pos:line="149" pos:column="55">(<param><decl><type><name pos:line="149" pos:column="56">WorldRenderer</name></type> <name pos:line="149" pos:column="70">wr</name></decl></param>)</parameter_list>
		<block pos:line="150" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="151" pos:column="25">var</name></type> <name pos:line="151" pos:column="29">renderables</name> <init pos:line="151" pos:column="41">= <expr><call><name pos:line="151" pos:column="43">Renderables</name><argument_list pos:line="151" pos:column="54">(<argument><expr><name pos:line="151" pos:column="55">wr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<foreach pos:line="152" pos:column="25">foreach (<init><decl><type><name pos:line="152" pos:column="34">var</name></type> <name pos:line="152" pos:column="38">modifier</name> <range pos:line="152" pos:column="47">in <expr><name pos:line="152" pos:column="50">renderModifiers</name></expr></range></decl></init>)
				<expr_stmt><expr><name pos:line="153" pos:column="33">renderables</name> <op:operator pos:line="153" pos:column="45">=</op:operator> <call><name><name pos:line="153" pos:column="47">modifier</name><op:operator pos:line="153" pos:column="55">.</op:operator><name pos:line="153" pos:column="56">ModifyRender</name></name><argument_list pos:line="153" pos:column="68">(<argument><expr><name pos:line="153" pos:column="69">this</name></expr></argument>, <argument><expr><name pos:line="153" pos:column="75">wr</name></expr></argument>, <argument><expr><name pos:line="153" pos:column="79">renderables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
			<return pos:line="154" pos:column="25">return <expr><name pos:line="154" pos:column="32">renderables</name></expr>;</return>
		}</block></function>

		<function><type><name><name pos:line="157" pos:column="17">IEnumerable</name><argument_list pos:line="157" pos:column="28">&lt;<argument><name pos:line="157" pos:column="29">IRenderable</name></argument>&gt;</argument_list></name></type> <name pos:line="157" pos:column="42">Renderables</name><parameter_list pos:line="157" pos:column="53">(<param><decl><type><name pos:line="157" pos:column="54">WorldRenderer</name></type> <name pos:line="157" pos:column="68">wr</name></decl></param>)</parameter_list>
		<block pos:line="158" pos:column="17">{
			<foreach pos:line="159" pos:column="25">foreach (<init><decl><type><name pos:line="159" pos:column="34">var</name></type> <name pos:line="159" pos:column="38">render</name> <range pos:line="159" pos:column="45">in <expr><name pos:line="159" pos:column="48">renders</name></expr></range></decl></init>)
				<foreach pos:line="160" pos:column="33">foreach (<init><decl><type><name pos:line="160" pos:column="42">var</name></type> <name pos:line="160" pos:column="46">renderable</name> <range pos:line="160" pos:column="57">in <expr><call><name><name pos:line="160" pos:column="60">render</name><op:operator pos:line="160" pos:column="66">.</op:operator><name pos:line="160" pos:column="67">Render</name></name><argument_list pos:line="160" pos:column="73">(<argument><expr><name pos:line="160" pos:column="74">this</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="80">wr</name></expr></argument>)</argument_list></call></expr></range></decl></init>)
					<return><specifier pos:line="161" pos:column="41">yield</specifier> return <expr><name pos:line="161" pos:column="54">renderable</name></expr>;</return></foreach></foreach>
		}</block></function>

		<function><type><specifier pos:line="164" pos:column="17">public</specifier> <name pos:line="164" pos:column="24">void</name></type> <name pos:line="164" pos:column="29">QueueActivity</name><parameter_list pos:line="164" pos:column="42">(<param><decl><type><name pos:line="164" pos:column="43">bool</name></type> <name pos:line="164" pos:column="48">queued</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="56">Activity</name></type> <name pos:line="164" pos:column="65">nextActivity</name></decl></param>)</parameter_list>
		<block pos:line="165" pos:column="17">{
			<if pos:line="166" pos:column="25">if <condition pos:line="166" pos:column="28">(<expr><op:operator pos:line="166" pos:column="29">!</op:operator><name pos:line="166" pos:column="30">queued</name></expr>)</condition><then pos:line="166" pos:column="37">
				<expr_stmt><expr><call><name pos:line="167" pos:column="33">CancelActivity</name><argument_list pos:line="167" pos:column="47">()</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name pos:line="168" pos:column="25">QueueActivity</name><argument_list pos:line="168" pos:column="38">(<argument><expr><name pos:line="168" pos:column="39">nextActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="171" pos:column="17">public</specifier> <name pos:line="171" pos:column="24">void</name></type> <name pos:line="171" pos:column="29">QueueActivity</name><parameter_list pos:line="171" pos:column="42">(<param><decl><type><name pos:line="171" pos:column="43">Activity</name></type> <name pos:line="171" pos:column="52">nextActivity</name></decl></param>)</parameter_list>
		<block pos:line="172" pos:column="17">{
			<if pos:line="173" pos:column="25">if <condition pos:line="173" pos:column="28">(<expr><name pos:line="173" pos:column="29">currentActivity</name> <op:operator pos:line="173" pos:column="45">==</op:operator> <name pos:line="173" pos:column="48">null</name></expr>)</condition><then pos:line="173" pos:column="53">
				<expr_stmt><expr><name pos:line="174" pos:column="33">currentActivity</name> <op:operator pos:line="174" pos:column="49">=</op:operator> <name pos:line="174" pos:column="51">nextActivity</name></expr>;</expr_stmt></then>
			<else pos:line="175" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="176" pos:column="33">currentActivity</name><op:operator pos:line="176" pos:column="48">.</op:operator><name pos:line="176" pos:column="49">Queue</name></name><argument_list pos:line="176" pos:column="54">(<argument><expr><name pos:line="176" pos:column="55">nextActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></function>

		<function><type><specifier pos:line="179" pos:column="17">public</specifier> <name pos:line="179" pos:column="24">void</name></type> <name pos:line="179" pos:column="29">CancelActivity</name><parameter_list pos:line="179" pos:column="43">()</parameter_list>
		<block pos:line="180" pos:column="17">{
			<if pos:line="181" pos:column="25">if <condition pos:line="181" pos:column="28">(<expr><name pos:line="181" pos:column="29">currentActivity</name> <op:operator pos:line="181" pos:column="45">!=</op:operator> <name pos:line="181" pos:column="48">null</name></expr>)</condition><then pos:line="181" pos:column="53">
				<expr_stmt><expr><call><name><name pos:line="182" pos:column="33">currentActivity</name><op:operator pos:line="182" pos:column="48">.</op:operator><name pos:line="182" pos:column="49">Cancel</name></name><argument_list pos:line="182" pos:column="55">(<argument><expr><name pos:line="182" pos:column="56">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></function>

		<function><type><specifier pos:line="185" pos:column="17">public</specifier> <name pos:line="185" pos:column="24">Activity</name></type> <name pos:line="185" pos:column="33">GetCurrentActivity</name><parameter_list pos:line="185" pos:column="51">()</parameter_list>
		<block pos:line="186" pos:column="17">{
			<return pos:line="187" pos:column="25">return <expr><name pos:line="187" pos:column="32">currentActivity</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="190" pos:column="17">public</specifier> <specifier pos:line="190" pos:column="24">override</specifier> <name pos:line="190" pos:column="33">int</name></type> <name pos:line="190" pos:column="37">GetHashCode</name><parameter_list pos:line="190" pos:column="48">()</parameter_list>
		<block pos:line="191" pos:column="17">{
			<return pos:line="192" pos:column="25">return <expr><op:operator pos:line="192" pos:column="32">(</op:operator><name pos:line="192" pos:column="33">int</name><op:operator pos:line="192" pos:column="36">)</op:operator><name pos:line="192" pos:column="37">ActorID</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="195" pos:column="17">public</specifier> <specifier pos:line="195" pos:column="24">override</specifier> <name pos:line="195" pos:column="33">bool</name></type> <name pos:line="195" pos:column="38">Equals</name><parameter_list pos:line="195" pos:column="44">(<param><decl><type><name pos:line="195" pos:column="45">object</name></type> <name pos:line="195" pos:column="52">obj</name></decl></param>)</parameter_list>
		<block pos:line="196" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="197" pos:column="25">var</name></type> <name pos:line="197" pos:column="29">o</name> <init pos:line="197" pos:column="31">= <expr><name pos:line="197" pos:column="33">obj</name> <op:operator pos:line="197" pos:column="37">as</op:operator> <name pos:line="197" pos:column="40">Actor</name></expr></init></decl>;</decl_stmt>
			<return pos:line="198" pos:column="25">return <expr><name pos:line="198" pos:column="32">o</name> <op:operator pos:line="198" pos:column="34">!=</op:operator> <name pos:line="198" pos:column="37">null</name> <op:operator pos:line="198" pos:column="42">&amp;&amp;</op:operator> <call><name pos:line="198" pos:column="45">Equals</name><argument_list pos:line="198" pos:column="51">(<argument><expr><name pos:line="198" pos:column="52">o</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="201" pos:column="17">public</specifier> <name pos:line="201" pos:column="24">bool</name></type> <name pos:line="201" pos:column="29">Equals</name><parameter_list pos:line="201" pos:column="35">(<param><decl><type><name pos:line="201" pos:column="36">Actor</name></type> <name pos:line="201" pos:column="42">other</name></decl></param>)</parameter_list>
		<block pos:line="202" pos:column="17">{
			<return pos:line="203" pos:column="25">return <expr><name pos:line="203" pos:column="32">ActorID</name> <op:operator pos:line="203" pos:column="40">==</op:operator> <name><name pos:line="203" pos:column="43">other</name><op:operator pos:line="203" pos:column="48">.</op:operator><name pos:line="203" pos:column="49">ActorID</name></name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="206" pos:column="17">public</specifier> <specifier pos:line="206" pos:column="24">override</specifier> <name pos:line="206" pos:column="33">string</name></type> <name pos:line="206" pos:column="40">ToString</name><parameter_list pos:line="206" pos:column="48">()</parameter_list>
		<block pos:line="207" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="208" pos:column="25">var</name></type> <name pos:line="208" pos:column="29">name</name> <init pos:line="208" pos:column="34">= <expr><name><name pos:line="208" pos:column="36">Info</name><op:operator pos:line="208" pos:column="40">.</op:operator><name pos:line="208" pos:column="41">Name</name></name> <op:operator pos:line="208" pos:column="46">+</op:operator> <lit:literal type="string" pos:line="208" pos:column="48">" "</lit:literal> <op:operator pos:line="208" pos:column="52">+</op:operator> <name pos:line="208" pos:column="54">ActorID</name></expr></init></decl>;</decl_stmt>
			<if pos:line="209" pos:column="25">if <condition pos:line="209" pos:column="28">(<expr><op:operator pos:line="209" pos:column="29">!</op:operator><name pos:line="209" pos:column="30">IsInWorld</name></expr>)</condition><then pos:line="209" pos:column="40">
				<expr_stmt><expr><name pos:line="210" pos:column="33">name</name> <op:operator pos:line="210" pos:column="38">+=</op:operator> <lit:literal type="string" pos:line="210" pos:column="41">" (not in world)"</lit:literal></expr>;</expr_stmt></then></if>
			<return pos:line="211" pos:column="25">return <expr><name pos:line="211" pos:column="32">name</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="214" pos:column="17">public</specifier> <name pos:line="214" pos:column="24">T</name></type> <name><name pos:line="214" pos:column="26">Trait</name><argument_list pos:line="214" pos:column="31">&lt;<argument><name pos:line="214" pos:column="32">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="214" pos:column="34">()</parameter_list>
		<block pos:line="215" pos:column="17">{
			<return pos:line="216" pos:column="25">return <expr><call><name><name pos:line="216" pos:column="32">World</name><op:operator pos:line="216" pos:column="37">.</op:operator><name pos:line="216" pos:column="38">TraitDict</name><op:operator pos:line="216" pos:column="47">.</op:operator><name><name pos:line="216" pos:column="48">Get</name><argument_list pos:line="216" pos:column="51">&lt;<argument><name pos:line="216" pos:column="52">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="216" pos:column="54">(<argument><expr><name pos:line="216" pos:column="55">this</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="219" pos:column="17">public</specifier> <name pos:line="219" pos:column="24">T</name></type> <name><name pos:line="219" pos:column="26">TraitOrDefault</name><argument_list pos:line="219" pos:column="40">&lt;<argument><name pos:line="219" pos:column="41">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="219" pos:column="43">()</parameter_list>
		<block pos:line="220" pos:column="17">{
			<return pos:line="221" pos:column="25">return <expr><call><name><name pos:line="221" pos:column="32">World</name><op:operator pos:line="221" pos:column="37">.</op:operator><name pos:line="221" pos:column="38">TraitDict</name><op:operator pos:line="221" pos:column="47">.</op:operator><name><name pos:line="221" pos:column="48">GetOrDefault</name><argument_list pos:line="221" pos:column="60">&lt;<argument><name pos:line="221" pos:column="61">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="221" pos:column="63">(<argument><expr><name pos:line="221" pos:column="64">this</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="224" pos:column="17">public</specifier> <name><name pos:line="224" pos:column="24">IEnumerable</name><argument_list pos:line="224" pos:column="35">&lt;<argument><name pos:line="224" pos:column="36">T</name></argument>&gt;</argument_list></name></type> <name><name pos:line="224" pos:column="39">TraitsImplementing</name><argument_list pos:line="224" pos:column="57">&lt;<argument><name pos:line="224" pos:column="58">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="224" pos:column="60">()</parameter_list>
		<block pos:line="225" pos:column="17">{
			<return pos:line="226" pos:column="25">return <expr><call><name><name pos:line="226" pos:column="32">World</name><op:operator pos:line="226" pos:column="37">.</op:operator><name pos:line="226" pos:column="38">TraitDict</name><op:operator pos:line="226" pos:column="47">.</op:operator><name><name pos:line="226" pos:column="48">WithInterface</name><argument_list pos:line="226" pos:column="61">&lt;<argument><name pos:line="226" pos:column="62">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="226" pos:column="64">(<argument><expr><name pos:line="226" pos:column="65">this</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="229" pos:column="17">public</specifier> <name pos:line="229" pos:column="24">bool</name></type> <name><name pos:line="229" pos:column="29">HasTrait</name><argument_list pos:line="229" pos:column="37">&lt;<argument><name pos:line="229" pos:column="38">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="229" pos:column="40">()</parameter_list>
		<block pos:line="230" pos:column="17">{
			<return pos:line="231" pos:column="25">return <expr><call><name><name pos:line="231" pos:column="32">World</name><op:operator pos:line="231" pos:column="37">.</op:operator><name pos:line="231" pos:column="38">TraitDict</name><op:operator pos:line="231" pos:column="47">.</op:operator><name><name pos:line="231" pos:column="48">Contains</name><argument_list pos:line="231" pos:column="56">&lt;<argument><name pos:line="231" pos:column="57">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="231" pos:column="59">(<argument><expr><name pos:line="231" pos:column="60">this</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="234" pos:column="17">public</specifier> <name pos:line="234" pos:column="24">void</name></type> <name pos:line="234" pos:column="29">AddTrait</name><parameter_list pos:line="234" pos:column="37">(<param><decl><type><name pos:line="234" pos:column="38">object</name></type> <name pos:line="234" pos:column="45">trait</name></decl></param>)</parameter_list>
		<block pos:line="235" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="236" pos:column="25">World</name><op:operator pos:line="236" pos:column="30">.</op:operator><name pos:line="236" pos:column="31">TraitDict</name><op:operator pos:line="236" pos:column="40">.</op:operator><name pos:line="236" pos:column="41">AddTrait</name></name><argument_list pos:line="236" pos:column="49">(<argument><expr><name pos:line="236" pos:column="50">this</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="56">trait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="239" pos:column="17">public</specifier> <name pos:line="239" pos:column="24">void</name></type> <name pos:line="239" pos:column="29">Dispose</name><parameter_list pos:line="239" pos:column="36">()</parameter_list>
		<block pos:line="240" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="241" pos:column="25">World</name><op:operator pos:line="241" pos:column="30">.</op:operator><name pos:line="241" pos:column="31">AddFrameEndTask</name></name><argument_list pos:line="241" pos:column="46">(<argument><expr><lambda><name pos:line="241" pos:column="47">w</name> <op:operator pos:line="241" pos:column="49">=&gt;</op:operator>
			<block pos:line="242" pos:column="25">{
				<if pos:line="243" pos:column="33">if <condition pos:line="243" pos:column="36">(<expr><name pos:line="243" pos:column="37">Disposed</name></expr>)</condition><then pos:line="243" pos:column="46">
					<return pos:line="244" pos:column="41">return;</return></then></if>

				<if pos:line="246" pos:column="33">if <condition pos:line="246" pos:column="36">(<expr><name pos:line="246" pos:column="37">IsInWorld</name></expr>)</condition><then pos:line="246" pos:column="47">
					<expr_stmt><expr><call><name><name pos:line="247" pos:column="41">World</name><op:operator pos:line="247" pos:column="46">.</op:operator><name pos:line="247" pos:column="47">Remove</name></name><argument_list pos:line="247" pos:column="53">(<argument><expr><name pos:line="247" pos:column="54">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

				<foreach pos:line="249" pos:column="33">foreach (<init><decl><type><name pos:line="249" pos:column="42">var</name></type> <name pos:line="249" pos:column="46">t</name> <range pos:line="249" pos:column="48">in <expr><call><name><name pos:line="249" pos:column="51">TraitsImplementing</name><argument_list pos:line="249" pos:column="69">&lt;<argument><name pos:line="249" pos:column="70">INotifyActorDisposing</name></argument>&gt;</argument_list></name><argument_list pos:line="249" pos:column="92">()</argument_list></call></expr></range></decl></init>)
					<expr_stmt><expr><call><name><name pos:line="250" pos:column="41">t</name><op:operator pos:line="250" pos:column="42">.</op:operator><name pos:line="250" pos:column="43">Disposing</name></name><argument_list pos:line="250" pos:column="52">(<argument><expr><name pos:line="250" pos:column="53">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>

				<expr_stmt><expr><call><name><name pos:line="252" pos:column="33">World</name><op:operator pos:line="252" pos:column="38">.</op:operator><name pos:line="252" pos:column="39">TraitDict</name><op:operator pos:line="252" pos:column="48">.</op:operator><name pos:line="252" pos:column="49">RemoveActor</name></name><argument_list pos:line="252" pos:column="60">(<argument><expr><name pos:line="252" pos:column="61">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="253" pos:column="33">Disposed</name> <op:operator pos:line="253" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="253" pos:column="44">true</lit:literal></expr>;</expr_stmt>

				<if pos:line="255" pos:column="33">if <condition pos:line="255" pos:column="36">(<expr><name pos:line="255" pos:column="37">luaInterface</name> <op:operator pos:line="255" pos:column="50">!=</op:operator> <name pos:line="255" pos:column="53">null</name></expr>)</condition><then pos:line="255" pos:column="58">
					<expr_stmt><expr><call><name><name pos:line="256" pos:column="41">luaInterface</name><op:operator pos:line="256" pos:column="53">.</op:operator><name pos:line="256" pos:column="54">Value</name><op:operator pos:line="256" pos:column="59">.</op:operator><name pos:line="256" pos:column="60">OnActorDestroyed</name></name><argument_list pos:line="256" pos:column="76">()</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<comment type="line" pos:line="260" pos:column="17">// TODO: move elsewhere.</comment>
		<function><type><specifier pos:line="261" pos:column="17">public</specifier> <name pos:line="261" pos:column="24">void</name></type> <name pos:line="261" pos:column="29">ChangeOwner</name><parameter_list pos:line="261" pos:column="40">(<param><decl><type><name pos:line="261" pos:column="41">Player</name></type> <name pos:line="261" pos:column="48">newOwner</name></decl></param>)</parameter_list>
		<block pos:line="262" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="263" pos:column="25">World</name><op:operator pos:line="263" pos:column="30">.</op:operator><name pos:line="263" pos:column="31">AddFrameEndTask</name></name><argument_list pos:line="263" pos:column="46">(<argument><expr><lambda><name pos:line="263" pos:column="47">w</name> <op:operator pos:line="263" pos:column="49">=&gt;</op:operator>
			<block pos:line="264" pos:column="25">{
				<if pos:line="265" pos:column="33">if <condition pos:line="265" pos:column="36">(<expr><name pos:line="265" pos:column="37">Disposed</name></expr>)</condition><then pos:line="265" pos:column="46">
					<return pos:line="266" pos:column="41">return;</return></then></if>

				<decl_stmt><decl><type><name pos:line="268" pos:column="33">var</name></type> <name pos:line="268" pos:column="37">oldOwner</name> <init pos:line="268" pos:column="46">= <expr><name pos:line="268" pos:column="48">Owner</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="269" pos:column="33">var</name></type> <name pos:line="269" pos:column="37">wasInWorld</name> <init pos:line="269" pos:column="48">= <expr><name pos:line="269" pos:column="50">IsInWorld</name></expr></init></decl>;</decl_stmt>

				<comment type="line" pos:line="271" pos:column="33">// momentarily remove from world so the ownership queries don't get confused</comment>
				<if pos:line="272" pos:column="33">if <condition pos:line="272" pos:column="36">(<expr><name pos:line="272" pos:column="37">wasInWorld</name></expr>)</condition><then pos:line="272" pos:column="48">
					<expr_stmt><expr><call><name><name pos:line="273" pos:column="41">w</name><op:operator pos:line="273" pos:column="42">.</op:operator><name pos:line="273" pos:column="43">Remove</name></name><argument_list pos:line="273" pos:column="49">(<argument><expr><name pos:line="273" pos:column="50">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

				<expr_stmt><expr><name pos:line="275" pos:column="33">Owner</name> <op:operator pos:line="275" pos:column="39">=</op:operator> <name pos:line="275" pos:column="41">newOwner</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="276" pos:column="33">Generation</name><op:operator pos:line="276" pos:column="43">++</op:operator></expr>;</expr_stmt>

				<if pos:line="278" pos:column="33">if <condition pos:line="278" pos:column="36">(<expr><name pos:line="278" pos:column="37">wasInWorld</name></expr>)</condition><then pos:line="278" pos:column="48">
					<expr_stmt><expr><call><name><name pos:line="279" pos:column="41">w</name><op:operator pos:line="279" pos:column="42">.</op:operator><name pos:line="279" pos:column="43">Add</name></name><argument_list pos:line="279" pos:column="46">(<argument><expr><name pos:line="279" pos:column="47">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

				<foreach pos:line="281" pos:column="33">foreach (<init><decl><type><name pos:line="281" pos:column="42">var</name></type> <name pos:line="281" pos:column="46">t</name> <range pos:line="281" pos:column="48">in <expr><call><name><name pos:line="281" pos:column="51">this</name><op:operator pos:line="281" pos:column="55">.</op:operator><name><name pos:line="281" pos:column="56">TraitsImplementing</name><argument_list pos:line="281" pos:column="74">&lt;<argument><name pos:line="281" pos:column="75">INotifyOwnerChanged</name></argument>&gt;</argument_list></name></name><argument_list pos:line="281" pos:column="95">()</argument_list></call></expr></range></decl></init>)
					<expr_stmt><expr><call><name><name pos:line="282" pos:column="41">t</name><op:operator pos:line="282" pos:column="42">.</op:operator><name pos:line="282" pos:column="43">OnOwnerChanged</name></name><argument_list pos:line="282" pos:column="57">(<argument><expr><name pos:line="282" pos:column="58">this</name></expr></argument>, <argument><expr><name pos:line="282" pos:column="64">oldOwner</name></expr></argument>, <argument><expr><name pos:line="282" pos:column="74">newOwner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach>
			}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="286" pos:column="17">public</specifier> <name pos:line="286" pos:column="24">void</name></type> <name pos:line="286" pos:column="29">Kill</name><parameter_list pos:line="286" pos:column="33">(<param><decl><type><name pos:line="286" pos:column="34">Actor</name></type> <name pos:line="286" pos:column="40">attacker</name></decl></param>)</parameter_list>
		<block pos:line="287" pos:column="17">{
			<if pos:line="288" pos:column="25">if <condition pos:line="288" pos:column="28">(<expr><name><name pos:line="288" pos:column="29">health</name><op:operator pos:line="288" pos:column="35">.</op:operator><name pos:line="288" pos:column="36">Value</name></name> <op:operator pos:line="288" pos:column="42">==</op:operator> <name pos:line="288" pos:column="45">null</name></expr>)</condition><then pos:line="288" pos:column="50">
				<return pos:line="289" pos:column="33">return;</return></then></if>

			<expr_stmt><expr><call><name><name pos:line="291" pos:column="25">health</name><op:operator pos:line="291" pos:column="31">.</op:operator><name pos:line="291" pos:column="32">Value</name><op:operator pos:line="291" pos:column="37">.</op:operator><name pos:line="291" pos:column="38">InflictDamage</name></name><argument_list pos:line="291" pos:column="51">(<argument><expr><name pos:line="291" pos:column="52">this</name></expr></argument>, <argument><expr><name pos:line="291" pos:column="58">attacker</name></expr></argument>, <argument><expr><name><name pos:line="291" pos:column="68">health</name><op:operator pos:line="291" pos:column="74">.</op:operator><name pos:line="291" pos:column="75">Value</name><op:operator pos:line="291" pos:column="80">.</op:operator><name pos:line="291" pos:column="81">MaxHP</name></name></expr></argument>, <argument><expr><name pos:line="291" pos:column="88">null</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="291" pos:column="94">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></function>

		<function><type><specifier pos:line="294" pos:column="17">public</specifier> <name pos:line="294" pos:column="24">bool</name></type> <name pos:line="294" pos:column="29">IsDisabled</name><parameter_list pos:line="294" pos:column="39">()</parameter_list>
		<block pos:line="295" pos:column="17">{
			<foreach pos:line="296" pos:column="25">foreach (<init><decl><type><name pos:line="296" pos:column="34">var</name></type> <name pos:line="296" pos:column="38">disable</name> <range pos:line="296" pos:column="46">in <expr><name pos:line="296" pos:column="49">disables</name></expr></range></decl></init>)
				<if pos:line="297" pos:column="33">if <condition pos:line="297" pos:column="36">(<expr><name><name pos:line="297" pos:column="37">disable</name><op:operator pos:line="297" pos:column="44">.</op:operator><name pos:line="297" pos:column="45">Disabled</name></name></expr>)</condition><then pos:line="297" pos:column="54">
					<return pos:line="298" pos:column="41">return <expr><lit:literal type="boolean" pos:line="298" pos:column="48">true</lit:literal></expr>;</return></then></if></foreach>
			<return pos:line="299" pos:column="25">return <expr><lit:literal type="boolean" pos:line="299" pos:column="32">false</lit:literal></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="302" pos:column="17">public</specifier> <name pos:line="302" pos:column="24">bool</name></type> <name pos:line="302" pos:column="29">CanBeViewedByPlayer</name><parameter_list pos:line="302" pos:column="48">(<param><decl><type><name pos:line="302" pos:column="49">Player</name></type> <name pos:line="302" pos:column="56">player</name></decl></param>)</parameter_list>
		<block pos:line="303" pos:column="17">{
			<foreach pos:line="304" pos:column="25">foreach (<init><decl><type><name pos:line="304" pos:column="34">var</name></type> <name pos:line="304" pos:column="38">visibilityModifier</name> <range pos:line="304" pos:column="57">in <expr><name pos:line="304" pos:column="60">visibilityModifiers</name></expr></range></decl></init>)
				<if pos:line="305" pos:column="33">if <condition pos:line="305" pos:column="36">(<expr><op:operator pos:line="305" pos:column="37">!</op:operator><call><name><name pos:line="305" pos:column="38">visibilityModifier</name><op:operator pos:line="305" pos:column="56">.</op:operator><name pos:line="305" pos:column="57">IsVisible</name></name><argument_list pos:line="305" pos:column="66">(<argument><expr><name pos:line="305" pos:column="67">this</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="73">player</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="305" pos:column="81">
					<return pos:line="306" pos:column="41">return <expr><lit:literal type="boolean" pos:line="306" pos:column="48">false</lit:literal></expr>;</return></then></if></foreach>

			<return pos:line="308" pos:column="25">return <expr><call><name><name pos:line="308" pos:column="32">defaultVisibility</name><op:operator pos:line="308" pos:column="49">.</op:operator><name pos:line="308" pos:column="50">IsVisible</name></name><argument_list pos:line="308" pos:column="59">(<argument><expr><name pos:line="308" pos:column="60">this</name></expr></argument>, <argument><expr><name pos:line="308" pos:column="66">player</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<cpp:region pos:line="311" pos:column="17">#<cpp:directive pos:line="311" pos:column="18">region</cpp:directive> Scripting interface</cpp:region>

		<decl_stmt><decl><type><name><name pos:line="313" pos:column="17">Lazy</name><argument_list pos:line="313" pos:column="21">&lt;<argument><name pos:line="313" pos:column="22">ScriptActorInterface</name></argument>&gt;</argument_list></name></type> <name pos:line="313" pos:column="44">luaInterface</name></decl>;</decl_stmt>
		<function><type><specifier pos:line="314" pos:column="17">public</specifier> <name pos:line="314" pos:column="24">void</name></type> <name pos:line="314" pos:column="29">OnScriptBind</name><parameter_list pos:line="314" pos:column="41">(<param><decl><type><name pos:line="314" pos:column="42">ScriptContext</name></type> <name pos:line="314" pos:column="56">context</name></decl></param>)</parameter_list>
		<block pos:line="315" pos:column="17">{
			<if pos:line="316" pos:column="25">if <condition pos:line="316" pos:column="28">(<expr><name pos:line="316" pos:column="29">luaInterface</name> <op:operator pos:line="316" pos:column="42">==</op:operator> <name pos:line="316" pos:column="45">null</name></expr>)</condition><then pos:line="316" pos:column="50">
				<expr_stmt><expr><name pos:line="317" pos:column="33">luaInterface</name> <op:operator pos:line="317" pos:column="46">=</op:operator> <call><name><name pos:line="317" pos:column="48">Exts</name><op:operator pos:line="317" pos:column="52">.</op:operator><name pos:line="317" pos:column="53">Lazy</name></name><argument_list pos:line="317" pos:column="57">(<argument><expr><lambda><parameter_list pos:line="317" pos:column="58">()</parameter_list> <op:operator pos:line="317" pos:column="61">=&gt;</op:operator> <op:operator pos:line="317" pos:column="64">new</op:operator> <call><name pos:line="317" pos:column="68">ScriptActorInterface</name><argument_list pos:line="317" pos:column="88">(<argument><expr><name pos:line="317" pos:column="89">context</name></expr></argument>, <argument><expr><name pos:line="317" pos:column="98">this</name></expr></argument>)</argument_list></call></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></function>

		<decl_stmt><decl><type><specifier pos:line="320" pos:column="17">public</specifier> <name pos:line="320" pos:column="24">LuaValue</name></type> <name pos:line="320" pos:column="33">this</name><parameter_list pos:line="320" pos:column="37">[<param><decl><type><name pos:line="320" pos:column="38">LuaRuntime</name></type> <name pos:line="320" pos:column="49">runtime</name></decl></param><op:operator pos:line="320" pos:column="56">,</op:operator> <param><decl><type><name pos:line="320" pos:column="58">LuaValue</name></type> <name pos:line="320" pos:column="67">keyValue</name></decl></param>]</parameter_list>
		<block pos:line="321" pos:column="17">{
			<function><name pos:line="322" pos:column="25">get</name> <block pos:line="322" pos:column="29">{ <return pos:line="322" pos:column="31">return <expr><name><name pos:line="322" pos:column="38">luaInterface</name><op:operator pos:line="322" pos:column="50">.</op:operator><name pos:line="322" pos:column="51">Value</name><index pos:line="322" pos:column="56">[<expr><name pos:line="322" pos:column="57">runtime</name></expr>, <expr><name pos:line="322" pos:column="66">keyValue</name></expr>]</index></name></expr>;</return> }</block></function>
			<function><name pos:line="323" pos:column="25">set</name> <block pos:line="323" pos:column="29">{ <expr_stmt><expr><name><name pos:line="323" pos:column="31">luaInterface</name><op:operator pos:line="323" pos:column="43">.</op:operator><name pos:line="323" pos:column="44">Value</name><index pos:line="323" pos:column="49">[<expr><name pos:line="323" pos:column="50">runtime</name></expr>, <expr><name pos:line="323" pos:column="59">keyValue</name></expr>]</index></name> <op:operator pos:line="323" pos:column="69">=</op:operator> <name pos:line="323" pos:column="71">value</name></expr>;</expr_stmt> }</block></function>
		}</block></decl></decl_stmt>

		<function><type><specifier pos:line="326" pos:column="17">public</specifier> <name pos:line="326" pos:column="24">LuaValue</name></type> <name pos:line="326" pos:column="33">Equals</name><parameter_list pos:line="326" pos:column="39">(<param><decl><type><name pos:line="326" pos:column="40">LuaRuntime</name></type> <name pos:line="326" pos:column="51">runtime</name></decl></param>, <param><decl><type><name pos:line="326" pos:column="60">LuaValue</name></type> <name pos:line="326" pos:column="69">left</name></decl></param>, <param><decl><type><name pos:line="326" pos:column="75">LuaValue</name></type> <name pos:line="326" pos:column="84">right</name></decl></param>)</parameter_list>
		<block pos:line="327" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="328" pos:column="25">Actor</name></type> <name pos:line="328" pos:column="31">a</name></decl><op:operator pos:line="328" pos:column="32">,</op:operator> <decl><type ref="prev"/><name pos:line="328" pos:column="34">b</name></decl>;</decl_stmt>
			<if pos:line="329" pos:column="25">if <condition pos:line="329" pos:column="28">(<expr><op:operator pos:line="329" pos:column="29">!</op:operator><call><name><name pos:line="329" pos:column="30">left</name><op:operator pos:line="329" pos:column="34">.</op:operator><name><name pos:line="329" pos:column="35">TryGetClrValue</name><argument_list pos:line="329" pos:column="49">&lt;<argument><name pos:line="329" pos:column="50">Actor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="329" pos:column="56">(<argument><expr pos:line="329" pos:column="57">out <name pos:line="329" pos:column="61">a</name></expr></argument>)</argument_list></call> <op:operator pos:line="329" pos:column="64">||</op:operator> <op:operator pos:line="329" pos:column="67">!</op:operator><call><name><name pos:line="329" pos:column="68">right</name><op:operator pos:line="329" pos:column="73">.</op:operator><name><name pos:line="329" pos:column="74">TryGetClrValue</name><argument_list pos:line="329" pos:column="88">&lt;<argument><name pos:line="329" pos:column="89">Actor</name></argument>&gt;</argument_list></name></name><argument_list pos:line="329" pos:column="95">(<argument><expr pos:line="329" pos:column="96">out <name pos:line="329" pos:column="100">b</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="329" pos:column="103">
				<return pos:line="330" pos:column="33">return <expr><lit:literal type="boolean" pos:line="330" pos:column="40">false</lit:literal></expr>;</return></then></if>

			<return pos:line="332" pos:column="25">return <expr><name pos:line="332" pos:column="32">a</name> <op:operator pos:line="332" pos:column="34">==</op:operator> <name pos:line="332" pos:column="37">b</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="335" pos:column="17">public</specifier> <name pos:line="335" pos:column="24">LuaValue</name></type> <name pos:line="335" pos:column="33">ToString</name><parameter_list pos:line="335" pos:column="41">(<param><decl><type><name pos:line="335" pos:column="42">LuaRuntime</name></type> <name pos:line="335" pos:column="53">runtime</name></decl></param>)</parameter_list>
		<block pos:line="336" pos:column="17">{
			<return pos:line="337" pos:column="25">return <expr><lit:literal type="string" pos:line="337" pos:column="32">"Actor ({0})"</lit:literal><op:operator pos:line="337" pos:column="45">.</op:operator><call><name pos:line="337" pos:column="46">F</name><argument_list pos:line="337" pos:column="47">(<argument><expr><name pos:line="337" pos:column="48">this</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="340" pos:column="17">public</specifier> <name pos:line="340" pos:column="24">bool</name></type> <name pos:line="340" pos:column="29">HasScriptProperty</name><parameter_list pos:line="340" pos:column="46">(<param><decl><type><name pos:line="340" pos:column="47">string</name></type> <name pos:line="340" pos:column="54">name</name></decl></param>)</parameter_list>
		<block pos:line="341" pos:column="17">{
			<return pos:line="342" pos:column="25">return <expr><call><name><name pos:line="342" pos:column="32">luaInterface</name><op:operator pos:line="342" pos:column="44">.</op:operator><name pos:line="342" pos:column="45">Value</name><op:operator pos:line="342" pos:column="50">.</op:operator><name pos:line="342" pos:column="51">ContainsKey</name></name><argument_list pos:line="342" pos:column="62">(<argument><expr><name pos:line="342" pos:column="63">name</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<cpp:endregion pos:line="345" pos:column="17">#<cpp:directive pos:line="345" pos:column="18">endregion</cpp:directive></cpp:endregion>
	}</block></class>
}</block></namespace>
</unit>
