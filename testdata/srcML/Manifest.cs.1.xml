<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\Manifest.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Drawing</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">IO</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">System</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">Linq</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">OpenRA</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Primitives</name></name>;</using>

<namespace pos:line="18" pos:column="1">namespace <name pos:line="18" pos:column="11">OpenRA</name>
<block pos:line="19" pos:column="1">{
	<enum><specifier pos:line="20" pos:column="9">public</specifier> enum <macro><name pos:line="20" pos:column="21">TileShape</name></macro> <block pos:line="20" pos:column="31">{ <decl><name pos:line="20" pos:column="33">Rectangle</name></decl><op:operator pos:line="20" pos:column="42">,</op:operator> <decl><name pos:line="20" pos:column="44">Diamond</name></decl> }</block>
	<decl pos:line="21" pos:column="9">public interface <name pos:line="21" pos:column="26">IGlobalModData</name> <block pos:line="21" pos:column="41">{ }</block></decl>

	<decl pos:line="23" pos:column="9">public sealed <name pos:line="23" pos:column="23">class</name> <name pos:line="23" pos:column="29">SpriteSequenceFormat</name> <op:operator pos:line="23" pos:column="50">:</op:operator> <name pos:line="23" pos:column="52">IGlobalModData</name>
	<block pos:line="24" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="25" pos:column="17">public</specifier> <specifier pos:line="25" pos:column="24">readonly</specifier> <name pos:line="25" pos:column="33">string</name></type> <name pos:line="25" pos:column="40">Type</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="26" pos:column="17">public</specifier> <specifier pos:line="26" pos:column="24">readonly</specifier> <name><name pos:line="26" pos:column="33">IReadOnlyDictionary</name><argument_list pos:line="26" pos:column="52">&lt;<argument><name pos:line="26" pos:column="53">string</name></argument>, <argument><name pos:line="26" pos:column="61">MiniYaml</name></argument>&gt;</argument_list></name></type> <name pos:line="26" pos:column="71">Metadata</name></decl>;</decl_stmt>
		<constructor><specifier pos:line="27" pos:column="17">public</specifier> <name pos:line="27" pos:column="24">SpriteSequenceFormat</name><parameter_list pos:line="27" pos:column="44">(<param><decl><type><name pos:line="27" pos:column="45">MiniYaml</name></type> <name pos:line="27" pos:column="54">yaml</name></decl></param>)</parameter_list>
		<block pos:line="28" pos:column="17">{
			<expr_stmt><expr><name pos:line="29" pos:column="25">Type</name> <op:operator pos:line="29" pos:column="30">=</op:operator> <name><name pos:line="29" pos:column="32">yaml</name><op:operator pos:line="29" pos:column="36">.</op:operator><name pos:line="29" pos:column="37">Value</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="30" pos:column="25">Metadata</name> <op:operator pos:line="30" pos:column="34">=</op:operator> <op:operator pos:line="30" pos:column="36">new</op:operator> <call><name><name pos:line="30" pos:column="40">ReadOnlyDictionary</name><argument_list pos:line="30" pos:column="58">&lt;<argument><name pos:line="30" pos:column="59">string</name></argument>, <argument><name pos:line="30" pos:column="67">MiniYaml</name></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="76">(<argument><expr><call><name><name pos:line="30" pos:column="77">yaml</name><op:operator pos:line="30" pos:column="81">.</op:operator><name pos:line="30" pos:column="82">ToDictionary</name></name><argument_list pos:line="30" pos:column="94">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></constructor>
	}</block></decl>

	<comment type="line" pos:line="34" pos:column="9">// Describes what is to be loaded in order to run a mod</comment>
	<decl pos:line="35" pos:column="9">public <name pos:line="35" pos:column="16">class</name> <name pos:line="35" pos:column="22">Manifest</name>
	<block pos:line="36" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="37" pos:column="17">public</specifier> <specifier pos:line="37" pos:column="24">readonly</specifier> <name pos:line="37" pos:column="33">ModMetadata</name></type> <name pos:line="37" pos:column="45">Mod</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="38" pos:column="17">public</specifier> <specifier pos:line="38" pos:column="24">readonly</specifier> <name pos:line="38" pos:column="33">string</name><index pos:line="38" pos:column="39">[]</index></type>
			<name pos:line="39" pos:column="25">Folders</name></decl></decl_stmt><op:operator pos:line="39" pos:column="32">,</op:operator> <expr_stmt><expr><name pos:line="39" pos:column="34">Rules</name></expr><op:operator pos:line="39" pos:column="39">,</op:operator> <expr><name pos:line="39" pos:column="41">ServerTraits</name></expr><op:operator pos:line="39" pos:column="53">,</op:operator>
			<expr><name pos:line="40" pos:column="25">Sequences</name></expr><op:operator pos:line="40" pos:column="34">,</op:operator> <expr><name pos:line="40" pos:column="36">VoxelSequences</name></expr><op:operator pos:line="40" pos:column="50">,</op:operator> <expr><name pos:line="40" pos:column="52">Cursors</name></expr><op:operator pos:line="40" pos:column="59">,</op:operator> <expr><name pos:line="40" pos:column="61">Chrome</name></expr><op:operator pos:line="40" pos:column="67">,</op:operator> <expr><name pos:line="40" pos:column="69">Assemblies</name></expr><op:operator pos:line="40" pos:column="79">,</op:operator> <expr><name pos:line="40" pos:column="81">ChromeLayout</name></expr><op:operator pos:line="40" pos:column="93">,</op:operator>
			<expr><name pos:line="41" pos:column="25">Weapons</name></expr><op:operator pos:line="41" pos:column="32">,</op:operator> <expr><name pos:line="41" pos:column="34">Voices</name></expr><op:operator pos:line="41" pos:column="40">,</op:operator> <expr><name pos:line="41" pos:column="42">Notifications</name></expr><op:operator pos:line="41" pos:column="55">,</op:operator> <expr><name pos:line="41" pos:column="57">Music</name></expr><op:operator pos:line="41" pos:column="62">,</op:operator> <expr><name pos:line="41" pos:column="64">Translations</name></expr><op:operator pos:line="41" pos:column="76">,</op:operator> <expr><name pos:line="41" pos:column="78">TileSets</name></expr><op:operator pos:line="41" pos:column="86">,</op:operator>
			<expr><name pos:line="42" pos:column="25">ChromeMetrics</name></expr><op:operator pos:line="42" pos:column="38">,</op:operator> <expr><name pos:line="42" pos:column="40">MapCompatibility</name></expr><op:operator pos:line="42" pos:column="56">,</op:operator> <expr><name pos:line="42" pos:column="58">Missions</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><specifier pos:line="44" pos:column="17">public</specifier> <specifier pos:line="44" pos:column="24">readonly</specifier> <name><name pos:line="44" pos:column="33">IReadOnlyDictionary</name><argument_list pos:line="44" pos:column="52">&lt;<argument><name pos:line="44" pos:column="53">string</name></argument>, <argument><name pos:line="44" pos:column="61">string</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="69">Packages</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="45" pos:column="17">public</specifier> <specifier pos:line="45" pos:column="24">readonly</specifier> <name><name pos:line="45" pos:column="33">IReadOnlyDictionary</name><argument_list pos:line="45" pos:column="52">&lt;<argument><name pos:line="45" pos:column="53">string</name></argument>, <argument><name pos:line="45" pos:column="61">string</name></argument>&gt;</argument_list></name></type> <name pos:line="45" pos:column="69">MapFolders</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="46" pos:column="17">public</specifier> <specifier pos:line="46" pos:column="24">readonly</specifier> <name pos:line="46" pos:column="33">MiniYaml</name></type> <name pos:line="46" pos:column="42">LoadScreen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="47" pos:column="17">public</specifier> <specifier pos:line="47" pos:column="24">readonly</specifier> <name pos:line="47" pos:column="33">MiniYaml</name></type> <name pos:line="47" pos:column="42">LobbyDefaults</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="49" pos:column="17">public</specifier> <specifier pos:line="49" pos:column="24">readonly</specifier> <name><name pos:line="49" pos:column="33">Dictionary</name><argument_list pos:line="49" pos:column="43">&lt;<argument><name pos:line="49" pos:column="44">string</name></argument>, <argument><name><name pos:line="49" pos:column="52">Pair</name><argument_list pos:line="49" pos:column="56">&lt;<argument><name pos:line="49" pos:column="57">string</name></argument>, <argument><name pos:line="49" pos:column="65">int</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name pos:line="49" pos:column="71">Fonts</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="50" pos:column="17">public</specifier> <specifier pos:line="50" pos:column="24">readonly</specifier> <name pos:line="50" pos:column="33">Size</name></type> <name pos:line="50" pos:column="38">TileSize</name> <init pos:line="50" pos:column="47">= <expr><op:operator pos:line="50" pos:column="49">new</op:operator> <call><name pos:line="50" pos:column="53">Size</name><argument_list pos:line="50" pos:column="57">(<argument><expr><lit:literal type="number" pos:line="50" pos:column="58">24</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="50" pos:column="62">24</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="51" pos:column="17">public</specifier> <specifier pos:line="51" pos:column="24">readonly</specifier> <name pos:line="51" pos:column="33">TileShape</name></type> <name pos:line="51" pos:column="43">TileShape</name> <init pos:line="51" pos:column="53">= <expr><name><name pos:line="51" pos:column="55">TileShape</name><op:operator pos:line="51" pos:column="64">.</op:operator><name pos:line="51" pos:column="65">Rectangle</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="52" pos:column="17">public</specifier> <specifier pos:line="52" pos:column="24">readonly</specifier> <name pos:line="52" pos:column="33">byte</name></type> <name pos:line="52" pos:column="38">MaximumTerrainHeight</name> <init pos:line="52" pos:column="59">= <expr><lit:literal type="number" pos:line="52" pos:column="61">0</lit:literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="54" pos:column="17">public</specifier> <specifier pos:line="54" pos:column="24">readonly</specifier> <name pos:line="54" pos:column="33">string</name><index pos:line="54" pos:column="39">[]</index></type> <name pos:line="54" pos:column="42">SpriteFormats</name> <init pos:line="54" pos:column="56">= <expr><block pos:line="54" pos:column="58">{ }</block></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><attribute pos:line="56" pos:column="17">[<expr><call><name pos:line="56" pos:column="18">Desc</name><argument_list pos:line="56" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="23">"(x,y,z) offset of the full cell and each sub-cell"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="56" pos:column="76">"X &amp; Y should be between -512 ... 512 and Z &gt;= 0"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
		<specifier pos:line="57" pos:column="17">public</specifier> <specifier pos:line="57" pos:column="24">readonly</specifier> <name pos:line="57" pos:column="33">WVec</name><index pos:line="57" pos:column="37">[]</index></type> <name pos:line="57" pos:column="40">SubCellOffsets</name> <init pos:line="57" pos:column="55">=
		<expr><block pos:line="58" pos:column="17">{
			<expr><op:operator pos:line="59" pos:column="25">new</op:operator> <call><name pos:line="59" pos:column="29">WVec</name><argument_list pos:line="59" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="59" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="59" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call></expr>,       <comment type="line" pos:line="59" pos:column="50">// full cell - index 0</comment>
			<expr><op:operator pos:line="60" pos:column="25">new</op:operator> <call><name pos:line="60" pos:column="29">WVec</name><argument_list pos:line="60" pos:column="33">(<argument><expr><op:operator pos:line="60" pos:column="34">-</op:operator><lit:literal type="number" pos:line="60" pos:column="35">299</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="60" pos:column="40">-</op:operator><lit:literal type="number" pos:line="60" pos:column="41">256</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="60" pos:column="46">0</lit:literal></expr></argument>)</argument_list></call></expr>, <comment type="line" pos:line="60" pos:column="50">// top left - index 1</comment>
			<expr><op:operator pos:line="61" pos:column="25">new</op:operator> <call><name pos:line="61" pos:column="29">WVec</name><argument_list pos:line="61" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="34">256</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="61" pos:column="39">-</op:operator><lit:literal type="number" pos:line="61" pos:column="40">256</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="61" pos:column="45">0</lit:literal></expr></argument>)</argument_list></call></expr>,  <comment type="line" pos:line="61" pos:column="50">// top right - index 2</comment>
			<expr><op:operator pos:line="62" pos:column="25">new</op:operator> <call><name pos:line="62" pos:column="29">WVec</name><argument_list pos:line="62" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="62" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="62" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call></expr>,       <comment type="line" pos:line="62" pos:column="50">// center - index 3</comment>
			<expr><op:operator pos:line="63" pos:column="25">new</op:operator> <call><name pos:line="63" pos:column="29">WVec</name><argument_list pos:line="63" pos:column="33">(<argument><expr><op:operator pos:line="63" pos:column="34">-</op:operator><lit:literal type="number" pos:line="63" pos:column="35">299</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="63" pos:column="40">256</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="63" pos:column="45">0</lit:literal></expr></argument>)</argument_list></call></expr>,  <comment type="line" pos:line="63" pos:column="50">// bottom left - index 4</comment>
			<expr><op:operator pos:line="64" pos:column="25">new</op:operator> <call><name pos:line="64" pos:column="29">WVec</name><argument_list pos:line="64" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="64" pos:column="34">256</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="64" pos:column="39">256</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="64" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call></expr>,   <comment type="line" pos:line="64" pos:column="50">// bottom right - index 5</comment>
		}</block></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><attribute pos:line="67" pos:column="17">[<expr><call><name pos:line="67" pos:column="18">Desc</name><argument_list pos:line="67" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="23">"Default subcell index used if SubCellInit is absent"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="67" pos:column="78">"0 - full cell, 1 - first sub-cell"</lit:literal></expr></argument>)</argument_list></call></expr>]</attribute>
		<specifier pos:line="68" pos:column="17">public</specifier> <specifier pos:line="68" pos:column="24">readonly</specifier> <name pos:line="68" pos:column="33">int</name></type> <name pos:line="68" pos:column="37">SubCellDefaultIndex</name> <init pos:line="68" pos:column="57">= <expr><lit:literal type="number" pos:line="68" pos:column="59">3</lit:literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="70" pos:column="17">readonly</specifier> <name pos:line="70" pos:column="26">string</name><index pos:line="70" pos:column="32">[]</index></type> <name pos:line="70" pos:column="35">reservedModuleNames</name> <init pos:line="70" pos:column="55">= <expr><block pos:line="70" pos:column="57">{ <expr><lit:literal type="string" pos:line="70" pos:column="59">"Metadata"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="70" pos:column="71">"Folders"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="70" pos:column="82">"MapFolders"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="70" pos:column="96">"Packages"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="70" pos:column="108">"Rules"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="71" pos:column="25">"Sequences"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="71" pos:column="38">"VoxelSequences"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="71" pos:column="56">"Cursors"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="71" pos:column="67">"Chrome"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="71" pos:column="77">"Assemblies"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="71" pos:column="91">"ChromeLayout"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="71" pos:column="107">"Weapons"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="72" pos:column="25">"Voices"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="72" pos:column="35">"Notifications"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="72" pos:column="52">"Music"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="72" pos:column="61">"Translations"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="72" pos:column="77">"TileSets"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="72" pos:column="89">"ChromeMetrics"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="72" pos:column="106">"Missions"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="73" pos:column="25">"ServerTraits"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="41">"LoadScreen"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="55">"LobbyDefaults"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="72">"Fonts"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="81">"TileSize"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="73" pos:column="93">"MaximumTerrainHeight"</lit:literal></expr>,
			<expr><lit:literal type="string" pos:line="74" pos:column="25">"TileShape"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="74" pos:column="38">"SubCells"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="74" pos:column="50">"SupportsMapsFrom"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="74" pos:column="70">"SpriteFormats"</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><specifier pos:line="76" pos:column="17">readonly</specifier> <name pos:line="76" pos:column="26">TypeDictionary</name></type> <name pos:line="76" pos:column="41">modules</name> <init pos:line="76" pos:column="49">= <expr><op:operator pos:line="76" pos:column="51">new</op:operator> <call><name pos:line="76" pos:column="55">TypeDictionary</name><argument_list pos:line="76" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="77" pos:column="17">readonly</specifier> <name><name pos:line="77" pos:column="26">Dictionary</name><argument_list pos:line="77" pos:column="36">&lt;<argument><name pos:line="77" pos:column="37">string</name></argument>, <argument><name pos:line="77" pos:column="45">MiniYaml</name></argument>&gt;</argument_list></name></type> <name pos:line="77" pos:column="55">yaml</name></decl>;</decl_stmt>

		<constructor><specifier pos:line="79" pos:column="17">public</specifier> <name pos:line="79" pos:column="24">Manifest</name><parameter_list pos:line="79" pos:column="32">(<param><decl><type><name pos:line="79" pos:column="33">string</name></type> <name pos:line="79" pos:column="40">mod</name></decl></param>)</parameter_list>
		<block pos:line="80" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="81" pos:column="25">var</name></type> <name pos:line="81" pos:column="29">path</name> <init pos:line="81" pos:column="34">= <expr><call><name><name pos:line="81" pos:column="36">Platform</name><op:operator pos:line="81" pos:column="44">.</op:operator><name pos:line="81" pos:column="45">ResolvePath</name></name><argument_list pos:line="81" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="57">"."</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="81" pos:column="62">"mods"</lit:literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="70">mod</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="81" pos:column="75">"mod.yaml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="82" pos:column="25">yaml</name> <op:operator pos:line="82" pos:column="30">=</op:operator> <op:operator pos:line="82" pos:column="32">new</op:operator> <call><name pos:line="82" pos:column="36">MiniYaml</name><argument_list pos:line="82" pos:column="44">(<argument><expr><name pos:line="82" pos:column="45">null</name></expr></argument>, <argument><expr><call><name><name pos:line="82" pos:column="51">MiniYaml</name><op:operator pos:line="82" pos:column="59">.</op:operator><name pos:line="82" pos:column="60">FromFile</name></name><argument_list pos:line="82" pos:column="68">(<argument><expr><name pos:line="82" pos:column="69">path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="82" pos:column="75">.</op:operator><call><name pos:line="82" pos:column="76">ToDictionary</name><argument_list pos:line="82" pos:column="88">()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="84" pos:column="25">Mod</name> <op:operator pos:line="84" pos:column="29">=</op:operator> <call><name><name pos:line="84" pos:column="31">FieldLoader</name><op:operator pos:line="84" pos:column="42">.</op:operator><name><name pos:line="84" pos:column="43">Load</name><argument_list pos:line="84" pos:column="47">&lt;<argument><name pos:line="84" pos:column="48">ModMetadata</name></argument>&gt;</argument_list></name></name><argument_list pos:line="84" pos:column="60">(<argument><expr><name><name pos:line="84" pos:column="61">yaml</name><index pos:line="84" pos:column="65">[<expr><lit:literal type="string" pos:line="84" pos:column="66">"Metadata"</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="85" pos:column="25">Mod</name><op:operator pos:line="85" pos:column="28">.</op:operator><name pos:line="85" pos:column="29">Id</name></name> <op:operator pos:line="85" pos:column="32">=</op:operator> <name pos:line="85" pos:column="34">mod</name></expr>;</expr_stmt>

			<comment type="line" pos:line="87" pos:column="25">// TODO: Use fieldloader</comment>
			<expr_stmt><expr><name pos:line="88" pos:column="25">Folders</name> <op:operator pos:line="88" pos:column="33">=</op:operator> <call><name pos:line="88" pos:column="35">YamlList</name><argument_list pos:line="88" pos:column="43">(<argument><expr><name pos:line="88" pos:column="44">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="88" pos:column="50">"Folders"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="88" pos:column="61">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="89" pos:column="25">MapFolders</name> <op:operator pos:line="89" pos:column="36">=</op:operator> <call><name pos:line="89" pos:column="38">YamlDictionary</name><argument_list pos:line="89" pos:column="52">(<argument><expr><name pos:line="89" pos:column="53">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="89" pos:column="59">"MapFolders"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="89" pos:column="73">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="90" pos:column="25">Packages</name> <op:operator pos:line="90" pos:column="34">=</op:operator> <call><name pos:line="90" pos:column="36">YamlDictionary</name><argument_list pos:line="90" pos:column="50">(<argument><expr><name pos:line="90" pos:column="51">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="90" pos:column="57">"Packages"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="90" pos:column="69">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="91" pos:column="25">Rules</name> <op:operator pos:line="91" pos:column="31">=</op:operator> <call><name pos:line="91" pos:column="33">YamlList</name><argument_list pos:line="91" pos:column="41">(<argument><expr><name pos:line="91" pos:column="42">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="48">"Rules"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="91" pos:column="57">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="92" pos:column="25">Sequences</name> <op:operator pos:line="92" pos:column="35">=</op:operator> <call><name pos:line="92" pos:column="37">YamlList</name><argument_list pos:line="92" pos:column="45">(<argument><expr><name pos:line="92" pos:column="46">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="52">"Sequences"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="92" pos:column="65">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="93" pos:column="25">VoxelSequences</name> <op:operator pos:line="93" pos:column="40">=</op:operator> <call><name pos:line="93" pos:column="42">YamlList</name><argument_list pos:line="93" pos:column="50">(<argument><expr><name pos:line="93" pos:column="51">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="57">"VoxelSequences"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="93" pos:column="75">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="94" pos:column="25">Cursors</name> <op:operator pos:line="94" pos:column="33">=</op:operator> <call><name pos:line="94" pos:column="35">YamlList</name><argument_list pos:line="94" pos:column="43">(<argument><expr><name pos:line="94" pos:column="44">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="94" pos:column="50">"Cursors"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="94" pos:column="61">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="95" pos:column="25">Chrome</name> <op:operator pos:line="95" pos:column="32">=</op:operator> <call><name pos:line="95" pos:column="34">YamlList</name><argument_list pos:line="95" pos:column="42">(<argument><expr><name pos:line="95" pos:column="43">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="49">"Chrome"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="95" pos:column="59">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="96" pos:column="25">Assemblies</name> <op:operator pos:line="96" pos:column="36">=</op:operator> <call><name pos:line="96" pos:column="38">YamlList</name><argument_list pos:line="96" pos:column="46">(<argument><expr><name pos:line="96" pos:column="47">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="96" pos:column="53">"Assemblies"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="96" pos:column="67">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="97" pos:column="25">ChromeLayout</name> <op:operator pos:line="97" pos:column="38">=</op:operator> <call><name pos:line="97" pos:column="40">YamlList</name><argument_list pos:line="97" pos:column="48">(<argument><expr><name pos:line="97" pos:column="49">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="55">"ChromeLayout"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="97" pos:column="71">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="98" pos:column="25">Weapons</name> <op:operator pos:line="98" pos:column="33">=</op:operator> <call><name pos:line="98" pos:column="35">YamlList</name><argument_list pos:line="98" pos:column="43">(<argument><expr><name pos:line="98" pos:column="44">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="98" pos:column="50">"Weapons"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="98" pos:column="61">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="99" pos:column="25">Voices</name> <op:operator pos:line="99" pos:column="32">=</op:operator> <call><name pos:line="99" pos:column="34">YamlList</name><argument_list pos:line="99" pos:column="42">(<argument><expr><name pos:line="99" pos:column="43">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="99" pos:column="49">"Voices"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="99" pos:column="59">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="100" pos:column="25">Notifications</name> <op:operator pos:line="100" pos:column="39">=</op:operator> <call><name pos:line="100" pos:column="41">YamlList</name><argument_list pos:line="100" pos:column="49">(<argument><expr><name pos:line="100" pos:column="50">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="56">"Notifications"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="100" pos:column="73">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="101" pos:column="25">Music</name> <op:operator pos:line="101" pos:column="31">=</op:operator> <call><name pos:line="101" pos:column="33">YamlList</name><argument_list pos:line="101" pos:column="41">(<argument><expr><name pos:line="101" pos:column="42">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="48">"Music"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="101" pos:column="57">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="102" pos:column="25">Translations</name> <op:operator pos:line="102" pos:column="38">=</op:operator> <call><name pos:line="102" pos:column="40">YamlList</name><argument_list pos:line="102" pos:column="48">(<argument><expr><name pos:line="102" pos:column="49">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="55">"Translations"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="102" pos:column="71">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="103" pos:column="25">TileSets</name> <op:operator pos:line="103" pos:column="34">=</op:operator> <call><name pos:line="103" pos:column="36">YamlList</name><argument_list pos:line="103" pos:column="44">(<argument><expr><name pos:line="103" pos:column="45">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="51">"TileSets"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="103" pos:column="63">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="104" pos:column="25">ChromeMetrics</name> <op:operator pos:line="104" pos:column="39">=</op:operator> <call><name pos:line="104" pos:column="41">YamlList</name><argument_list pos:line="104" pos:column="49">(<argument><expr><name pos:line="104" pos:column="50">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="104" pos:column="56">"ChromeMetrics"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="104" pos:column="73">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="105" pos:column="25">Missions</name> <op:operator pos:line="105" pos:column="34">=</op:operator> <call><name pos:line="105" pos:column="36">YamlList</name><argument_list pos:line="105" pos:column="44">(<argument><expr><name pos:line="105" pos:column="45">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="105" pos:column="51">"Missions"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="105" pos:column="63">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="107" pos:column="25">ServerTraits</name> <op:operator pos:line="107" pos:column="38">=</op:operator> <call><name pos:line="107" pos:column="40">YamlList</name><argument_list pos:line="107" pos:column="48">(<argument><expr><name pos:line="107" pos:column="49">yaml</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="107" pos:column="55">"ServerTraits"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="109" pos:column="25">if <condition pos:line="109" pos:column="28">(<expr><op:operator pos:line="109" pos:column="29">!</op:operator><call><name><name pos:line="109" pos:column="30">yaml</name><op:operator pos:line="109" pos:column="34">.</op:operator><name pos:line="109" pos:column="35">TryGetValue</name></name><argument_list pos:line="109" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="47">"LoadScreen"</lit:literal></expr></argument>, <argument><expr pos:line="109" pos:column="61">out <name pos:line="109" pos:column="65">LoadScreen</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="109" pos:column="77">
				<throw pos:line="110" pos:column="33">throw <expr><op:operator pos:line="110" pos:column="39">new</op:operator> <call><name pos:line="110" pos:column="43">InvalidDataException</name><argument_list pos:line="110" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="64">"`LoadScreen` section is not defined."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><op:operator pos:line="112" pos:column="29">!</op:operator><call><name><name pos:line="112" pos:column="30">yaml</name><op:operator pos:line="112" pos:column="34">.</op:operator><name pos:line="112" pos:column="35">TryGetValue</name></name><argument_list pos:line="112" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="47">"LobbyDefaults"</lit:literal></expr></argument>, <argument><expr pos:line="112" pos:column="64">out <name pos:line="112" pos:column="68">LobbyDefaults</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="112" pos:column="83">
				<throw pos:line="113" pos:column="33">throw <expr><op:operator pos:line="113" pos:column="39">new</op:operator> <call><name pos:line="113" pos:column="43">InvalidDataException</name><argument_list pos:line="113" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="64">"`LobbyDefaults` section is not defined."</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<expr_stmt><expr><name pos:line="115" pos:column="25">Fonts</name> <op:operator pos:line="115" pos:column="31">=</op:operator> <name><name pos:line="115" pos:column="33">yaml</name><index pos:line="115" pos:column="37">[<expr><lit:literal type="string" pos:line="115" pos:column="38">"Fonts"</lit:literal></expr>]</index></name><op:operator pos:line="115" pos:column="46">.</op:operator><call><name pos:line="115" pos:column="47">ToDictionary</name><argument_list pos:line="115" pos:column="59">(<argument><expr><lambda><name pos:line="115" pos:column="60">my</name> <op:operator pos:line="115" pos:column="63">=&gt;</op:operator>
				<block pos:line="116" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="117" pos:column="41">var</name></type> <name pos:line="117" pos:column="45">nd</name> <init pos:line="117" pos:column="48">= <expr><call><name><name pos:line="117" pos:column="50">my</name><op:operator pos:line="117" pos:column="52">.</op:operator><name pos:line="117" pos:column="53">ToDictionary</name></name><argument_list pos:line="117" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<return pos:line="118" pos:column="41">return <expr><call><name><name pos:line="118" pos:column="48">Pair</name><op:operator pos:line="118" pos:column="52">.</op:operator><name pos:line="118" pos:column="53">New</name></name><argument_list pos:line="118" pos:column="56">(<argument><expr><name><name pos:line="118" pos:column="57">nd</name><index pos:line="118" pos:column="59">[<expr><lit:literal type="string" pos:line="118" pos:column="60">"Font"</lit:literal></expr>]</index></name><op:operator pos:line="118" pos:column="67">.</op:operator><name pos:line="118" pos:column="68">Value</name></expr></argument>, <argument><expr><call><name><name pos:line="118" pos:column="75">Exts</name><op:operator pos:line="118" pos:column="79">.</op:operator><name pos:line="118" pos:column="80">ParseIntegerInvariant</name></name><argument_list pos:line="118" pos:column="101">(<argument><expr><name><name pos:line="118" pos:column="102">nd</name><index pos:line="118" pos:column="104">[<expr><lit:literal type="string" pos:line="118" pos:column="105">"Size"</lit:literal></expr>]</index></name><op:operator pos:line="118" pos:column="112">.</op:operator><name pos:line="118" pos:column="113">Value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
				}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="121" pos:column="25">if <condition pos:line="121" pos:column="28">(<expr><call><name><name pos:line="121" pos:column="29">yaml</name><op:operator pos:line="121" pos:column="33">.</op:operator><name pos:line="121" pos:column="34">ContainsKey</name></name><argument_list pos:line="121" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="46">"TileSize"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="121" pos:column="58">
				<expr_stmt><expr><name pos:line="122" pos:column="33">TileSize</name> <op:operator pos:line="122" pos:column="42">=</op:operator> <call><name><name pos:line="122" pos:column="44">FieldLoader</name><op:operator pos:line="122" pos:column="55">.</op:operator><name><name pos:line="122" pos:column="56">GetValue</name><argument_list pos:line="122" pos:column="64">&lt;<argument><name pos:line="122" pos:column="65">Size</name></argument>&gt;</argument_list></name></name><argument_list pos:line="122" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="71">"TileSize"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="83">yaml</name><index pos:line="122" pos:column="87">[<expr><lit:literal type="string" pos:line="122" pos:column="88">"TileSize"</lit:literal></expr>]</index></name><op:operator pos:line="122" pos:column="99">.</op:operator><name pos:line="122" pos:column="100">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<if pos:line="124" pos:column="25">if <condition pos:line="124" pos:column="28">(<expr><call><name><name pos:line="124" pos:column="29">yaml</name><op:operator pos:line="124" pos:column="33">.</op:operator><name pos:line="124" pos:column="34">ContainsKey</name></name><argument_list pos:line="124" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="46">"TileShape"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="124" pos:column="59">
				<expr_stmt><expr><name pos:line="125" pos:column="33">TileShape</name> <op:operator pos:line="125" pos:column="43">=</op:operator> <call><name><name pos:line="125" pos:column="45">FieldLoader</name><op:operator pos:line="125" pos:column="56">.</op:operator><name><name pos:line="125" pos:column="57">GetValue</name><argument_list pos:line="125" pos:column="65">&lt;<argument><name pos:line="125" pos:column="66">TileShape</name></argument>&gt;</argument_list></name></name><argument_list pos:line="125" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="77">"TileShape"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="90">yaml</name><index pos:line="125" pos:column="94">[<expr><lit:literal type="string" pos:line="125" pos:column="95">"TileShape"</lit:literal></expr>]</index></name><op:operator pos:line="125" pos:column="107">.</op:operator><name pos:line="125" pos:column="108">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<if pos:line="127" pos:column="25">if <condition pos:line="127" pos:column="28">(<expr><call><name><name pos:line="127" pos:column="29">yaml</name><op:operator pos:line="127" pos:column="33">.</op:operator><name pos:line="127" pos:column="34">ContainsKey</name></name><argument_list pos:line="127" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="46">"MaximumTerrainHeight"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="127" pos:column="70">
				<expr_stmt><expr><name pos:line="128" pos:column="33">MaximumTerrainHeight</name> <op:operator pos:line="128" pos:column="54">=</op:operator> <call><name><name pos:line="128" pos:column="56">FieldLoader</name><op:operator pos:line="128" pos:column="67">.</op:operator><name><name pos:line="128" pos:column="68">GetValue</name><argument_list pos:line="128" pos:column="76">&lt;<argument><name pos:line="128" pos:column="77">byte</name></argument>&gt;</argument_list></name></name><argument_list pos:line="128" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="83">"MaximumTerrainHeight"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="107">yaml</name><index pos:line="128" pos:column="111">[<expr><lit:literal type="string" pos:line="128" pos:column="112">"MaximumTerrainHeight"</lit:literal></expr>]</index></name><op:operator pos:line="128" pos:column="135">.</op:operator><name pos:line="128" pos:column="136">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<if pos:line="130" pos:column="25">if <condition pos:line="130" pos:column="28">(<expr><call><name><name pos:line="130" pos:column="29">yaml</name><op:operator pos:line="130" pos:column="33">.</op:operator><name pos:line="130" pos:column="34">ContainsKey</name></name><argument_list pos:line="130" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="46">"SubCells"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="130" pos:column="58">
			<block pos:line="131" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="132" pos:column="33">var</name></type> <name pos:line="132" pos:column="37">subcells</name> <init pos:line="132" pos:column="46">= <expr><name><name pos:line="132" pos:column="48">yaml</name><index pos:line="132" pos:column="52">[<expr><lit:literal type="string" pos:line="132" pos:column="53">"SubCells"</lit:literal></expr>]</index></name><op:operator pos:line="132" pos:column="64">.</op:operator><call><name pos:line="132" pos:column="65">ToDictionary</name><argument_list pos:line="132" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="line" pos:line="134" pos:column="33">// Read (x,y,z) offset (relative to cell center) pairs for positioning subcells</comment>
				<if pos:line="135" pos:column="33">if <condition pos:line="135" pos:column="36">(<expr><call><name><name pos:line="135" pos:column="37">subcells</name><op:operator pos:line="135" pos:column="45">.</op:operator><name pos:line="135" pos:column="46">ContainsKey</name></name><argument_list pos:line="135" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="58">"Offsets"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="135" pos:column="69">
					<expr_stmt><expr><name pos:line="136" pos:column="41">SubCellOffsets</name> <op:operator pos:line="136" pos:column="56">=</op:operator> <call><name><name pos:line="136" pos:column="58">FieldLoader</name><op:operator pos:line="136" pos:column="69">.</op:operator><name><name pos:line="136" pos:column="70">GetValue</name><argument_list pos:line="136" pos:column="78">&lt;<argument><name><name pos:line="136" pos:column="79">WVec</name><index pos:line="136" pos:column="83">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="136" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="87">"Offsets"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="136" pos:column="98">subcells</name><index pos:line="136" pos:column="106">[<expr><lit:literal type="string" pos:line="136" pos:column="107">"Offsets"</lit:literal></expr>]</index></name><op:operator pos:line="136" pos:column="117">.</op:operator><name pos:line="136" pos:column="118">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

				<if pos:line="138" pos:column="33">if <condition pos:line="138" pos:column="36">(<expr><call><name><name pos:line="138" pos:column="37">subcells</name><op:operator pos:line="138" pos:column="45">.</op:operator><name pos:line="138" pos:column="46">ContainsKey</name></name><argument_list pos:line="138" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="138" pos:column="58">"DefaultIndex"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="138" pos:column="74">
					<expr_stmt><expr><name pos:line="139" pos:column="41">SubCellDefaultIndex</name> <op:operator pos:line="139" pos:column="61">=</op:operator> <call><name><name pos:line="139" pos:column="63">FieldLoader</name><op:operator pos:line="139" pos:column="74">.</op:operator><name><name pos:line="139" pos:column="75">GetValue</name><argument_list pos:line="139" pos:column="83">&lt;<argument><name pos:line="139" pos:column="84">int</name></argument>&gt;</argument_list></name></name><argument_list pos:line="139" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="89">"DefaultIndex"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="139" pos:column="105">subcells</name><index pos:line="139" pos:column="113">[<expr><lit:literal type="string" pos:line="139" pos:column="114">"DefaultIndex"</lit:literal></expr>]</index></name><op:operator pos:line="139" pos:column="129">.</op:operator><name pos:line="139" pos:column="130">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="140" pos:column="33">else	<comment type="line" pos:line="140" pos:column="41">// Otherwise set the default subcell index to the middle subcell entry</comment>
					<expr_stmt><expr><name pos:line="141" pos:column="41">SubCellDefaultIndex</name> <op:operator pos:line="141" pos:column="61">=</op:operator> <name><name pos:line="141" pos:column="63">SubCellOffsets</name><op:operator pos:line="141" pos:column="77">.</op:operator><name pos:line="141" pos:column="78">Length</name></name> <op:operator pos:line="141" pos:column="85">/</op:operator> <lit:literal type="number" pos:line="141" pos:column="87">2</lit:literal></expr>;</expr_stmt></else></if>
			}</block></then></if>

			<comment type="line" pos:line="144" pos:column="25">// Validate default index - 0 for no subcells, otherwise &gt; 1 &amp; &lt;= subcell count (offset triples count - 1)</comment>
			<if pos:line="145" pos:column="25">if <condition pos:line="145" pos:column="28">(<expr><name pos:line="145" pos:column="29">SubCellDefaultIndex</name> <op:operator pos:line="145" pos:column="49">&lt;</op:operator> <op:operator pos:line="145" pos:column="51">(</op:operator><name><name pos:line="145" pos:column="52">SubCellOffsets</name><op:operator pos:line="145" pos:column="66">.</op:operator><name pos:line="145" pos:column="67">Length</name></name> <op:operator pos:line="145" pos:column="74">&gt;</op:operator> <lit:literal type="number" pos:line="145" pos:column="76">1</lit:literal> <op:operator pos:line="145" pos:column="78">?</op:operator> <lit:literal type="number" pos:line="145" pos:column="80">1</lit:literal> <op:operator pos:line="145" pos:column="82">:</op:operator> <lit:literal type="number" pos:line="145" pos:column="84">0</lit:literal><op:operator pos:line="145" pos:column="85">)</op:operator> <op:operator pos:line="145" pos:column="87">||</op:operator> <name pos:line="145" pos:column="90">SubCellDefaultIndex</name> <op:operator pos:line="145" pos:column="110">&gt;=</op:operator> <name><name pos:line="145" pos:column="113">SubCellOffsets</name><op:operator pos:line="145" pos:column="127">.</op:operator><name pos:line="145" pos:column="128">Length</name></name></expr>)</condition><then pos:line="145" pos:column="135">
				<throw pos:line="146" pos:column="33">throw <expr><op:operator pos:line="146" pos:column="39">new</op:operator> <call><name pos:line="146" pos:column="43">InvalidDataException</name><argument_list pos:line="146" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="64">"Subcell default index must be a valid index into the offset triples and must be greater than 0 for mods with subcells"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<comment type="line" pos:line="148" pos:column="25">// Allow inherited mods to import parent maps.</comment>
			<decl_stmt><decl><type><name pos:line="149" pos:column="25">var</name></type> <name pos:line="149" pos:column="29">compat</name> <init pos:line="149" pos:column="36">= <expr><op:operator pos:line="149" pos:column="38">new</op:operator> <call><name><name pos:line="149" pos:column="42">List</name><argument_list pos:line="149" pos:column="46">&lt;<argument><name pos:line="149" pos:column="47">string</name></argument>&gt;</argument_list></name><argument_list pos:line="149" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="150" pos:column="25">compat</name><op:operator pos:line="150" pos:column="31">.</op:operator><name pos:line="150" pos:column="32">Add</name></name><argument_list pos:line="150" pos:column="35">(<argument><expr><name pos:line="150" pos:column="36">mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="152" pos:column="25">if <condition pos:line="152" pos:column="28">(<expr><call><name><name pos:line="152" pos:column="29">yaml</name><op:operator pos:line="152" pos:column="33">.</op:operator><name pos:line="152" pos:column="34">ContainsKey</name></name><argument_list pos:line="152" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="46">"SupportsMapsFrom"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="66">
				<foreach pos:line="153" pos:column="33">foreach (<init><decl><type><name pos:line="153" pos:column="42">var</name></type> <name pos:line="153" pos:column="46">c</name> <range pos:line="153" pos:column="48">in <expr><name><name pos:line="153" pos:column="51">yaml</name><index pos:line="153" pos:column="55">[<expr><lit:literal type="string" pos:line="153" pos:column="56">"SupportsMapsFrom"</lit:literal></expr>]</index></name><op:operator pos:line="153" pos:column="75">.</op:operator><call><name><name pos:line="153" pos:column="76">Value</name><op:operator pos:line="153" pos:column="81">.</op:operator><name pos:line="153" pos:column="82">Split</name></name><argument_list pos:line="153" pos:column="87">(<argument><expr><lit:literal type="char" pos:line="153" pos:column="88">','</lit:literal></expr></argument>)</argument_list></call></expr></range></decl></init>)
					<expr_stmt><expr><call><name><name pos:line="154" pos:column="41">compat</name><op:operator pos:line="154" pos:column="47">.</op:operator><name pos:line="154" pos:column="48">Add</name></name><argument_list pos:line="154" pos:column="51">(<argument><expr><call><name><name pos:line="154" pos:column="52">c</name><op:operator pos:line="154" pos:column="53">.</op:operator><name pos:line="154" pos:column="54">Trim</name></name><argument_list pos:line="154" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></foreach></then></if>

			<expr_stmt><expr><name pos:line="156" pos:column="25">MapCompatibility</name> <op:operator pos:line="156" pos:column="42">=</op:operator> <call><name><name pos:line="156" pos:column="44">compat</name><op:operator pos:line="156" pos:column="50">.</op:operator><name pos:line="156" pos:column="51">ToArray</name></name><argument_list pos:line="156" pos:column="58">()</argument_list></call></expr>;</expr_stmt>

			<if pos:line="158" pos:column="25">if <condition pos:line="158" pos:column="28">(<expr><call><name><name pos:line="158" pos:column="29">yaml</name><op:operator pos:line="158" pos:column="33">.</op:operator><name pos:line="158" pos:column="34">ContainsKey</name></name><argument_list pos:line="158" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="158" pos:column="46">"SpriteFormats"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="63">
				<expr_stmt><expr><name pos:line="159" pos:column="33">SpriteFormats</name> <op:operator pos:line="159" pos:column="47">=</op:operator> <call><name><name pos:line="159" pos:column="49">FieldLoader</name><op:operator pos:line="159" pos:column="60">.</op:operator><name><name pos:line="159" pos:column="61">GetValue</name><argument_list pos:line="159" pos:column="69">&lt;<argument><name><name pos:line="159" pos:column="70">string</name><index pos:line="159" pos:column="76">[]</index></name></argument>&gt;</argument_list></name></name><argument_list pos:line="159" pos:column="79">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="80">"SpriteFormats"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="159" pos:column="97">yaml</name><index pos:line="159" pos:column="101">[<expr><lit:literal type="string" pos:line="159" pos:column="102">"SpriteFormats"</lit:literal></expr>]</index></name><op:operator pos:line="159" pos:column="118">.</op:operator><name pos:line="159" pos:column="119">Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></constructor>

		<function><type><specifier pos:line="162" pos:column="17">public</specifier> <name pos:line="162" pos:column="24">void</name></type> <name pos:line="162" pos:column="29">LoadCustomData</name><parameter_list pos:line="162" pos:column="43">(<param><decl><type><name pos:line="162" pos:column="44">ObjectCreator</name></type> <name pos:line="162" pos:column="58">oc</name></decl></param>)</parameter_list>
		<block pos:line="163" pos:column="17">{
			<foreach pos:line="164" pos:column="25">foreach (<init><decl><type><name pos:line="164" pos:column="34">var</name></type> <name pos:line="164" pos:column="38">kv</name> <range pos:line="164" pos:column="41">in <expr><name pos:line="164" pos:column="44">yaml</name></expr></range></decl></init>)
			<block pos:line="165" pos:column="25">{
				<if pos:line="166" pos:column="33">if <condition pos:line="166" pos:column="36">(<expr><call><name><name pos:line="166" pos:column="37">reservedModuleNames</name><op:operator pos:line="166" pos:column="56">.</op:operator><name pos:line="166" pos:column="57">Contains</name></name><argument_list pos:line="166" pos:column="65">(<argument><expr><name><name pos:line="166" pos:column="66">kv</name><op:operator pos:line="166" pos:column="68">.</op:operator><name pos:line="166" pos:column="69">Key</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="166" pos:column="74">
					<continue pos:line="167" pos:column="41">continue;</continue></then></if>

				<decl_stmt><decl><type><name pos:line="169" pos:column="33">var</name></type> <name pos:line="169" pos:column="37">t</name> <init pos:line="169" pos:column="39">= <expr><call><name><name pos:line="169" pos:column="41">oc</name><op:operator pos:line="169" pos:column="43">.</op:operator><name pos:line="169" pos:column="44">FindType</name></name><argument_list pos:line="169" pos:column="52">(<argument><expr><name><name pos:line="169" pos:column="53">kv</name><op:operator pos:line="169" pos:column="55">.</op:operator><name pos:line="169" pos:column="56">Key</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="170" pos:column="33">if <condition pos:line="170" pos:column="36">(<expr><name pos:line="170" pos:column="37">t</name> <op:operator pos:line="170" pos:column="39">==</op:operator> <name pos:line="170" pos:column="42">null</name> <op:operator pos:line="170" pos:column="47">||</op:operator> <op:operator pos:line="170" pos:column="50">!</op:operator><call><name pos:line="170" pos:column="51">typeof</name><argument_list pos:line="170" pos:column="57">(<argument><expr><name pos:line="170" pos:column="58">IGlobalModData</name></expr></argument>)</argument_list></call><op:operator pos:line="170" pos:column="73">.</op:operator><call><name pos:line="170" pos:column="74">IsAssignableFrom</name><argument_list pos:line="170" pos:column="90">(<argument><expr><name pos:line="170" pos:column="91">t</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="170" pos:column="94">
					<throw pos:line="171" pos:column="41">throw <expr><op:operator pos:line="171" pos:column="47">new</op:operator> <call><name pos:line="171" pos:column="51">InvalidDataException</name><argument_list pos:line="171" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="171" pos:column="72">"`{0}` is not a valid mod manifest entry."</lit:literal><op:operator pos:line="171" pos:column="114">.</op:operator><call><name pos:line="171" pos:column="115">F</name><argument_list pos:line="171" pos:column="116">(<argument><expr><name><name pos:line="171" pos:column="117">kv</name><op:operator pos:line="171" pos:column="119">.</op:operator><name pos:line="171" pos:column="120">Key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

				<decl_stmt><decl><type><name pos:line="173" pos:column="33">IGlobalModData</name></type> <name pos:line="173" pos:column="48">module</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="174" pos:column="33">var</name></type> <name pos:line="174" pos:column="37">ctor</name> <init pos:line="174" pos:column="42">= <expr><call><name><name pos:line="174" pos:column="44">t</name><op:operator pos:line="174" pos:column="45">.</op:operator><name pos:line="174" pos:column="46">GetConstructor</name></name><argument_list pos:line="174" pos:column="60">(<argument><expr><op:operator pos:line="174" pos:column="61">new</op:operator><index pos:line="174" pos:column="64">[]</index> <block pos:line="174" pos:column="67">{ <expr><call><name pos:line="174" pos:column="69">typeof</name><argument_list pos:line="174" pos:column="75">(<argument><expr><name pos:line="174" pos:column="76">MiniYaml</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="175" pos:column="33">if <condition pos:line="175" pos:column="36">(<expr><name pos:line="175" pos:column="37">ctor</name> <op:operator pos:line="175" pos:column="42">!=</op:operator> <name pos:line="175" pos:column="45">null</name></expr>)</condition><then pos:line="175" pos:column="50">
				<block pos:line="176" pos:column="33">{
					<comment type="line" pos:line="177" pos:column="41">// Class has opted-in to DIY initialization</comment>
					<expr_stmt><expr><name pos:line="178" pos:column="41">module</name> <op:operator pos:line="178" pos:column="48">=</op:operator> <op:operator pos:line="178" pos:column="50">(</op:operator><name pos:line="178" pos:column="51">IGlobalModData</name><op:operator pos:line="178" pos:column="65">)</op:operator><call><name><name pos:line="178" pos:column="66">ctor</name><op:operator pos:line="178" pos:column="70">.</op:operator><name pos:line="178" pos:column="71">Invoke</name></name><argument_list pos:line="178" pos:column="77">(<argument><expr><op:operator pos:line="178" pos:column="78">new</op:operator> <name><name pos:line="178" pos:column="82">object</name><index pos:line="178" pos:column="88">[]</index></name> <block pos:line="178" pos:column="91">{ <expr><name><name pos:line="178" pos:column="93">kv</name><op:operator pos:line="178" pos:column="95">.</op:operator><name pos:line="178" pos:column="96">Value</name></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="180" pos:column="33">else
				<block pos:line="181" pos:column="33">{
					<comment type="line" pos:line="182" pos:column="41">// Automatically load the child nodes using FieldLoader</comment>
					<expr_stmt><expr><name pos:line="183" pos:column="41">module</name> <op:operator pos:line="183" pos:column="48">=</op:operator> <call><name><name pos:line="183" pos:column="50">oc</name><op:operator pos:line="183" pos:column="52">.</op:operator><name><name pos:line="183" pos:column="53">CreateObject</name><argument_list pos:line="183" pos:column="65">&lt;<argument><name pos:line="183" pos:column="66">IGlobalModData</name></argument>&gt;</argument_list></name></name><argument_list pos:line="183" pos:column="81">(<argument><expr><name><name pos:line="183" pos:column="82">kv</name><op:operator pos:line="183" pos:column="84">.</op:operator><name pos:line="183" pos:column="85">Key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="184" pos:column="41">FieldLoader</name><op:operator pos:line="184" pos:column="52">.</op:operator><name pos:line="184" pos:column="53">Load</name></name><argument_list pos:line="184" pos:column="57">(<argument><expr><name pos:line="184" pos:column="58">module</name></expr></argument>, <argument><expr><name><name pos:line="184" pos:column="66">kv</name><op:operator pos:line="184" pos:column="68">.</op:operator><name pos:line="184" pos:column="69">Value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>

				<expr_stmt><expr><call><name><name pos:line="187" pos:column="33">modules</name><op:operator pos:line="187" pos:column="40">.</op:operator><name pos:line="187" pos:column="41">Add</name></name><argument_list pos:line="187" pos:column="44">(<argument><expr><name pos:line="187" pos:column="45">module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></foreach>
		}</block></function>

		<function><type><specifier pos:line="191" pos:column="17">static</specifier> <name pos:line="191" pos:column="24">string</name><index pos:line="191" pos:column="30">[]</index></type> <name pos:line="191" pos:column="33">YamlList</name><parameter_list pos:line="191" pos:column="41">(<param><decl><type><name><name pos:line="191" pos:column="42">Dictionary</name><argument_list pos:line="191" pos:column="52">&lt;<argument><name pos:line="191" pos:column="53">string</name></argument>, <argument><name pos:line="191" pos:column="61">MiniYaml</name></argument>&gt;</argument_list></name></type> <name pos:line="191" pos:column="71">yaml</name></decl></param>, <param><decl><type><name pos:line="191" pos:column="77">string</name></type> <name pos:line="191" pos:column="84">key</name></decl></param>, <param><decl><type><name pos:line="191" pos:column="89">bool</name></type> <name pos:line="191" pos:column="94">parsePaths</name> <init pos:line="191" pos:column="105">= <expr><lit:literal type="boolean" pos:line="191" pos:column="107">false</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="192" pos:column="17">{
			<if pos:line="193" pos:column="25">if <condition pos:line="193" pos:column="28">(<expr><op:operator pos:line="193" pos:column="29">!</op:operator><call><name><name pos:line="193" pos:column="30">yaml</name><op:operator pos:line="193" pos:column="34">.</op:operator><name pos:line="193" pos:column="35">ContainsKey</name></name><argument_list pos:line="193" pos:column="46">(<argument><expr><name pos:line="193" pos:column="47">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="193" pos:column="52">
				<return pos:line="194" pos:column="33">return <expr><op:operator pos:line="194" pos:column="40">new</op:operator> <name><name pos:line="194" pos:column="44">string</name><index pos:line="194" pos:column="50">[]</index></name> <block pos:line="194" pos:column="53">{ }</block></expr>;</return></then></if>

			<decl_stmt><decl><type><name pos:line="196" pos:column="25">var</name></type> <name pos:line="196" pos:column="29">list</name> <init pos:line="196" pos:column="34">= <expr><name><name pos:line="196" pos:column="36">yaml</name><index pos:line="196" pos:column="40">[<expr><name pos:line="196" pos:column="41">key</name></expr>]</index></name><op:operator pos:line="196" pos:column="45">.</op:operator><call><name pos:line="196" pos:column="46">ToDictionary</name><argument_list pos:line="196" pos:column="58">()</argument_list></call><op:operator pos:line="196" pos:column="60">.</op:operator><call><name><name pos:line="196" pos:column="61">Keys</name><op:operator pos:line="196" pos:column="65">.</op:operator><name pos:line="196" pos:column="66">ToArray</name></name><argument_list pos:line="196" pos:column="73">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:line="197" pos:column="25">return <expr><name pos:line="197" pos:column="32">parsePaths</name> <op:operator pos:line="197" pos:column="43">?</op:operator> <call><name><name pos:line="197" pos:column="45">list</name><op:operator pos:line="197" pos:column="49">.</op:operator><name pos:line="197" pos:column="50">Select</name></name><argument_list pos:line="197" pos:column="56">(<argument><expr><name><name pos:line="197" pos:column="57">Platform</name><op:operator pos:line="197" pos:column="65">.</op:operator><name pos:line="197" pos:column="66">ResolvePath</name></name></expr></argument>)</argument_list></call><op:operator pos:line="197" pos:column="78">.</op:operator><call><name pos:line="197" pos:column="79">ToArray</name><argument_list pos:line="197" pos:column="86">()</argument_list></call> <op:operator pos:line="197" pos:column="89">:</op:operator> <name pos:line="197" pos:column="91">list</name></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="200" pos:column="17">static</specifier> <name><name pos:line="200" pos:column="24">IReadOnlyDictionary</name><argument_list pos:line="200" pos:column="43">&lt;<argument><name pos:line="200" pos:column="44">string</name></argument>, <argument><name pos:line="200" pos:column="52">string</name></argument>&gt;</argument_list></name></type> <name pos:line="200" pos:column="60">YamlDictionary</name><parameter_list pos:line="200" pos:column="74">(<param><decl><type><name><name pos:line="200" pos:column="75">Dictionary</name><argument_list pos:line="200" pos:column="85">&lt;<argument><name pos:line="200" pos:column="86">string</name></argument>, <argument><name pos:line="200" pos:column="94">MiniYaml</name></argument>&gt;</argument_list></name></type> <name pos:line="200" pos:column="104">yaml</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="110">string</name></type> <name pos:line="200" pos:column="117">key</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="122">bool</name></type> <name pos:line="200" pos:column="127">parsePaths</name> <init pos:line="200" pos:column="138">= <expr><lit:literal type="boolean" pos:line="200" pos:column="140">false</lit:literal></expr></init></decl></param>)</parameter_list>
		<block pos:line="201" pos:column="17">{
			<if pos:line="202" pos:column="25">if <condition pos:line="202" pos:column="28">(<expr><op:operator pos:line="202" pos:column="29">!</op:operator><call><name><name pos:line="202" pos:column="30">yaml</name><op:operator pos:line="202" pos:column="34">.</op:operator><name pos:line="202" pos:column="35">ContainsKey</name></name><argument_list pos:line="202" pos:column="46">(<argument><expr><name pos:line="202" pos:column="47">key</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="202" pos:column="52">
				<return pos:line="203" pos:column="33">return <expr><op:operator pos:line="203" pos:column="40">new</op:operator> <call><name><name pos:line="203" pos:column="44">ReadOnlyDictionary</name><argument_list pos:line="203" pos:column="62">&lt;<argument><name pos:line="203" pos:column="63">string</name></argument>, <argument><name pos:line="203" pos:column="71">string</name></argument>&gt;</argument_list></name><argument_list pos:line="203" pos:column="78">()</argument_list></call></expr>;</return></then></if>

			<decl_stmt><decl><type><name><name pos:line="205" pos:column="25">Func</name><argument_list pos:line="205" pos:column="29">&lt;<argument><name pos:line="205" pos:column="30">string</name></argument>, <argument><name pos:line="205" pos:column="38">string</name></argument>&gt;</argument_list></name></type> <name pos:line="205" pos:column="46">keySelector</name> <init pos:line="205" pos:column="58">= <expr><name pos:line="205" pos:column="60">parsePaths</name> <op:operator pos:line="205" pos:column="71">?</op:operator> <op:operator pos:line="205" pos:column="73">(</op:operator><name><name pos:line="205" pos:column="74">Func</name><argument_list pos:line="205" pos:column="78">&lt;<argument><name pos:line="205" pos:column="79">string</name></argument>, <argument><name pos:line="205" pos:column="87">string</name></argument>&gt;</argument_list></name><op:operator pos:line="205" pos:column="94">)</op:operator><name><name pos:line="205" pos:column="95">Platform</name><op:operator pos:line="205" pos:column="103">.</op:operator><name pos:line="205" pos:column="104">ResolvePath</name></name> <op:operator pos:line="205" pos:column="116">:</op:operator> <lambda><name pos:line="205" pos:column="118">k</name> <op:operator pos:line="205" pos:column="120">=&gt;</op:operator> <name pos:line="205" pos:column="123">k</name></lambda></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="206" pos:column="25">var</name></type> <name pos:line="206" pos:column="29">inner</name> <init pos:line="206" pos:column="35">= <expr><name><name pos:line="206" pos:column="37">yaml</name><index pos:line="206" pos:column="41">[<expr><name pos:line="206" pos:column="42">key</name></expr>]</index></name><op:operator pos:line="206" pos:column="46">.</op:operator><call><name pos:line="206" pos:column="47">ToDictionary</name><argument_list pos:line="206" pos:column="59">(<argument><expr><name pos:line="206" pos:column="60">keySelector</name></expr></argument>, <argument><expr><lambda><name pos:line="206" pos:column="73">my</name> <op:operator pos:line="206" pos:column="76">=&gt;</op:operator> <name><name pos:line="206" pos:column="79">my</name><op:operator pos:line="206" pos:column="81">.</op:operator><name pos:line="206" pos:column="82">Value</name></name></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<return pos:line="208" pos:column="25">return <expr><op:operator pos:line="208" pos:column="32">new</op:operator> <call><name><name pos:line="208" pos:column="36">ReadOnlyDictionary</name><argument_list pos:line="208" pos:column="54">&lt;<argument><name pos:line="208" pos:column="55">string</name></argument>, <argument><name pos:line="208" pos:column="63">string</name></argument>&gt;</argument_list></name><argument_list pos:line="208" pos:column="70">(<argument><expr><name pos:line="208" pos:column="71">inner</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="211" pos:column="17">public</specifier> <name pos:line="211" pos:column="24">T</name></type> <name><name pos:line="211" pos:column="26">Get</name><argument_list pos:line="211" pos:column="29">&lt;<argument><name pos:line="211" pos:column="30">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="211" pos:column="32">()</parameter_list> <where pos:line="211" pos:column="35">where <name pos:line="211" pos:column="41">T</name> : <name pos:line="211" pos:column="45">IGlobalModData</name></where>
		<block pos:line="212" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="213" pos:column="25">var</name></type> <name pos:line="213" pos:column="29">module</name> <init pos:line="213" pos:column="36">= <expr><call><name><name pos:line="213" pos:column="38">modules</name><op:operator pos:line="213" pos:column="45">.</op:operator><name><name pos:line="213" pos:column="46">GetOrDefault</name><argument_list pos:line="213" pos:column="58">&lt;<argument><name pos:line="213" pos:column="59">T</name></argument>&gt;</argument_list></name></name><argument_list pos:line="213" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line" pos:line="215" pos:column="25">// Lazily create the default values if not explicitly defined.</comment>
			<if pos:line="216" pos:column="25">if <condition pos:line="216" pos:column="28">(<expr><name pos:line="216" pos:column="29">module</name> <op:operator pos:line="216" pos:column="36">==</op:operator> <name pos:line="216" pos:column="39">null</name></expr>)</condition><then pos:line="216" pos:column="44">
			<block pos:line="217" pos:column="25">{
				<expr_stmt><expr><name pos:line="218" pos:column="33">module</name> <op:operator pos:line="218" pos:column="40">=</op:operator> <op:operator pos:line="218" pos:column="42">(</op:operator><name pos:line="218" pos:column="43">T</name><op:operator pos:line="218" pos:column="44">)</op:operator><call><name><name pos:line="218" pos:column="45">Game</name><op:operator pos:line="218" pos:column="49">.</op:operator><name pos:line="218" pos:column="50">ModData</name><op:operator pos:line="218" pos:column="57">.</op:operator><name pos:line="218" pos:column="58">ObjectCreator</name><op:operator pos:line="218" pos:column="71">.</op:operator><name pos:line="218" pos:column="72">CreateBasic</name></name><argument_list pos:line="218" pos:column="83">(<argument><expr><call><name pos:line="218" pos:column="84">typeof</name><argument_list pos:line="218" pos:column="90">(<argument><expr><name pos:line="218" pos:column="91">T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="219" pos:column="33">modules</name><op:operator pos:line="219" pos:column="40">.</op:operator><name pos:line="219" pos:column="41">Add</name></name><argument_list pos:line="219" pos:column="44">(<argument><expr><name pos:line="219" pos:column="45">module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<return pos:line="222" pos:column="25">return <expr><name pos:line="222" pos:column="32">module</name></expr>;</return>
		}</block></function>
	}</block></decl>
<decl/></enum>}</block></namespace>
</unit>
