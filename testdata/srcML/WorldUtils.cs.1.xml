<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C#" filename="C:\Users\kh\Documents\GitHubVisualStudio\Swummary\testData\OpenRA\WorldUtils.cs" pos:tabs="8"><cpp:region pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">region</cpp:directive> Copyright &amp; License Information</cpp:region>
<comment type="block" pos:line="2" pos:column="1">/*
 * Copyright 2007-2015 The OpenRA Developers (see AUTHORS)
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */</comment>
<cpp:endregion pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endregion</cpp:directive></cpp:endregion>

<using pos:line="11" pos:column="1">using <name pos:line="11" pos:column="7">System</name>;</using>
<using pos:line="12" pos:column="1">using <name><name pos:line="12" pos:column="7">System</name><op:operator pos:line="12" pos:column="13">.</op:operator><name pos:line="12" pos:column="14">Collections</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">Generic</name></name>;</using>
<using pos:line="13" pos:column="1">using <name><name pos:line="13" pos:column="7">System</name><op:operator pos:line="13" pos:column="13">.</op:operator><name pos:line="13" pos:column="14">Diagnostics</name></name>;</using>
<using pos:line="14" pos:column="1">using <name><name pos:line="14" pos:column="7">System</name><op:operator pos:line="14" pos:column="13">.</op:operator><name pos:line="14" pos:column="14">Linq</name></name>;</using>
<using pos:line="15" pos:column="1">using <name><name pos:line="15" pos:column="7">OpenRA</name><op:operator pos:line="15" pos:column="13">.</op:operator><name pos:line="15" pos:column="14">GameRules</name></name>;</using>
<using pos:line="16" pos:column="1">using <name><name pos:line="16" pos:column="7">OpenRA</name><op:operator pos:line="16" pos:column="13">.</op:operator><name pos:line="16" pos:column="14">Support</name></name>;</using>
<using pos:line="17" pos:column="1">using <name><name pos:line="17" pos:column="7">OpenRA</name><op:operator pos:line="17" pos:column="13">.</op:operator><name pos:line="17" pos:column="14">Traits</name></name>;</using>

<namespace pos:line="19" pos:column="1">namespace <name pos:line="19" pos:column="11">OpenRA</name>
<block pos:line="20" pos:column="1">{
	<class><specifier pos:line="21" pos:column="9">public</specifier> <specifier pos:line="21" pos:column="16">static</specifier> class <name pos:line="21" pos:column="29">WorldUtils</name>
	<block pos:line="22" pos:column="9">{
		<function><type><specifier pos:line="23" pos:column="17">public</specifier> <specifier pos:line="23" pos:column="24">static</specifier> <name pos:line="23" pos:column="31">Actor</name></type> <name pos:line="23" pos:column="37">ClosestTo</name><parameter_list pos:line="23" pos:column="46">(<param><decl><type><name pos:line="23" pos:column="47">this</name> <name><name pos:line="23" pos:column="52">IEnumerable</name><argument_list pos:line="23" pos:column="63">&lt;<argument><name pos:line="23" pos:column="64">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="23" pos:column="71">actors</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="79">Actor</name></type> <name pos:line="23" pos:column="85">a</name></decl></param>)</parameter_list>
		<block pos:line="24" pos:column="17">{
			<return pos:line="25" pos:column="25">return <expr><call><name><name pos:line="25" pos:column="32">actors</name><op:operator pos:line="25" pos:column="38">.</op:operator><name pos:line="25" pos:column="39">ClosestTo</name></name><argument_list pos:line="25" pos:column="48">(<argument><expr><name><name pos:line="25" pos:column="49">a</name><op:operator pos:line="25" pos:column="50">.</op:operator><name pos:line="25" pos:column="51">CenterPosition</name></name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="28" pos:column="17">public</specifier> <specifier pos:line="28" pos:column="24">static</specifier> <name pos:line="28" pos:column="31">Actor</name></type> <name pos:line="28" pos:column="37">ClosestTo</name><parameter_list pos:line="28" pos:column="46">(<param><decl><type><name pos:line="28" pos:column="47">this</name> <name><name pos:line="28" pos:column="52">IEnumerable</name><argument_list pos:line="28" pos:column="63">&lt;<argument><name pos:line="28" pos:column="64">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="28" pos:column="71">actors</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="79">WPos</name></type> <name pos:line="28" pos:column="84">pos</name></decl></param>)</parameter_list>
		<block pos:line="29" pos:column="17">{
			<return pos:line="30" pos:column="25">return <expr><call><name><name pos:line="30" pos:column="32">actors</name><op:operator pos:line="30" pos:column="38">.</op:operator><name pos:line="30" pos:column="39">MinByOrDefault</name></name><argument_list pos:line="30" pos:column="53">(<argument><expr><lambda><name pos:line="30" pos:column="54">a</name> <op:operator pos:line="30" pos:column="56">=&gt;</op:operator> <op:operator pos:line="30" pos:column="59">(</op:operator><name><name pos:line="30" pos:column="60">a</name><op:operator pos:line="30" pos:column="61">.</op:operator><name pos:line="30" pos:column="62">CenterPosition</name></name> <op:operator pos:line="30" pos:column="77">-</op:operator> <name pos:line="30" pos:column="79">pos</name><op:operator pos:line="30" pos:column="82">)</op:operator><op:operator pos:line="30" pos:column="83">.</op:operator><name pos:line="30" pos:column="84">LengthSquared</name></lambda></expr></argument>)</argument_list></call></expr>;</return>
		}</block></function>

		<function><type><specifier pos:line="33" pos:column="17">public</specifier> <specifier pos:line="33" pos:column="24">static</specifier> <name><name pos:line="33" pos:column="31">IEnumerable</name><argument_list pos:line="33" pos:column="42">&lt;<argument><name pos:line="33" pos:column="43">Actor</name></argument>&gt;</argument_list></name></type> <name pos:line="33" pos:column="50">FindActorsInCircle</name><parameter_list pos:line="33" pos:column="68">(<param><decl><type><name pos:line="33" pos:column="69">this</name> <name pos:line="33" pos:column="74">World</name></type> <name pos:line="33" pos:column="80">world</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="87">WPos</name></type> <name pos:line="33" pos:column="92">origin</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="100">WDist</name></type> <name pos:line="33" pos:column="106">r</name></decl></param>)</parameter_list>
		<block pos:line="34" pos:column="17">{
			<using pos:line="35" pos:column="25">using (<expr><op:operator pos:line="35" pos:column="32">new</op:operator> <call><name pos:line="35" pos:column="36">PerfSample</name><argument_list pos:line="35" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="47">"FindUnitsInCircle"</lit:literal></expr></argument>)</argument_list></call></expr>)
			<block pos:line="36" pos:column="25">{
				<comment type="line" pos:line="37" pos:column="33">// Target ranges are calculated in 2D, so ignore height differences</comment>
				<decl_stmt><decl><type><name pos:line="38" pos:column="33">var</name></type> <name pos:line="38" pos:column="37">vec</name> <init pos:line="38" pos:column="41">= <expr><op:operator pos:line="38" pos:column="43">new</op:operator> <call><name pos:line="38" pos:column="47">WVec</name><argument_list pos:line="38" pos:column="51">(<argument><expr><name pos:line="38" pos:column="52">r</name></expr></argument>, <argument><expr><name pos:line="38" pos:column="55">r</name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="58">WDist</name><op:operator pos:line="38" pos:column="63">.</op:operator><name pos:line="38" pos:column="64">Zero</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<return pos:line="39" pos:column="33">return <expr><call><name><name pos:line="39" pos:column="40">world</name><op:operator pos:line="39" pos:column="45">.</op:operator><name pos:line="39" pos:column="46">ActorMap</name><op:operator pos:line="39" pos:column="54">.</op:operator><name pos:line="39" pos:column="55">ActorsInBox</name></name><argument_list pos:line="39" pos:column="66">(<argument><expr><name pos:line="39" pos:column="67">origin</name> <op:operator pos:line="39" pos:column="74">-</op:operator> <name pos:line="39" pos:column="76">vec</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="81">origin</name> <op:operator pos:line="39" pos:column="88">+</op:operator> <name pos:line="39" pos:column="90">vec</name></expr></argument>)</argument_list></call><op:operator pos:line="39" pos:column="94">.</op:operator><call><name pos:line="39" pos:column="95">Where</name><argument_list pos:line="39" pos:column="100">(
					<argument><expr><lambda><name pos:line="40" pos:column="41">a</name> <op:operator pos:line="40" pos:column="43">=&gt;</op:operator> <op:operator pos:line="40" pos:column="46">(</op:operator><name><name pos:line="40" pos:column="47">a</name><op:operator pos:line="40" pos:column="48">.</op:operator><name pos:line="40" pos:column="49">CenterPosition</name></name> <op:operator pos:line="40" pos:column="64">-</op:operator> <name pos:line="40" pos:column="66">origin</name><op:operator pos:line="40" pos:column="72">)</op:operator><op:operator pos:line="40" pos:column="73">.</op:operator><name pos:line="40" pos:column="74">HorizontalLengthSquared</name> <op:operator pos:line="40" pos:column="98">&lt;=</op:operator> <name><name pos:line="40" pos:column="101">r</name><op:operator pos:line="40" pos:column="102">.</op:operator><name pos:line="40" pos:column="103">LengthSquared</name></name></lambda></expr></argument>)</argument_list></call></expr>;</return>
			}</block></using>
		}</block></function>

		<function><type><specifier pos:line="44" pos:column="17">public</specifier> <specifier pos:line="44" pos:column="24">static</specifier> <name pos:line="44" pos:column="31">void</name></type> <name><name pos:line="44" pos:column="36">DoTimed</name><argument_list pos:line="44" pos:column="43">&lt;<argument><name pos:line="44" pos:column="44">T</name></argument>&gt;</argument_list></name><parameter_list pos:line="44" pos:column="46">(<param><decl><type><name pos:line="44" pos:column="47">this</name> <name><name pos:line="44" pos:column="52">IEnumerable</name><argument_list pos:line="44" pos:column="63">&lt;<argument><name pos:line="44" pos:column="64">T</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="67">e</name></decl></param>, <param><decl><type><name><name pos:line="44" pos:column="70">Action</name><argument_list pos:line="44" pos:column="76">&lt;<argument><name pos:line="44" pos:column="77">T</name></argument>&gt;</argument_list></name></type> <name pos:line="44" pos:column="80">a</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="83">string</name></type> <name pos:line="44" pos:column="90">text</name></decl></param>)</parameter_list>
		<block pos:line="45" pos:column="17">{
			<comment type="line" pos:line="46" pos:column="25">// Note - manual enumeration here for performance due to high call volume.</comment>
			<decl_stmt><decl><type><name pos:line="47" pos:column="25">var</name></type> <name pos:line="47" pos:column="29">longTickThresholdInStopwatchTicks</name> <init pos:line="47" pos:column="63">= <expr><name><name pos:line="47" pos:column="65">PerfTimer</name><op:operator pos:line="47" pos:column="74">.</op:operator><name pos:line="47" pos:column="75">LongTickThresholdInStopwatchTicks</name></name></expr></init></decl>;</decl_stmt>
			<using pos:line="48" pos:column="25">using (<decl><type><name pos:line="48" pos:column="32">var</name></type> <name pos:line="48" pos:column="36">enumerator</name> <init pos:line="48" pos:column="47">= <expr><call><name><name pos:line="48" pos:column="49">e</name><op:operator pos:line="48" pos:column="50">.</op:operator><name pos:line="48" pos:column="51">GetEnumerator</name></name><argument_list pos:line="48" pos:column="64">()</argument_list></call></expr></init></decl>)
			<block pos:line="49" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="50" pos:column="33">var</name></type> <name pos:line="50" pos:column="37">start</name> <init pos:line="50" pos:column="43">= <expr><call><name><name pos:line="50" pos:column="45">Stopwatch</name><op:operator pos:line="50" pos:column="54">.</op:operator><name pos:line="50" pos:column="55">GetTimestamp</name></name><argument_list pos:line="50" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<while pos:line="51" pos:column="33">while <condition pos:line="51" pos:column="39">(<expr><call><name><name pos:line="51" pos:column="40">enumerator</name><op:operator pos:line="51" pos:column="50">.</op:operator><name pos:line="51" pos:column="51">MoveNext</name></name><argument_list pos:line="51" pos:column="59">()</argument_list></call></expr>)</condition>
				<block pos:line="52" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="53" pos:column="41">a</name><argument_list pos:line="53" pos:column="42">(<argument><expr><name><name pos:line="53" pos:column="43">enumerator</name><op:operator pos:line="53" pos:column="53">.</op:operator><name pos:line="53" pos:column="54">Current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="54" pos:column="41">var</name></type> <name pos:line="54" pos:column="45">current</name> <init pos:line="54" pos:column="53">= <expr><call><name><name pos:line="54" pos:column="55">Stopwatch</name><op:operator pos:line="54" pos:column="64">.</op:operator><name pos:line="54" pos:column="65">GetTimestamp</name></name><argument_list pos:line="54" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="55" pos:column="41">if <condition pos:line="55" pos:column="44">(<expr><name pos:line="55" pos:column="45">current</name> <op:operator pos:line="55" pos:column="53">-</op:operator> <name pos:line="55" pos:column="55">start</name> <op:operator pos:line="55" pos:column="61">&gt;</op:operator> <name pos:line="55" pos:column="63">longTickThresholdInStopwatchTicks</name></expr>)</condition><then pos:line="55" pos:column="97">
					<block pos:line="56" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="57" pos:column="49">PerfTimer</name><op:operator pos:line="57" pos:column="58">.</op:operator><name pos:line="57" pos:column="59">LogLongTick</name></name><argument_list pos:line="57" pos:column="70">(<argument><expr><name pos:line="57" pos:column="71">start</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="78">current</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="87">text</name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="93">enumerator</name><op:operator pos:line="57" pos:column="103">.</op:operator><name pos:line="57" pos:column="104">Current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="58" pos:column="49">start</name> <op:operator pos:line="58" pos:column="55">=</op:operator> <call><name><name pos:line="58" pos:column="57">Stopwatch</name><op:operator pos:line="58" pos:column="66">.</op:operator><name pos:line="58" pos:column="67">GetTimestamp</name></name><argument_list pos:line="58" pos:column="79">()</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="60" pos:column="41">else
						<expr_stmt><expr><name pos:line="61" pos:column="49">start</name> <op:operator pos:line="61" pos:column="55">=</op:operator> <name pos:line="61" pos:column="57">current</name></expr>;</expr_stmt></else></if>
				}</block></while>
			}</block></using>
		}</block></function>

		<function><type><specifier pos:line="66" pos:column="17">public</specifier> <specifier pos:line="66" pos:column="24">static</specifier> <name pos:line="66" pos:column="31">bool</name></type> <name pos:line="66" pos:column="36">AreMutualAllies</name><parameter_list pos:line="66" pos:column="51">(<param><decl><type><name pos:line="66" pos:column="52">Player</name></type> <name pos:line="66" pos:column="59">a</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="62">Player</name></type> <name pos:line="66" pos:column="69">b</name></decl></param>)</parameter_list>
		<block pos:line="67" pos:column="17">{
			<return pos:line="68" pos:column="25">return <expr><name><name pos:line="68" pos:column="32">a</name><op:operator pos:line="68" pos:column="33">.</op:operator><name pos:line="68" pos:column="34">Stances</name><index pos:line="68" pos:column="41">[<expr><name pos:line="68" pos:column="42">b</name></expr>]</index></name> <op:operator pos:line="68" pos:column="45">==</op:operator> <name><name pos:line="68" pos:column="48">Stance</name><op:operator pos:line="68" pos:column="54">.</op:operator><name pos:line="68" pos:column="55">Ally</name> <type:modifier pos:line="68" pos:column="60">&amp;&amp;</type:modifier></name>
				<name><name pos:line="69" pos:column="33">b</name><op:operator pos:line="69" pos:column="34">.</op:operator><name pos:line="69" pos:column="35">Stances</name><index pos:line="69" pos:column="42">[<expr><name pos:line="69" pos:column="43">a</name></expr>]</index></name> <op:operator pos:line="69" pos:column="46">==</op:operator> <name><name pos:line="69" pos:column="49">Stance</name><op:operator pos:line="69" pos:column="55">.</op:operator><name pos:line="69" pos:column="56">Ally</name></name></expr>;</return>
		}</block></function>
	}</block></class>
}</block></namespace>
</unit>
